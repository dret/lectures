<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="oai-track" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="apiworld.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="https://creativecommons.org/licenses/by/4.0/" short="CC BY 4.0">
		<div class="license">
			<p><a rel="license" title="View full text of license" href="https://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/youtube/logo/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="View full text of license" href="https://creativecommons.org/licenses/by/4.0/">This work is licensed under a CC<br/>Attribution 4.0 International License</a></p>
		</div>
	</license>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Date</th>
					<th valign="bottom">Title</th>
					<th valign="bottom">Slides</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><span class="title"><hotspot:date/></span></b></td>
						<td valign="top"><b><span class="title"><hotspot:title/></span></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<title><a href="https://apiworld.co/">API World</a> 2025</title>
	<author>Erik Wilde</author>
	<affiliation>Head of Strategy (Enterprise), <a href="https://jentic.com/">Jentic</a></affiliation>
	<date short="2025-09-03">September 3, 2025</date>
	<copyright>2025 Erik Wilde</copyright>
	<presentation id="workshop-introduction">
		<title short="Workshop Introduction">API Management in Practice: Workshop Introduction</title>
		<author>Frank Kilcommins / Erik Wilde</author>
		<affiliation><a href="https://www.smartbear.com/">SmartBear</a> / <a href="https://jentic.com/">Jentic</a></affiliation>
		<copyright>2025 Frank Kilcommins &amp; Erik Wilde</copyright>
		<part id="trainers">
			<title>Your Trainers</title>
			<slide id="frank">
				<title>Frank Kilcommins</title>
				<img src="SmartBear-logo.png" title="SmartBear" href="https://www.smartbear.com/" style="float: right ; width : 30% ; margin : 0% 4% 4% 4% ; "/>
				<img src="OAI-logo.png" title="OpenAPI Initiative" href="https://www.openapis.org/" style="float: right ; clear : both ; width : 30% ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li>Principal API Technical Evangelist at <a href="https://www.smartbear.com/">SmartBear</a></li>
					<li>Governance Board Member at the <a href="https://www.openapis.org/">OpenAPI Initiative</a></li>
					<li>Co-Maintainer of the <a href="https://spec.openapis.org/arazzo/latest.html">Arazzo Specification</a></li>
					<li><a href="https://www.linkedin.com/in/frank-kilcommins"><img src="linkedin-logo.png" style=" height : 1em ; "/> <code>linkedin.com/in/frank-kilcommins</code></a></li>
					<li><a href="https://bsky.app/profile/fkilcommins.bsky.social"><img src="bluesky-logo.jpeg" style=" height : 1em ; "/> <code>@fkilcommins.bsky.social</code></a></li>
				</ul>
			</slide>
			<slide id="dret">
				<title>Erik Wilde</title>
				<img src="jentic.svg" title="Jentic" href="https://jentic.com/" style="float: right ; width : 30% ; margin : 0% 4% 4% 4% ; "/>
				<img src="OAI-logo.png" title="OpenAPI Initiative" href="https://www.openapis.org/" style="float: right ; clear : both ; width : 30% ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li>CA API Academy 2016-2019</li>
					<li>Axway Catalyst 2019-2023</li>
					<li>Head of Strategy (Enterprise) at <a href="https://jentic.com/">Jentic</a></li>
					<li>OAI Ambassador for the <a href="https://www.openapis.org/">OpenAPI Initiative</a></li>
					<li><a href="https://www.linkedin.com/in/erikwilde"><img src="linkedin-logo.png" style=" height : 1em ; "/> <code>linkedin.com/in/erikwilde</code></a></li>
					<li><a href="https://www.youtube.com/ErikWilde"><img src="youtube-logo.png" style=" height : 1em ; "/> <code>youtube.com/ErikWilde</code></a></li>
				</ul>
			</slide>
			<slide id="getting-apis-to-work">
				<title>Getting APIs to Work</title>
				<img src="youtube-erik-wilde.jpg" title="Erik Wilde on YouTube: Getting APIs to Work" href="https://www.youtube.com/ErikWilde" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<div style=" float : left ; width : 50% ; margin : 0% 4% 0% 2% ; ">
					<div style=" width: 100% ; position: relative ; padding-bottom: 56.25% ; ">
						<iframe style=" border: 0 ; top: 0 ; left: 0 ; width: 100% ; height: 100% ; position: absolute; " src="https://www.youtube-nocookie.com/embed/1CwUlDPqz2c" allowfullscreen="no" scrolling="no" allow="encrypted-media; accelerometer; gyroscope; picture-in-picture"/>
					</div>
				</div>
			</slide>
		</part>
	</presentation>
	<presentation id="workshop-api-description">
		<title short="Introduction to APIs and OpenAPI">API Management in Practice: Introduction to APIs and API Descriptions</title>
		<part id="value-description-formats">
			<title>What are API Description Formats</title>
			<slide id="api-descriptions-services">
				<title>Consumers want to use Services</title>
				<img src="api-descriptions-services.png" class="fullsize-left" />
			</slide>
			<slide id="api-descriptions-uses">
				<title>Description Languages are <q>API Lingua Francas</q></title>
				<img src="api-descriptions-uses.png" class="fullsize-left" />
			</slide>
			<slide id="api-descriptions-describes">
				<title>Descriptions are Machine-Readable Documents</title>
				<img src="api-descriptions-describes.png" class="fullsize-left" />
			</slide>
			<slide id="api-descriptions-understands">
				<title>Shared Understanding of APIs</title>
				<img src="api-descriptions-understands.png" class="fullsize-left" />
			</slide>
			<slide id="api-descriptions-discovers">
				<title>Discovery of Understandable Descriptions</title>
				<img src="api-descriptions-discovers.png" class="fullsize-left" />
			</slide>
			<slide id="api-descriptions-consumes">
				<title>Consuming based on Shared Understanding</title>
				<img src="api-descriptions-consumes.png" class="fullsize-left" />
			</slide>
			<slide id="descriptions-documentation">
				<title>Are Descriptions Documentation?</title>
				<img src="food-label.png" title="FDA Nutrition Facts Label" href="https://www.fda.gov/food/nutrition-facts-label/added-sugars-nutrition-facts-label" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li>Yes, but…</li>
					<li>APIs should be <em>described in a standardized way</em></li>
					<li>APIs are intended for <em>consumption by machines</em></li>
					<li><em>Machine-readable documentation</em> is called <em>description</em></li>
					<ul>
						<li>Or: <em>Human-readable description</em> is called <em>documentation</em></li>
					</ul>
					<li>APIs should always publish descriptions</li>
				</ul>
			</slide>
			<slide id="description-format-overview">
				<title>To Each Their Own</title>
				<ul>
					<li>API space evolution → Description language co-evolution</li>
					<li>Today's APIs often use HTTP and a resource-based approach</li>
					<ul>
						<li>Competing languages for this space were RAML and Blueprint</li>
					</ul>
					<li>Other approaches are supported by other description languages</li>
					<ul>
						<li><em>GraphQL</em> for Query-based APIs</li>
						<li><em>AsyncAPI</em> for Event-based APIs</li>
						<li><em>gRPC</em> for programming distributed systems</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="value-openapi-popularity">
			<title>Why OpenAPI is Popular</title>
			<slide id="rest-rules">
				<title>REST Rules</title>
				<ul>
					<li><em>External APIs</em> have gravitated towards HTTP/REST</li>
					<ul>
						<li>Simple and intuitive API style and tech stack</li>
						<li>Good fit for client-initiated synchronous interactions</li>
					</ul>
					<li><em>Internal APIs</em> have a bit more diversity</li>
					<ul>
						<li><em>OpenAPI</em> for request-based services</li>
						<li><em>GraphQL</em> for flexible front-ends</li>
						<li><em>AsyncAPI</em> for event-driven services</li>
						<li><em>gRPC</em> for remote procedure calls</li>
					</ul>
					<li>OpenAPI has the largest combined market in the API space</li>
				</ul>
			</slide>
			<slide id="tooling-availability">
				<title>Plenty of API Lifecycle Tooling</title>
				<ul>
					<li><em>Design tools</em> to help create and discuss APIs</li>
					<li><em>Validation tools</em> to make sure APIs adhere to guidelines</li>
					<li><em>Mocking tools</em> to generate APIs from descriptions</li>
					<li><em>Testing tools</em> to validate implementations against descriptions</li>
					<li><em>Fuzzing tools</em> to test APIs for robustness</li>
					<li><em>Documentation tools</em> to create API documentation</li>
					<li><em>Code generation tools</em> for client and server sides</li>
				</ul>
			</slide>
			<slide id="openapi-tooling">
				<title>OpenAPI Tooling</title>
				<img src="openapi-tools.png" href="https://tools.openapis.org/" class="fullsize-left"/>
			</slide>
			<slide id="api-landscape">
				<title>API Landscape</title>
				<img src="api-landscape.png" href="https://apilandscape.apiscene.io/" class="fullsize-shadow-left"/>
			</slide>
			<slide id="lingua-franca">
				<title>The Open API Lingua Franca</title>
				<ul>
					<li>OpenAPI benefits from the <em>network effect</em></li>
					<li><em>Technologists</em> can easily talk about designs</li>
					<li><em>Organisations</em> have a way to describe their building blocks</li>
					<li><em>Teams</em> can communicate in a more scalable way</li>
					<li>Communications are possible across all these areas</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions-workshop-api-openapi">
			<title>Conclusions: Introduction to APIs and OpenAPI</title>
			<slide id="thanks-workshop-api-openapi">
				<title>Thank You!</title>
				<img src="end.jpg" title="This is the End" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li><a href="https://www.youtube.com/ErikWilde"><img src="youtube-logo.png" style=" height : 1em ; "/> <code>youtube.com/ErikWilde</code></a></li>
					<li><a href="https://www.linkedin.com/in/erikwilde"><img src="linkedin-logo.png" style=" height : 1em ; "/> <code>linkedin.com/in/erikwilde</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/api-world-2025/"><code>dret.net/lectures/api-world-2025/</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="workshop-api-requirements-example-mapping">
		<title short="API Requirements and Example Mapping">API Management in Practice: Capturing API Requirements using Example Mapping</title>
		<author>Frank Kilcommins</author>
		<affiliation><a href="https://www.smartbear.com/">SmartBear</a></affiliation>
		<copyright>2025 Frank Kilcommins</copyright>
		<part id="practical-api-governance">
			<title>Practical API Governance</title>
			<slide id="two-questions">
				<title>Just Answer 2 Questions</title>
				<ul>
					<li>Are we building the <em>right API?</em></li>
					<li>Are we building the <em>API right?</em></li>
				</ul>
			</slide>
		</part>
		<part id="api-requirements">
			<title>Where are the API Requirements?</title>
			<slide id="api-requirements-bite">
				<title>Nasty Surprise!</title>
				<img src="api-requirements-johnny.jpg" class="fullsize-shadow" />
			</slide>
			<slide id="api-requirements-1">
				<title>Where are the API requirements?</title>
				<img src="requirements-1.png" class="fullsize"/>
			</slide>
			<slide id="api-requirements-2">
				<title>Where are the API requirements?</title>
				<img src="requirements-2.png" class="fullsize"/>
			</slide>
			<slide id="api-requirements-3">
				<title>Where are the API requirements?</title>
				<img src="requirements-3.png" class="fullsize"/>
			</slide>
			<slide id="api-requirements-4">
				<title>Where are the API requirements?</title>
				<img src="requirements-4.png" class="fullsize"/>
			</slide>
		</part>
		<part id="bdd-for-apis">
			<title>Behavior-Driven Development for API Delivery</title>
			<slide id="bdd-workflow">
				<title>Behaviour-Driven Development (BDD) Workflow</title>
				<img src="BDD-workflow.png" class="fullsize" />
			</slide>
			<slide id="power-of-specs">
				<title>Rich Ecosystem of API Specifications</title>
				<img src="milt-bryce-quote.png" class="fullsize-shadow" />
			</slide>
			<slide id="bdd-workflow-augmented">
				<title>BDD for API Delivery <em>with API Specifications</em></title>
				<img src="BDD-workflow-augmented.png" class="fullsize" />
			</slide>
			<slide id="specification-affordances">
				<title>The Power of API Specifications</title>
				<img src="specification-affordances.png" class="fullsize" />
			</slide>
		</part>
		<part id="example-mapping">
			<title>Example Mapping</title>
			<slide id="example-mapping">
				<title>Example Mapping for Deliberate Discovery</title>
				<img src="discovery.png" title="Deliberate discovery" style="float: right ; height: 50%; ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li>Effectively explore and refine detailed acceptance criteria, so that:</li>
					<ul>
						<li><em>Agreed</em> scope</li>
						<li><em>Identified</em> as much <em>uncertainty</em> as possible</li>
						<li><em>Agreed</em> on the <em>readiness</em> for design/development</li>
						<li>Identified <em>concrete examples</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="example-mapping-unknown-to-known">
				<title>Example Mapping for Deliberate Discovery</title>
				<ul>
					<li>Effectively explore and refine detailed acceptance criteria, so that:</li>
					<ul>
						<li><em>Agreed</em> scope</li>
						<li><em>Identified</em> as much <em>uncertainty</em> as possible</li>
						<li><em>Agreed</em> on the <em>readiness</em> for design/development</li>
						<li>Identified <em>concrete examples</em></li>
					</ul>
				</ul>
				<img src="unknown-to-known.png" title="Deliberate discovery" style="float: bottom ; width : 50% ; margin : 10% 4% 4% 4% ; "/>
			</slide>
			<slide id="example-mapping-prerequisites">
				<title>What do you need for Example Mapping?</title>
				<img src="example-mapping-cards.png" class="fullsize" />
			</slide>
			<slide id="three-amigos">
				<title>Who Should Participate?</title>
				<img src="3-amigos.png" class="fullsize" />
			</slide>
			<slide id="three-amigos-extended">
				<title>Who Should Participate for API User Stories?</title>
				<img src="3-amigos-with-smes.png" class="fullsize" />
			</slide>
		</part>
		<part id="example-mapping-demo">
			<title>Example Mapping in Action</title>
			<slide id="petco-problem">
				<title>Example Mapping in Action</title>
				<img src="petco-problem.png" class="fullsize" />
			</slide>
			<slide id="petco-problem-user-story">
				<title>Example Mapping in Action - Search for Pets</title>
				<img src="petco-problem-userstory.png" class="fullsize" />
			</slide>
			<slide id="search-for-pets-1">
				<title>Example Mapping: Search for Pets</title>
				<img src="example-mapping-1.png" class="fullsize" />
			</slide>
			<slide id="search-for-pets-2">
				<title>Example Mapping: Search for Pets</title>
				<img src="example-mapping-2.png" class="fullsize" />
			</slide>
			<slide id="search-for-pets-3">
				<title>Example Mapping: Search for Pets</title>
				<img src="example-mapping-3.png" class="fullsize" />
			</slide>
			<slide id="search-for-pets-4">
				<title>Example Mapping: Search for Pets</title>
				<img src="example-mapping-4.png" class="fullsize" />
			</slide>
			<slide id="search-for-pets-5">
				<title>Example Mapping: Search for Pets</title>
				<img src="example-mapping-5.png" class="fullsize" />
			</slide>
			<slide id="search-for-pets-6">
				<title>Example Mapping: Search for Pets</title>
				<img src="example-mapping-6.png" class="fullsize" />
			</slide>
			<slide id="search-for-pets-7">
				<title>Example Mapping: Search for Pets</title>
				<img src="example-mapping-7.png" class="fullsize" />
			</slide>
			<slide id="search-for-pets-8">
				<title>Example Mapping: Search for Pets</title>
				<img src="example-mapping-8.png" class="fullsize" />
			</slide>
			<slide id="search-for-pets-9">
				<title>Example Mapping: Search for Pets</title>
				<img src="example-mapping-9.png" class="fullsize" />
			</slide>
			<slide id="add-new-pet">
				<title>Example Mapping: Add New Pet</title>
				<img src="add-new-pet.png" class="fullsize" />
			</slide>
			<slide id="adopt-a-pet">
				<title>Example Mapping: Adopt Pet</title>
				<img src="adopt-pet.png" class="fullsize" />
			</slide>
			<slide id="adopt-a-pet">
				<title>Example Mapping: Get Adoptions List</title>
				<img src="get-adoptions.png" class="fullsize" />
			</slide>
		</part>
		<part id="exercise-1-get-pet-details">
			<title>Exercise 1: Example Mapping</title>
			<slide id="get-pet-details">
				<title>Exercise 1: Example Mapping for Retrieve Pet Details</title>
				<ul>
					<li>Given the following user story, have an Example Mapping session!</li>
				</ul>
				<img src="get-pet-details.png" class="fullsize" />
			</slide>
		</part>
	</presentation>
	<presentation id="workshop-openapi-introduction">
		<title short="Introduction to OpenAPI">API Management in Practice: Introduction to OpenAPI</title>
		<part id="openapi-fundamentals-machine">
			<title>OpenAPI as a Machine-Readable Format</title>
			<slide id="openapi-fundamentals-big-picture">
				<title>OpenAPI: The Big Picture</title>
				<img src="api-descriptions-simplified.png" class="fullsize-left" />
			</slide>
			<slide id="openapi-fundamentals-openapi-structure">
				<title>OpenAPI is Structured Data</title>
				<img src="food-label.png" title="FDA Nutrition Facts Label" href="https://www.fda.gov/food/nutrition-facts-label/added-sugars-nutrition-facts-label" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li>APIs described by OpenAPI are described in a structured way</li>
					<li><link href="openapi-fundamentals-resources">Resources</link>, <link href="openapi-fundamentals-interactions">interactions</link>, and <link href="openapi-fundamentals-representations">representations</link> are core concepts</li>
					<li>OpenAPI must use a structured way to describe these concepts</li>
				</ul>
			</slide>
			<slide id="openapi-fundamentals-object-structure">
				<title>OpenAPI Object Structure</title>
				<img src="openapi-object-structure.png" class="fullsize-left" />
			</slide>
			<slide id="openapi-fundamentals-greet-json">
				<title>Minimal OpenAPI in JSON</title>
				<listing src="greet.json"/>
			</slide>
			<slide id="openapi-fundamentals-greet-yaml">
				<title>Minimal OpenAPI in YAML</title>
				<listing src="greet.yaml"/>
			</slide>
			<slide id="openapi-fundamentals-swagger">
				<title>Minimal OpenAPI in Editing Tool</title>
				<img src="greet-swagger.png" href="https://editor-next.swagger.io/" class="fullsize-left"/>
			</slide>
		</part>
		<part id="openapi-fundamentals-superstructure">
			<title>OpenAPI Superstructure: Resources, Interactions, and Representations</title>
			<slide id="openapi-fundamentals-client-server-web">
				<title>How the Web Works</title>
				<img src="web-client-and-server-browser.png" class="fullsize-left"/>
			</slide>
			<slide id="openapi-fundamentals-structure">
				<title>Shaping Your API</title>
				<ul>
					<li><em>Resources</em> are the fundamental units of interaction</li>
					<li><em>Interactions</em> are how you access resources</li>
					<li><em>Representations</em> define how interactions exchange information</li>
				</ul>
			</slide>
		</part>
		<part id="openapi-fundamentals-resources">
			<title>Resources: URI Paths</title>
			<slide id="openapi-fundamentals-uri">
				<title>Uniform Resource Identifier (URI)</title>
				<pre>https://openapis.org/events</pre>
				<ul>
					<li>Individual resources are identified by uniformly defined identifiers</li>
					<li>Tasks are completed by traversing a number of resources</li>
					<li><em>Scheme</em> defines how identifiers are assigned: <code>https</code></li>
					<li><em>Authority</em> defines a naming authority: <code>openapis.org</code></li>
					<li><em>Path</em> is a hierarchical namespace: <code>/events</code></li>
				</ul>
			</slide>
			<slide id="openapi-fundamentals-github-openapi-paths">
				<title>OpenAPI: Organized by Resources</title>
				<img src="github-api-openapi-paths.png" class="fullsize-left"/>
			</slide>
			<slide id="openapi-fundamentals-github-openapi-editor">
				<title>OpenAPI Editors</title>
				<img src="github-api-swagger-editor.png" class="fullsize-left"/>
			</slide>
			<slide id="openapi-fundamentals-adding-paths">
				<title>Evolving APIs by Adding Paths</title>
				<ul>
					<li>Evolving APIs over time is a good practice</li>
					<li>Changing an API should not affect existing consumers</li>
					<li>Adding paths is a good way to avoid breaking changes</li>
				</ul>
			</slide>
		</part>
		<part id="openapi-fundamentals-interactions">
			<title>Interactions: Operations and Parameters</title>
			<slide id="openapi-fundamentals-http">
				<img src="http-logo.png" style="float: right ; width : 20% ; margin : 0% 4% 4% 4% ; "/>
				<title>Hypertext Transfer Protocol (HTTP)</title>
				<ul>
					<li>The <q>language</q> how clients and servers communicate</li>
					<li>Request/response model where the client always initiates the interaction</li>
					<li>Each request has a <em>request method</em> (e.g., <code>GET</code>)</li>
					<li>Each response has a <em>response status</em> (e.g., <code>200 OK</code>)</li>
					<li>Requests and responses use <em>header fields</em> for metadata</li>
					<li>Requests and responses can have a <em>message body</em></li>
				</ul>
			</slide>
			<slide id="openapi-fundamentals-http-interaction">
				<title>HTTP Example: Accessing OAI</title>
				<listing src="openapis-org-request.txt"/>
				<listing src="openapis-org-response.txt"/>
			</slide>
			<slide id="openapi-fundamentals-search">
				<title>Sending Data on the Web: Requests</title>
				<img src="library-of-congress-search.png" href="https://catalog.loc.gov/vwebv/searchAdvanced" class="fullsize-left"/>
				<pre>https://catalog.loc.gov/vwebv/search?searchArg1=Erik+Wilde&amp;argType1=all&amp;searchCode1=KNAM&amp;searchType=2&amp;combine2=and&amp;searchArg2=API&amp;argType2=all&amp;searchCode2=KTIL</pre>
			</slide>
			<slide id="openapi-fundamentals-search">
				<title>Receiving Data on the Web: Responses</title>
				<pre>https://catalog.loc.gov/vwebv/search?searchArg1=Erik+Wilde&amp;argType1=all&amp;searchCode1=KNAM&amp;searchType=2&amp;combine2=and&amp;searchArg2=API&amp;argType2=all&amp;searchCode2=KTIL</pre>
				<img src="library-of-congress-search-results.png" href="https://catalog.loc.gov/vwebv/searchAdvanced" class="fullsize-left"/>
			</slide>
			<slide id="openapi-fundamentals-query-params">
				<title>Parameters in URIs and HTTP</title>
				<ul>
					<li>A simple way to send data from client to server</li>
					<li><code>path:</code> Embedded in URI (<code>https://github.com/octocat</code>)</li>
					<li><code>query:</code> Appended to URI (<code>https://github.com/octocat?tab=repositories</code>)</li>
					<li><code>header:</code> Sent as HTTP header field</li>
					<li><code>cookie:</code> Sent as part of HTTP cookie management</li>
					<li>Larger data needs to be sent in <em>HTTP message body</em></li>
				</ul>
			</slide>
			<slide id="openapi-fundamentals-query-parameter">
				<title>Path Parameters in OpenAPI</title>
				<listing src="github-get-by-username.yaml" line="1-12"/>
				<pre>GET https://api.github.com/users/octocat</pre>
			</slide>
			<slide id="openapi-fundamentals-path-parameter">
				<title>Query Parameters in OpenAPI</title>
				<listing src="github-users-list.yaml"/>
				<pre>GET https://api.github.com/users?since=1&amp;per_page=20</pre>
			</slide>
		</part>
		<part id="openapi-fundamentals-representations">
			<title>Representations: Requests and Responses</title>
			<slide id="openapi-fundamentals-representation-options">
				<title>Data Exchange with HTTP APIs</title>
				<ul>
					<li><em>URI and HTTP parameters</em> (<code>path</code>, <code>query</code>, <code>header</code>/<code>cookie</code>)</li>
					<li><em>Media Types</em> (rooted in Email and Browsers)</li>
					<li><em>JSON</em> (rooted in shared structured data)</li>
				</ul>
			</slide>
			<slide id="openapi-fundamentals-media-types">
				<title>Identifying Resource Types on the Internet</title>
				<ul>
					<li><em>Multipurpose Internet Mail Extensions (MIME)</em> started in 1992</li>
					<li><em>Media Types</em> became the new terminology in 1996</li>
					<li>Identification for well-known content types (~2000)</li>
					<ul>
						<li><em>Text:</em> plain text, HTML, …</li>
						<li><em>Images:</em> JPEG, PNG, GIF, …</li>
						<li><em>Application:</em> PDF, XML, JSON, …</li>
					</ul>
					<li>Many APIs have domain-specific data models</li>
				</ul>
			</slide>
			<slide id="openapi-fundamentals-response">
				<title>API Response with Media Type</title>
				<listing src="github-get-by-username-pdf.yaml"/>
			</slide>
			<slide id="openapi-fundamentals-json">
				<title>Web-level Structured Data</title>
				<ul>
					<li><em>JavaScript Object Notation (JSON)</em> for exchanging structured data</li>
					<li><code>application/json</code> says nothing about the data itself</li>
					<li><em>JSON Schema</em> for describing valid structured data</li>
					<li>OpenAPI uses JSON Schema for describing structured data</li>
				</ul>
			</slide>
			<slide id="openapi-fundamentals-json-example">
				<title>API Response: Structured Data</title>
				<listing src="octocat.json" line="1-15"/>
			</slide>
			<slide id="openapi-fundamentals-response">
				<title>API Response with Media Type</title>
				<listing src="github-get-by-username.yaml"/>
			</slide>
			<slide id="openapi-fundamentals-json-schema">
				<title>JSON Schema for JSON Data</title>
				<listing src="github-public-user.yaml" line="1-19"/>
			</slide>
			<slide id="openapi-fundamentals-schema-editor">
				<title>Receiving Data on the Web: Responses</title>
				<img src="swagger-editor-private-user.png" class="fullsize-left"/>
			</slide>
			<slide id="openapi-fundamentals-components">
				<title>OpenAPI Components: Don't Repeat Yourself</title>
				<img src="lego-bricks.png" style="float: right ; width : 20% ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li>Many concepts/models in APIs are reused</li>
					<li>Concepts may also be reused across various APIs</li>
					<li>Avoiding copy/paste always is a good idea</li>
					<li><code>components</code> allows to define reusable <q>building blocks</q></li>
					<li><code>components</code> supports 10 types of building blocks</li>
					<ul>
						<li><code>pathItems</code>, <code>schemas</code>, <code>responses</code>, <code>parameters</code>, <code>examples</code>, …</li>
					</ul>
				</ul>
			</slide>
			<slide id="openapi-fundamentals-high-level">
				<title>30'000 ft View of OpenAPI 3.1.0</title>
				<ul>
					<li><code>openapi:</code> Defines which spec version is used</li>
					<li><code>info:</code> Provides metadata about the API</li>
					<li><code>servers:</code> Information about available servers</li>
					<li><code>paths:</code> Paths and operations for the API</li>
					<li><code>webhooks:</code> Support for server-initiated interactions</li>
					<li><code>components:</code> Reusable components for the description</li>
					<li><code>security:</code> Declaration of security mechanisms</li>
					<li><code>tags:</code> Used for grouping concepts across the API</li>
					<li><code>externalDocs:</code> Additional external documentation</li>
				</ul>
			</slide>
			<slide id="openapi-fundamentals-easy">
				<title>OpenAPI: The Easy Bits</title>
				<listing src="github-preamble.yaml"/>
			</slide>
		</part>
		<part id="openapi-fundamentals-conclusions>">
			<title>An Overview of OpenAPI: Conclusions</title>
			<slide id="openapi-fundamentals-summary">
				<title>An Overview of OpenAPI: Summary</title>
				<ul>
					<li>OpenAPI describes API that are based on <q>the web model</q></li>
					<li>The high-level model of OpenAPI is relatively simple</li>
					<li>The lower-level details of OpenAPI get more involved</li>
					<li>OpenAPI can deal with large APIs or collections of APIs</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="workshop-api-documentation">
		<title short="The Art of Good API Documentation">API Management in Practice: The Art of Good API Documentation</title>
		<author>Frank Kilcommins</author>
		<affiliation><a href="https://www.smartbear.com/">SmartBear</a></affiliation>
		<copyright>2025 Frank Kilcommins</copyright>
		<part id="api-documentation">
			<title>What is API Documentation?</title>
			<slide id="what-is-api-documentation">
				<title>What is API Documentation?</title>
				<ul>
					<li>Noun</li>
					<ul>
						<li>a human-readable description of how developers will enable machines to communicate with each other</li>
					</ul>
				</ul>
			</slide>
			<slide id="who-is-api-documentation-for">
				<title>Who is API Documentation For?</title>
				<ul>
					<li>In parallel</li>
					<ul>
						<li>Developers</li>
						<li>Non-Developers</li>
						<li>And now ... also, <em>AI and the Machines</em></li>
					</ul>
				</ul>
				<ul>
					<li>Internal vs External</li>
					<ul>
						<li>Internal</li>
						<ul>
							<li>Different AuthNZ patterns</li>
							<li>Proprietary information / links</li>
						</ul>
						<li>External</li>
						<ul>
							<li>Polished and use-case focused</li>
							<li>Focused reasons to adopt</li>
						</ul>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="types-of-api-documentation">
			<title>Types of API Documentation</title>
			<slide id="types-of-api-documentation">
				<title>Types of API Documentation</title>
				<img src="api-doc-types.png" class="fullsize" />
			</slide>
			<slide id="api-docs-reference">
				<title>API Reference: PetCo</title>
				<img src="api-docs-reference-1.png" class="fullsize" />
			</slide>
			<slide id="api-docs-reference-anatomy">
				<title>API Reference Anatomy: PetCo</title>
				<img src="api-docs-reference-anatomy.png" class="fullsize" />
			</slide>
			<slide id="api-docs-errors">
				<title>Errors: What new consumers will see most!</title>
				<img src="api-docs-reference-status-codes.png" style="float: right ; width: 35%; margin : 0% 4% 4% 4% ; " />
				<ul>
					<li><em>2xx:</em> Success</li>
					<li><em>4xx:</em> Client did something wrong</li>
					<li><em>5xx:</em> Server broke ... send a ticket!</li>
				</ul>
				<ul>
					<li>400/401/403/500 - are essential status codes</li>
					<ul>
						<li>Documenting these will help uncover bugs, and improve API usability</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-docs-reference-try-it">
				<title>API Reference: Try It!</title>
				<img src="api-docs-reference-try-it.png" class="fullsize" />
			</slide>
			<slide id="api-docs-concepts">
				<title>Concepts: What does all this mean?</title>
				<ul>
					<li><em>Getting started:</em> likely the most important concept</li>
				</ul>
				<img src="api-docs-concepts.png" class="fullsize" style="height: 55%;"/>
			</slide>
			<slide id="api-docs-tasks">
				<title>Tasks: Showcase what an API is good at!</title>
				<img src="api-docs-tasks.png" class="fullsize" />
			</slide>
		</part>
		<part id="good-api-docs">
			<title>Why you need good API Documentation</title>
			<slide id="good-api-docs">
				<title>Why you need <em>good</em> API Documentation</title>
				<ul>
					<li>Teach you customers, prospects, employees, partners, and LLMs (or AI agents) about using your products &amp; APIs</li>
					<li>Define, test, and secure product boundaries for the organization and/or consumers</li>
					<li>Enable customer support, and promote <em>self-service / self-help</em></li>
					<li>Support technical marketing efforts</li>
					<li>Improve API discoverability: are APIs <em>findable</em> and are their docs <em>usable</em></li>
				</ul>
			</slide>
			<slide id="good-api-docs-internal-benefits">
				<title>The <em>internal</em> benefits of <em>good</em> API Documentation</title>
				<ul>
					<li>Avoid/reduce duplicated effort</li>
					<li>Improved organizational understanding of products/platforms</li>
					<li>Improved consistency, standardization, and security</li>
					<ul>
						<li>Expose inconsistencies: compare docs across APIs (linted and validated)</li>
						<li>Improve quality: implicit QA by doc writers, explicit functional view of testing</li>
						<li>More secure: less room for errors in security and operations</li>
					</ul>
				</ul>
				<img src="api-docs-tip-1.png" class="fullsize" style="height: 50%;"/>
			</slide>
			<slide id="good-api-docs-external-benefits">
				<title>The <em>external</em> benefits of <em>good</em> API Documentation</title>
				<ul>
					<li>Increase <em>adoption</em> by end consumers - better first impressions</li>
					<li>Better <em>relationships</em> and sentiment with consumers</li>
					<li>Improved <em>reputation/credibility</em> with the developer community</li>
					<li>Improved <em>stickiness</em> giving ability to scale API footprint and ROI</li>
				</ul>
				<img src="api-docs-tip-2.png" class="fullsize" style="height: 50%;"/>
			</slide>
		</part>
		<part id="good-docs">
			<title>What makes a good API?</title>
			<slide id="good-api">
				<title>What makes a <em>good</em> API?</title>
				<img src="api-docs-good-traits.png" class="fullsize"/>
			</slide>
			<slide id="good-api-docs-reference">
				<title>Tips: Generating Useful API References</title>
				<img src="api-docs-tip-3.png" style="float: right ; width: 30%; margin : 0% 4% 4% 4% ; "/>
				<p>Make sure your reference (e.g. OpenAPI Description) includes the following:</p>
				<ul>
					<li>Explanation of what request data is required versus optional</li>
					<li>The version of your API (via /v2 path or custom headers)</li>
					<li>Authentication and other headers required for all requests (e.g. Token, JWT)</li>
					<li>The resource path for each endpoint (e.g. /pets/{petId})</li>
					<li>Which HTTP methods for each operation (e.g. GET, POST, PUT, PATCH)</li>
					<li>The request fields and where each goes (e.g. query, path, body)</li>
					<li>What to expect in each response</li>
					<ul>
						<li>Example request and response data (response examples per status code)</li>
						<li>Which HTTP status code are possible per endpoint/method combination</li>
						<li>What each status code means in that context</li>
					</ul>
				</ul>
			</slide>
			<slide id="good-api-features">
				<title>Most Important API Documentation Features</title>
				<ul>
					<li> <em>Examples</em> continue to be the best learning resource for consumers</li>
				</ul>
				<img src="api-docs-important-features.png" class="fullsize"/>
			</slide>
			<slide id="good-api-features-examples">
				<title>Most Important API Documentation Features</title>
				<ul>
					<li> <em>Examples</em> are twice as effective as <em>code samples</em></li>
				</ul>
				<img src="api-docs-important-features-examples.png" class="fullsize"/>
			</slide>
			<slide id="good-api-extensibility">
				<title>Tips for Extensibility: Future-proofing APIs </title>
				<ul>
					<li>Treat your API as a promise - <em>don't break it!</em></li>
					<li>Start with the smallest viable design and bake in <em>extensibility</em> practices from the beginning</li>
				</ul>
				<table rules="all" cellspacing="0" cellpadding="5">
					<thead>
						<tr>
							<th valign="bottom">Do</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td style="color: green;">Define extension points</td>
						</tr>
						<tr>
							<td style="color: green;">Define &amp; communicate extensibility pattern (e.g. Must Ignore)</td>
						</tr>
						<tr>
							<td style="color: green;">Apply versioning (when applicable)</td>
						</tr>
						<tr>
							<td style="color: green;">Test for extensibility</td>
						</tr>
						<tr>
							<td style="color: green;">Mock for extensibility tests</td>
						</tr>
						<tr>
							<td style="color: green;">Communicate</td>
						</tr>
					</tbody>
				</table>
			</slide>
			<slide id="good-api-extensibility-2">
				<title>Tips for Extensibility: Future-proofing APIs </title>
				<ul>
					<li>Treat your API as a promise - <em>don't break it!</em></li>
					<li>Start with the smallest viable design and bake in <em>extensibility</em> practices from the beginning</li>
				</ul>
				<table rules="all" cellspacing="0" cellpadding="5">
					<thead>
						<tr>
							<th valign="bottom">Do</th>
							<th valign="bottom">Don't</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td style="color: green;">Define extension points</td>
							<td style="color: red;">Don't add required inputs</td>
						</tr>
						<tr>
							<td style="color: green;">Define &amp; communicate extensibility pattern (e.g. Must Ignore)</td>
							<td style="color: red;">Don't remove outputs or make them optional</td>
						</tr>
						<tr>
							<td style="color: green;">Apply versioning (when applicable)</td>
							<td style="color: red;">Don't change property types</td>
						</tr>
						<tr>
							<td style="color: green;">Test for extensibility</td>
							<td style="color: red;">Don't add new properties which change the meaning of existing properties</td>
						</tr>
						<tr>
							<td style="color: green;">Mock for extensibility tests</td>
							<td style="color: red;">Don't use too many booleans (only sparingly)</td>
						</tr>
						<tr>
							<td style="color: green;">Communicate</td>
							<td style="color: red;">Don't be inconsistent in communication</td>
						</tr>
					</tbody>
				</table>
			</slide>
		</part>
		<part id="exercise-2-create-openapi">
			<title>Exercise 2: Create an OpenAPI Description</title>
			<slide id="pets-openapi">
				<title>Exercise 2: Create an OpenAPI Description</title>
				<img src="exercise-2.png" style="max-width: 25%; height: auto; float: right; margin : 0% 4% 4% 4% ;" />
				<ul>
					<li>Using the Example Mapping output for <em>Retrieve Pet Details</em> from exercise 1 to create an OpenAPI Description</li>
					<li>Tooling of your choice:</li>
					<ul>
						<li>https://editor-next.swagger.io</li>
						<li>VS Code (or your IDE of choice)</li>
						<li>ChatGPT or any other AI assistant</li>
					</ul>
					<li>YAML or JSON!</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="workshop-design-linting">
		<title short="API Design and OpenAPI Linting">API Management in Practice: API Design and OpenAPI Linting</title>
		<part id="linting">
			<title>Why Linting?</title>
			<slide id="quality-matters">
				<title>Does API Quality Matter?</title>
				<img src="API-quality.webp" class="fullsize-shadow" />
			</slide>
			<slide id="it-depends">
				<title>It Depends!</title>
				<ul>
					<li>Quality is in the eye of the consumer</li>
					<li>Quality is determined by a number of factors</li>
					<ul>
						<li><em>Consumer profile:</em> Private, partner, public</li>
						<li><em>Number of consumers:</em> One, dozens, thousands</li>
						<li><em>Context:</em> Solitary or part of an API landscape</li>
						<li><em>Exposed Service:</em> Data, Transaction, Events</li>
						<li><em>Lifecycle:</em> early, stable, established</li>
						<li><em>Tooling:</em> Support for certain features</li>
					</ul>
				</ul>
			</slide>
			<slide id="linting-basics">
				<title>Linting Basics</title>
				<img src="api-linting-basics.png" class="fullsize" />
			</slide>
			<slide id="linting-single">
				<title>Linting Single APIs</title>
				<img src="api-linting-single.png" class="fullsize" />
			</slide>
			<slide id="linting-multiple">
				<title>Linting in API Landscapes</title>
				<img src="api-linting-multiple.png" class="fullsize" />
			</slide>
		</part>
		<part id="level-1">
			<title>Using and Tweaking Rules</title>
			<slide id="minimal-spectral">
				<title>Minimal Spectral</title>
				<img src="spectral-petstore-builtin.png" title="Spectral linting the petstore example against the built-in ruleset for OAS" class="fullsize" />
			</slide>
			<slide id="tweaking-rules">
				<title>No Onions and Extra Cheese, Please!</title>
				<ul>
					<li>Spectral has a large set of <a href="https://docs.stoplight.io/docs/spectral/4dec24461f3af-open-api-rules">built-in rules for OpenAPI</a></li>
					<ul>
						<li>Spectral also has built-in rules for <a href="https://docs.stoplight.io/docs/spectral/1e63ffd0220f3-async-api-rules">AsyncAPI</a> and <a href="https://docs.stoplight.io/docs/spectral/96c7245b504b1-arazzo-rules">Arazzo</a></li>
					</ul>
					<li>Rules in rulesets can be <a href="https://docs.stoplight.io/docs/spectral/83527ef2dd8c0-extending-rulesets#change-rule-severity">selectively tweaked or turned <code>off</code></a></li>
				</ul>
				<listing src="ruleset-tweaking-rules.yaml" />
			</slide>
			<slide id="tweaking-rules-example">
				<title>Tweaking Rules</title>
				<img src="spectral-petstore-tweaking.png" title="Tweaking rule severity for the built-in Spectral ruleset for OAS" class="fullsize" />
			</slide>
			<slide id="third-party-rulesets">
				<title>3rd Party Rulesets</title>
				<ul>
					<li>Rulesets that (try to) help with better API design</li>
					<li>Rulesets that (try to) help with better API description</li>
					<li>Rulesets that (try to) help with standards conformance</li>
				</ul>
			</slide>
			<slide id="using-third-party-rulesets">
				<title>Using 3rd Party Rulesets</title>
				<img src="third-party-rulesets.png" href="https://github.com/stoplightio/spectral-rulesets" class="fullsize" />
			</slide>
		</part>
		<part id="level-2">
			<title>Custom Rulesets and Functions</title>
			<slide id="first-rule">
				<title>My First Rule</title>
				<listing src="ruleset-info-contact.yaml" />
				<ul>
					<li>Rules have identifiers</li>
					<li>Rules are applied to parts <code>given</code> with a JSONPath</li>
					<li>If a given part is found <code>then</code> functions are applied</li>
				</ul>
			</slide>
			<slide id="jsonpath-demo">
				<title>JSONPath Online Evaluator</title>
				<img src="jsonpath-demo.png" href="http://jsonpath.com/" class="fullsize" />
			</slide>
			<slide id="jsonpath-basics">
				<title>JSONPath Basics</title>
				<ul>
					<li><code>$</code>: The root object/element</li>
					<li><code>@</code>: The current object/element</li>
					<li><code>.</code>: Dot-notation to access properties</li>
					<li><code>[]</code>: Bracket-notation to access array elements</li>
				</ul>
			</slide>
			<slide id="rule">
				<title>The Anatomy of a Rule</title>
				<ul>
					<li><code>given</code> (required): The part of the document the rule should be applied to (JSONPath)</li>
					<li><code>then</code> (required): Describes which function should be applied to the <code>given</code> part of the document</li>
					<li><code>description</code> (optional): A short description of the rule</li>
					<li><code>message</code> (optional): A message that's displayed in the <code>spectral lint</code> output</li>
					<li><code>severity</code> (optional): The severity of the rule</li>
					<li><code>formats</code> (optional): The format that the rule should apply to</li>
					<li><code>recommended</code> (optional): Users can enforce all rules or only recommended rules</li>
					<li><code>resolved</code> (optional): Used to apply a rule to a document that's not resolved</li>
				</ul>
			</slide>
			<slide id="no-content-on-204">
				<title>Linting 204 Responses</title>
				<ul>
					<li><code>204</code> responses should never carry content</li>
				</ul>
				<listing src="petstore-content-on-204.oas.yaml" line="76-88" />
			</slide>
			<slide id="no-content-on-204-rule">
				<title>Linting 204 Responses with a Rule</title>
				<listing src="ruleset-no-content-on-204.yaml" />
			</slide>
			<slide id="no-content-on-204-function">
				<title>Linting 204 Responses with a Function</title>
				<ul>
					<li>Spectral rules span across rules and functions</li>
				</ul>
				<listing src="ruleset-no-content-on-204-function.yaml" />
				<listing src="no-content-on-204.js" />
			</slide>
			<slide id="testing">
				<title>Testing Rules</title>
				<ul>
					<li>Testing rules helps with making sure they work as expected</li>
					<li>Creating minimal example helps with better understanding the tests</li>
					<li>Work your way down from a minimal OpenAPI for creating tests</li>
				</ul>
				<listing src="minimal-openapi.yaml" />
			</slide>
			<slide id="aliases">
				<title>Reusing JSONPath: Aliases</title>
				<listing src="aliases.yaml" href="https://docs.stoplight.io/docs/spectral/584e5106451d2-aliases" />
			</slide>
		</part>
		<part id="level-3">
			<title>Rulesets for API Governance</title>
			<slide id="guidelines">
				<title>API Guidelines</title>
				<img src="api-signpost.webp" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li>Depending on intended consumer groups (private/partner/public)</li>
					<li>Depending on solitary or landscape APIs</li>
					<li>Depending on API lifecycle stage</li>
					<li>Depending on sensitivity for specific tooling</li>
				</ul>
			</slide>
			<slide id="in-the-wild">
				<title>API Guidelines in the Wild</title>
				<img href="https://dret.github.io/guidelines/" title="API Guidelines in the Wild" src="api-guidelines.png" class="fullsize"/>
			</slide>
			<slide id="zalando">
				<title>API Guideline in the Wild</title>
				<img href="https://opensource.zalando.com/restful-api-guidelines/#http-status-codes-and-errors" title="Zalando RESTful API and Event Guidelines" src="zalando-guideline-http-problem.png" class="fullsize"/>
			</slide>
		</part>
		<part id="level-4">
			<title>Automating Spectral</title>
			<slide id="spectral-usage-patterns">
				<title>Spectral Usage Patterns</title>
				<ul>
					<li>CLI can be used to manually check (early) designs</li>
					<li>Integrate Spectral into the IDE of your choice</li>
					<li><link href="git-hook">Git hooks</link> allow API linting to avoid committing problematic files</li>
					<li><link href="github-action">GitHub actions</link> can reject pull requests containing problematic files</li>
				</ul>
			</slide>
			<slide id="git-hook">
				<title>Git Hook: <code>.git/hooks/</code></title>
				<listing src="pre-commit.sh" />
			</slide>
			<slide id="github-action">
				<title>GitHub Action: <code>.github/workflows</code></title>
				<img src="github-action-pr.png" href="https://github.com/dret/spectral-devweek-2025/actions" class="fullsize-shadow"/>
			</slide>
			<slide id="github-action-workflow">
				<title>GitHub Action Workflow</title>
				<listing src="workflow-spectral.yaml" />
			</slide>
		</part>		<part id="conclusions-workshop-api-openapi">
			<title>Conclusions: Introduction to APIs and OpenAPI</title>
			<slide id="thanks-workshop-api-openapi">
				<title>Thank You!</title>
				<img src="end.jpg" title="This is the End" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li><a href="https://www.youtube.com/ErikWilde"><img src="youtube-logo.png" style=" height : 1em ; "/> <code>youtube.com/ErikWilde</code></a></li>
					<li><a href="https://www.linkedin.com/in/erikwilde"><img src="linkedin-logo.png" style=" height : 1em ; "/> <code>linkedin.com/in/erikwilde</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/api-world-2025/"><code>dret.net/lectures/api-world-2025/</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="openapi-summit">
		<title short="OpenAPI Summit Welcome">OpenAPI Summit Welcome and OpenAPI in the Age of AI</title>
		<toc class="abstract">APIs in general and their main description format OpenAPI have seen a lot of success since OpenAPI was created as Swagger in 2010 and became OpenAPI in 2016. What is the reason for its continued momentum and how does the landscape change with AI entering the picture? We look at APIs, OpenAPI and the way how AI plays a role in the API space. How can OpenAPI help you, how can the OpenAPI Initiative (OAI) help you using OpenAPI better, and how does AI influence the way how you design, develop, and deploy your APIs?</toc>
		<date short="2025-09-04">September 4, 2025</date>
		<part id="openapi-user-stories">
			<title>OpenAPI User Stories</title>
			<slide id="openapi-user-story-org-biz">
				<title>WIIFM: Business and Organization Value</title>
				<img src="unbundling-the-enterprise.jpg" title='Stephen Fishman and Matt McLarty, "Unbundling the Enterprise: APIs, Optionality, and the Science of Happy Accidents", 2024' style="float: right ; height : 70% ; margin : 0% 4% 4% 4% ;  filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<table cellspacing="20">
					<tr>
						<th align="right" valign="top">As</th>
						<td valign="top">business or organization leader</td>
					</tr>
					<tr>
						<th align="right" valign="top">I want</th>
						<td valign="top">well-defined and usable digital interfaces for partners and the public</td>
					</tr>
					<tr>
						<th align="right" valign="top">so that</th>
						<td valign="top">I can more easily change and scale my value streams.</td>
					</tr>
				</table>
			</slide>
			<slide id="openapi-user-story-dev">
				<title>WIIFM: API Developers</title>
				<img src="automating-api-delivery.jpg" title='Ikenna Nwaiwu, " Automating API Delivery: APIOps with OpenAPI", 2024' style="float: right ; height : 70% ; margin : 0% 4% 4% 4% ;  filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<table cellspacing="20">
					<tr>
						<th align="right" valign="top">As</th>
						<td valign="top">an API developer</td>
					</tr>
					<tr>
						<th align="right" valign="top">I want</th>
						<td valign="top">to describe the product I am going to implement</td>
					</tr>
					<tr>
						<th align="right" valign="top">so that</th>
						<td valign="top">I can use various tools throughout the API lifecycle.</td>
					</tr>
				</table>
			</slide>
			<slide id="openapi-user-story-org-biz">
				<title>WIIFM: API Consumers</title>
				<img src="design-and-build-great-web-apis.jpg" title='Mike Amundsen, "Design and Build Great Web APIs: Robust, Reliable, and Resilient", 2020' style="float: right ; height : 70% ; margin : 0% 4% 4% 4% ;  filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<table cellspacing="20">
					<tr>
						<th align="right" valign="top">As</th>
						<td valign="top">an API consumer</td>
					</tr>
					<tr>
						<th align="right" valign="top">I want</th>
						<td valign="top">APIs to have standardized descriptions</td>
					</tr>
					<tr>
						<th align="right" valign="top">so that</th>
						<td valign="top">I can easily understand and consume the products I am accessing.</td>
					</tr>
				</table>
			</slide>
			<slide id="openapi-user-story-platform">
				<title>WIIFM: Platform People</title>
				<img src="platform-strategy.jpg" title='Gregor Hohpe, "Platform Strategy: Innovation Through Harmonization", 2024' style="float: right ; height : 70% ; margin : 0% 4% 4% 4% ;  filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<table cellspacing="20">
					<tr>
						<th align="right" valign="top">As</th>
						<td valign="top">an API platform person</td>
					</tr>
					<tr>
						<th align="right" valign="top">I want</th>
						<td valign="top">to support standardized description formats</td>
					</tr>
					<tr>
						<th align="right" valign="top">so that</th>
						<td valign="top">all producers and consumers speak <q>the same language</q>.</td>
					</tr>
				</table>
			</slide>
		</part>
		<part id="apis-for-ai">
			<title>APIs for AI Consumers</title>
			<slide id="robots-and-openapi">
				<title>What AI Needs?</title>
				<img src="robot-reading-openapi-menu.png" class="fullsize"/>
			</slide>
			<slide id="openapi-robust-foundation">
				<title>OpenAPI: A Robust Foundation</title>
				<img src="openapi-logo.png" style="float: right ; width : 20% ; margin : 0% 4% 4% 4% ; "/>
				<table class="spaced">
					<tr>
						<th>Feature</th>
						<th>Enables</th>
					</tr>
					<tr>
						<td>Paths, operations, schemas</td>
						<td>Machine-readable contract</td>
					</tr>
					<tr>
						<td>Parameters &amp; examples</td>
						<td>Additional interaction details</td>
					</tr>
					<tr>
						<td>Tags &amp; grouping</td>
						<td>Basic categorization</td>
					</tr>
					<tr>
						<td>Security schemes</td>
						<td>Authentication and authorization setup</td>
					</tr>
					<tr>
						<td>External docs</td>
						<td>Human-oriented documentation</td>
					</tr>
					<tr>
						<td>Links</td>
						<td>Basic flow hints (since OpenAPI 3.0)</td>
					</tr>
				</table>
			</slide>
			<slide id="what-ai-wants">
				<title>What AI Needs</title>
				<img src="robot.png" style="float: right ; height : 80% ; margin : 0% 0% 0% 0% ; "/>
				<ul>
					<li>Intent &amp; purpose</li>
					<li>Typical usage sequences</li>
					<li>Side effect awareness</li>
					<li>Outcome semantics</li>
					<li>Selection &amp; ranking signals</li>
				</ul>
			</slide>
			<slide id="openapi-ai-gaps">
				<title>AI Gaps of OpenAPI</title>
				<table class="spaced">
					<tr>
						<th>AI Consumer Need</th>
						<th>OpenAPI Gap</th>
					</tr>
					<tr>
						<td>Intent &amp; purpose</td>
						<td>Why this API exists; goal or outcome it supports</td>
					</tr>
					<tr>
						<td>Sequence &amp; flow</td>
						<td>Full workflows, ordering, next-best-call</td>
					</tr>
					<tr>
						<td>Side effects &amp; safety</td>
						<td>Whether an operation is safe, idempotent, retryable</td>
					</tr>
					<tr>
						<td>Semantic meaning</td>
						<td>Business-level category, tags, or ontology references</td>
					</tr>
					<tr>
						<td>Selection &amp; ranking</td>
						<td>Signals for priority, deprecation, usage patterns</td>
					</tr>
				</table>
			</slide>
			<slide id="openapi-vs-layer-list">
				<title>Extending OpenAPI or Layering?</title>
				<img src="arazzo-logo.png" style="float: right ; width : 20% ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li><b>OpenAPI Extensions</b>
						<ul>
							<li>+ Compatible with existing OpenAPI tooling</li>
							<li>+ Allows incremental enrichment without new stack</li>
							<li>– Can become fragmented or inconsistent</li>
							<li>– Limited expressiveness for intent and workflows</li>
						</ul>
					</li>
					<li><b>Higher-Level Layer on Top</b>
						<ul>
							<li>+ Tailored to AI agent goals and interaction models</li>
							<li>+ Enables richer representations: workflows, outcomes, priorities</li>
							<li>– Requires new tooling or transformation logic</li>
							<li>– Introduces more complexity and coordination effort</li>
						</ul>
					</li>
				</ul>
			</slide>
			<slide id="ai-readiness-self-check">
				<title>AI Maturity Starts with Asking the Right Questions</title>
				<ul>
					<li>We don't yet have a standard for AI-ready API metadata</li>
					<li>But teams can start assessing APIs today</li>
					<ul>
						<li>Is the API's purpose clear?</li>
						<li>Are typical usage flows documented?</li>
						<li>Is behavior like retries or side effects explicit?</li>
						<li>Can others understand and use it without extra help?</li>
					</ul>
					<li>Even informal answers help shape future strategy</li>
					<li>Be ready to re-assess and refactor</li>
				</ul>
			</slide>
		</part>
		<part id="ai-apis">
			<title>AI-based APIs</title>
			<slide id="ai-api-consumer-perspective">
				<title>What AI Consumers Might Want to Know</title>
				<ul>
					<li>Does this API use AI at runtime?</li>
					<li>Is the result deterministic or variable?</li>
					<li>Which model is used and can I choose it?</li>
					<li>Will my input be stored or used for training?</li>
					<li>Can I influence or opt out of that behavior?</li>
				</ul>
			</slide>
			<slide id="ai-api-extension-strategy">
				<title>Toward a Shared Extension for AI Metadata</title>
				<ul>
					<li>Expose key AI characteristics through OpenAPI extensions</li>
					<li>Examples: model used, input retention, override options</li>
					<li>Avoid vendor lock-in by aligning on community patterns</li>
					<li>Start simple — evolve format over time as consensus grows</li>
				</ul>
			</slide>
			<slide id="ai-api-overlay-integration">
				<title>Add Metadata Flexibly with OpenAPI Overlays</title>
				<ul>
					<li>Overlays let you patch OpenAPI docs without changing the base</li>
					<li>Ideal for injecting runtime or environment-specific metadata</li>
					<li>Enables layering AI disclosures per deployment or audience</li>
					<li>Part of the OpenAPI Initiative — ready to be used today</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions-oai-track">
			<title>Conclusions</title>
			<slide id="openapi-initiative-call">
				<img src="OAI-logo.png" href="https://www.openapis.org/" style="float: right ; width : 30% ; margin : 0% 4% 4% 4% ; "/>
				<title>Shaping the Future Together — via the OpenAPI Initiative</title>
				<ul>
					<li>We've talked about descriptions, transparency, and standards</li>
					<li>The OpenAPI Initiative is where this work happens</li>
					<li>Follow the OAI, contribute ideas, join the conversation</li>
					<li>If this is strategic for you — consider <a href="https://www.openapis.org/membershipmembers">becoming a member</a></li>
					<li>More alignment means better tools, stronger APIs, and faster progress</li>
				</ul>
			</slide>
			<slide id="thanks-oai-track">
				<title>Thank You!</title>
				<img src="end.jpg" title="This is the End" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li><a href="https://www.youtube.com/ErikWilde"><img src="youtube-logo.png" style=" height : 1em ; "/> <code>youtube.com/ErikWilde</code></a></li>
					<li><a href="https://www.linkedin.com/in/erikwilde"><img src="linkedin-logo.png" style=" height : 1em ; "/> <code>linkedin.com/in/erikwilde</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/api-world-2025/"><code>dret.net/lectures/api-world-2025/</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>

</hotspot>
