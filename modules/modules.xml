<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="youtube" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="modules.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/catalyst/catalyst/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>Catalyst Modules</title>
	<author>Erik Wilde, <a href="https://www.openapis.org/" title="OpenAPI Initiative">OAI</a> Ambassador</author>
	<affiliation><a href="https://www.youtube.com/ErikWilde">Getting APIs to Work <img src="youtube-logo.png" style=" height : 1em ; "/></a></affiliation>
	<date>2016-2024</date>
	<copyright>2016-2024 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Title</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top">
							<b><span class="summary"><hotspot:title/></span><span class="toggle">:</span></b> <span class="toggle"><span class="description"><hotspot:toc class="abstract"/></span></span>
						</td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <hotspot:slides>(*)</hotspot:slides></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="business">
		<title short="Business">The Business of APIs</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/seven-lessons-on-how-technology-transformations-can-deliver-value" title='"Seven lessons on how technology transformations can deliver value", McKinsey Survey, March 2021'>Seven Transformation Lessons</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="business-transformation">
			<title>APIs for Business Transformation</title>
			<slide id="tech-determinism">
				<title>Technology Determinism</title>
				<ul>
					<li>APIs are necessary but not sufficient for <em>Digital Transformation</em></li>
					<ul>
						<li>APIs are the connective fabric of transformed organizations</li>
						<li>APIs can help but will not cause digital transformation</li>
					</ul>
					<li>Organizations must make sure to cover the three pillars</li>
					<ul>
						<li><em>Business</em> must drive the goals and execution of transformation</li>
						<li><em>Teams</em> are executing and must get support and autonomy</li>
						<li><em>Technology</em> is what allows transformed organizations to function</li>
					</ul>
				</ul>
			</slide>
			<part id="api-business">
				<title>API Business Value</title>
				<slide id="alignment">
					<title>Aligning Business and IT Strategy</title>
					<img href="https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/seven-lessons-on-how-technology-transformations-can-deliver-value" title='"Seven lessons on how technology transformations can deliver value", McKinsey Survey, March 2021' src="bridging-business-tech-gap.png" class="fullsize-left"/>
				</slide>
			</part>
			<slide id="hype-cycle">
				<title>Hype Cycle</title>
				<img src="hype-cycle.png" href="https://en.wikipedia.org/wiki/Hype_cycle" class="fullsize"/>
			</slide>
			<slide id="api-unicorn">
				<title>APIs Fix Anything!</title>
				<img src="hype-cycle-unicorn.png" class="fullsize"/>
			</slide>
			<slide id="api-plumbing">
				<title>APIs Are Just Plumbing</title>
				<img src="hype-cycle-unicorn-plumbing.png" class="fullsize"/>
			</slide>
			<slide id="execution-gap">
				<title>The Execution Gap</title>
				<img title="Grand Canyon" src="grand-canyon.jpg" class="fullsize"/>
			</slide>
			<slide id="vision-to-results">
				<title>From Vision to Results</title>
				<ul>
					<li><em>Digital Transformation</em> goals driven by a changing world</li>
					<li><em>API Vision</em> as the connective fabric of the organization</li>
					<li><em>API Strategy</em> that clearly defines the goals and focus areas</li>
					<li><em>API Program</em> to build and support an API culture</li>
					<li><em>API Platform</em> as a result of running the API program</li>
				</ul>
			</slide>
		</part>
		<part id="business-goals">
			<title>Business Goals of APIs</title>
			<slide id="three-business-goals">
				<title>Three Classes of API Business</title>
				<ul>
					<li><em>Public APIs</em> are provided to an open set of consumers</li>
					<li><em>Partner APIs</em> are limited to established relationships</li>
					<li><em>Private APIs</em> are meant to be used internally</li>
				</ul>
			</slide>
			<slide id="public-business">
				<title>The Business of Public APIs</title>
				<ul>
					<li>Public APIs can be used for direct revenue generation</li>
					<ul>
						<li>This is the exception and not the rule</li>
					</ul>
					<li>Public APIs should be used to improve value chains</li>
					<ul>
						<li>The value is generated indirectly</li>
						<li>When value chains change the APIs may change as well</li>
					</ul>
					<li>Public APIs create many and potentially brittle relationships</li>
					<ul>
						<li>Good design to minimize dependency and breakage</li>
						<li>Good documentation to drive adoption in a scalable way</li>
						<li>Careful management of (breaking) API changes</li>
					</ul>
				</ul>
			</slide>
			<slide id="partner-business">
				<title>The Business of Partner APIs</title>
				<ul>
					<li>Partner APIs are necessary for effective partner relationships</li>
					<li>Smaller set of existing/potential consumers that for public APIs</li>
					<li>Engage with partners by building an <em>external API platform</em></li>
				</ul>
			</slide>
			<slide id="private-business">
				<title>The Business of Private APIs</title>
				<ul>
					<li>Transform slow monoliths into more agile microservices architectures</li>
					<li>Decrease <q>time to value</q> from ideation to productive capabilities</li>
					<li>Decouple teams by building an <em>internal API platform</em></li>
				</ul>
			</slide>
			<slide id="vision-to-results-2">
				<title>From Vision to Results</title>
				<ul>
					<li>Formulate the <em>vision</em> of where transformation is leading</li>
					<li>Formulate a <em>strategy</em> for realizing the vision</li>
					<ul>
						<li>Address the goals for external/internal (or private/partner/public) APIs</li>
						<li>Address transformation for the business/organizational/technology pillars</li>
					</ul>
					<li>Define goals for checking progress on your transformation journey</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="introduction">
		<title short="Introduction">Introduction to APIs</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="high-level-view">
			<title>APIs from 50,000 feet</title>
			<slide id="api-language">
				<title>APIs are Languages</title>
				<ul>
					<li>APIs in their current sense evolved from the <em>original API</em></li>
					<ul>
						<li><em>Local APIs</em> originated as a way to build systems (i.e., one big thing)</li>
						<li><em>Network APIs</em> were invented decades ago but nobody found the silver bullet</li>
						<li><em>Web APIs</em> are a loose and evolving collection of principles and patterns</li>
					</ul>
					<li>Languages become necessary when coordination is required</li>
					<ul>
						<li><em>Human language</em> is a result of improving ecological fitness</li>
						<li><em>Human written language</em> is a result of new organizational challenges</li>
					</ul>
					<li>Same problems/approaches/answers like other language problems</li>
					<ul>
						<li><em>Domain-only:</em> Domains figure out their problems and their languages</li>
						<li><em>Universal:</em> Find the <em>universal grammar</em> and use it everywhere</li>
						<li><em>Hybrid:</em> Establish principles and patterns but avoid Ã¼berformats</li>
					</ul>
				</ul>
			</slide>
			<slide id="who-is-talking">
				<title>APIs: Who's Talking?</title>
				<ul>
					<li>Languages both establish and cross domain boundaries</li>
					<li>System/ecosystem boundaries are blurry</li>
					<ul>
						<li>System/ecosystem perspective is a question of perspective</li>
					</ul>
					<li>APIs provide a foundation for communications in an ecosystem</li>
					<ul>
						<li><em>Internal:</em> Value is in system changeability</li>
						<li><em>External:</em> Value is in system interoperability</li>
					</ul>
					<li>API discussions should always be aware of both perspectives</li>
					<ul>
						<li>Separate internal/external API strategies are counter-productive</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-pattern">
				<title>The API Pattern</title>
				<div style="height: 70%">
					<img style="float: left; object-fit : contain ; margin : 0% 4% 0% 4% ; height: 100% ; " title="Uniform interface" src="pneumatic-tubes.jpg" href="https://twitter.com/NotableHistory/status/529966375125544960"/>
					<img style="float: right; object-fit : contain ; margin : 0% 4% 0% 4% ; height: 100% ; " title="Self-describing representations and stateless interactions" src="nj-gun-permit.png"/>
				</div>
			</slide>
		</part>
		<part id="api-aspects">
			<title>APIs: 3 Drivers, 2 Perspectives, 1 Lifecycle</title>
			<slide id="api-driver-push">
				<title>API Driver #1: Push</title>
				<ul>
					<li>Many environments change at increasing velocities</li>
					<ul>
						<li>Economics change</li>
						<li>Incentives change</li>
						<li>Technologies change</li>
					</ul>
					<li>Organizations are <em>pushed</em> to better handle change</li>
					<ul>
						<li>They have to become better at <em>reacting to external changes</em></li>
						<li>They have to become better at <em>executing internal changes</em></li>
						<li>They have to become better at <em>embracing changing</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-driver-pull">
				<title>API Driver #2: Pull</title>
				<ul>
					<li>External: Participating in the <em>API economy</em> becomes increasingly beneficial</li>
					<ul>
						<li>Interfacing with customers/partners becomes easier</li>
						<li>The number of API-ready customers/partners keeps increasing</li>
						<li>The <a href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</a> guarantees for the trend to continue</li>
					</ul>
					<li>Internal: Being able to plan and execute changing quickly improves fitness</li>
					<ul>
						<li>Traditionally, IT is perceived as sluggish and heavyweight</li>
						<li>Increasingly, IT becomes the <q>lube</q> for the organizational machinery</li>
						<li>Additionally, IT can allow completely new classes of business models</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-driver-follow">
				<title>API Driver #3: Follow</title>
				<ul>
					<li>Having an <em>API strategy</em> becomes increasingly important</li>
					<ul>
						<li>Organizations have executed on this for a long time (Amazon API memo: 2002)</li>
						<li>Organizations share experiences and tooling around API strategies</li>
					</ul>
					<li>Using APIs becomes less of an <q>if</q> and more of a <q>how</q></li>
					<ul>
						<li>Business pushes IT to make sure strategy can be executed quickly</li>
						<li>IT can leverage others as justification and leaders</li>
					</ul>
				</ul>
			</slide>
			<slide id="two-views">
				<title>Two Views of API Scope/Focus</title>
				<ul>
					<li><em>Internal:</em> Using APIs to break up monolithic systems</li>
					<ul>
						<li>Focus on <em>systems/software engineering</em> and better modularization</li>
						<li><q>Turn a system into an ecosystem.</q></li>
						<li>Use <em>Private APIs</em> as a way to reduce tight coupling</li>
					</ul>
					<li><em>External:</em> Using APIs to build up ecosystems</li>
					<ul>
						<li>Focus on <em>distributed/decentralized systems</em> and better connectivity</li>
						<li><q>Enable an ecosystem by loosely coupling systems.</q></li>
						<li>Use <em>Public APIs</em> as a way to (better) interface with partners/public</li>
					</ul>
					<li>Both views are complementary and mostly a difference in perspective</li>
				</ul>
			</slide>
			<slide id="one-management-cycle">
				<title>One Management Lifecycle</title>
				<img title="API Lifecycle" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" class="fullsize"/>
			</slide>
		</part>
	</presentation>
	<presentation id="caching">
		<title>Caching</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://webconcepts.info/specs/IETF/RFC/7234" title='RFC 7234: "Hypertext Transfer Protocol (HTTP/1.1): Caching", June 2014'>RFC 7234</a>&#160;Â· <a href="https://www.mnot.net/cache_docs/" title='Mark Nottingham: Caching Tutorial'>Caching Tutorial</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="caching-overview">
			<title>Overview</title>
			<slide id="caching-online">
				<title>Caching for Online Scenarios</title>
			</slide>
			<slide id="caching-offline">
				<title>Caching for Offline Scenarios</title>
			</slide>
		</part>
		<part id="caching-locations">
			<title>Caching Locations</title>
			<slide id="proxy-cache">
				<title>Proxy Cache</title>
			</slide>
			<slide id="cache-client">
				<title>Client Cache</title>
			</slide>
			<slide id="cache-reverse-proxy">
				<title>Reverse Proxy Cache</title>
			</slide>
		</part>
		<part id="caching-http">
			<title>Caching in HTTP</title>
			<part id="cache-directives">
				<title>HTTP Cache Directives</title>
				<slide id="cache-directives-registry">
					<title>HTTP Cache Directives Registry</title>
				</slide>
				<slide id="http-immutable">
					<title>HTTP Immutable Responses</title>
					<ul>
						<li>Some resources never change by design</li>
						<li><a href="http://webconcepts.info/specs/IETF/RFC/8246">RFC 8246</a> defines the <code href="http://webconcepts.info/concepts/http-cache-directive/immutable">immutable</code> cache directive</li>
					</ul>
				</slide>
			</part>
		</part>
		<part id="resource-lifetime">
			<title>Managing Resource Lifetimes</title>
			<slide id="lifetime-intro">
				<title>Few Resources Live Forever</title>
			</slide>
			<slide id="caching-sunset">
				<title>Caching and Resource Lifetimes</title>
				<ul>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/8594" title='Erik Wilde, "The Sunset HTTP Header Field", RFC 8594, May 2019'>HTTP <code>Sunset</code> header field</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="change-management">
		<title short="Change Management">Change Management and Versioning</title>
		<toc class="abstract">APIs change, and in particular in faster-changing environments, such as those based on microservices architecture, change is happening frequently. Managing change is essential because any API change that is a breaking change, i.e. it requires consumers to adjust, creates ripple effects through the API landscape. Every API style has ways how APIs can be designed to prevent breaking changes, but it is necessary to incorporate this into API design as part of the overall design culture. Communicating breaking changes can be done in a variety of ways, and ideally represents the relationship between the two versions in a machine-readable way.</toc>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a>&#160;Â· <a href="https://tools.ietf.org/html/rfc6648" title="RFC 6648: 'Deprecating the &quot;X-&quot; Prefix and Similar Constructs in Application Protocols', June 2012">RFC 6648</a>&#160;Â· <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title='Erik Wilde, "Patterns for Robust Extensibility", April 2016'>Robust Extensibility</a>&#160;Â· <a href="https://tools.ietf.org/html/draft-wilde-registries" title='Erik Wilde, "The Use of Registries", Internet Draft wilde-registries'>Registries</a>&#160;Â· <a href="https://medium.com/good-api/api-change-management-2fe5bba32e9b" title='Zdenek Nemec, "API Change Management", April 2017'>Change Management</a>&#160;Â· <a href="http://semver.org/" title='Semantic Versioning 2.0.0'>Semantic Versioning</a>&#160;Â· <a href="http://goodapi.co/insights/deprecation-and-sunsetting" title='Erik Wilde, "Managing API Deprecation and Sunsetting", Good API Insight 2019-001, July 2019'>API Deprecation/Sunset</a>&#160;Â· <a href="https://www.mnot.net/blog/2012/06/25/http_api_complexity_model" title='Mark Nottingham, "HTTP API Complexity", June 2012'>API Complexity</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="change-management-introduction">
			<title>Introduction</title>
			<slide id="versioning-tweet-fielding">
				<title>Versioning Breaks Things</title>
				<img title='Roy Fielding (@fielding): &apos;The reason to make a real REST API is to get evolvability â¦ a &quot;v1&quot; is a middle finger to your API customers, indicating RPC/HTTP (not REST)&apos;' href="https://twitter.com/fielding/status/376835835670167552" src="versioning-tweet-fielding.png" class="fullsize"/>
			</slide>
			<slide id="versioning-software">
				<title>Versioning in Software Engineering</title>
				<ul>
					<li>Version numbers have an almost mythical role in IT</li>
					<ul>
						<li>Numbers are used to keep track of <em>any changes</em> in a software product</li>
						<li>Major numbers often are used to signal major functional upgrades</li>
					</ul>
					<li>APIs are about encapsulating implementation details</li>
					<ul>
						<li>API versioning only matters <em>when the API changes</em></li>
						<li>API versioning should <em>hide implementation changes</em></li>
					</ul>
					<li>Separating API and implementation is a good idea</li>
					<ul>
						<li>The <em>API version</em> is the version <em>of the implemented API</em></li>
						<li>The <em>software version</em> is the version <em>of the contract implementation</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Planning for evolution means to reduce pain in the future</li>
					<ul>
						<li>No immediate benefits other than <q>doing the right thing</q></li>
						<li>Modest effort when part of the API design process and culture</li>
					</ul>
					<li>Extensibility should be part of the <em>API design culture</em></li>
					<ul>
						<li>Each API must have a documented plan for API evolution</li>
						<li>The simplest possible plan may be to never change the API</li>
					</ul>
					<li>Extensibility should be made easy for <em>API consumers</em></li>
					<ul>
						<li>Provide test cases that simulate correct/incorrect API extensions</li>
						<li>Provide feature flags so that services can enter <q>test mode</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="compatibility">
				<title>Compatibility</title>
				<ul>
					<li>Compatibility comes in two basic flavors (one easier, one harder)</li>
					<ul>
						<li><em>Backwards compatibility:</em> Ability to interact with older components</li>
						<li><em>Forward compatibility:</em> Ability to interact with newer components</li>
					</ul>
					<li>The Web supports both compatibility types</li>
					<ul>
						<li><em>Backwards compatibility:</em> New browser accessing older content</li>
						<li><em>Forward compatibility:</em> Old browser accessing newer content</li>
					</ul>
					<li>API compatibility depends on API scenarios</li>
					<ul>
						<li>Who controls API providers and API consumers?</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-complexity">
			<title>API Complexity</title>
			<slide id="one-server-one-client">
				<title>One Server and One Client</title>
				<ul>
					<li>Tight coupling between server and client teams possible</li>
					<ul>
						<li>Updates in the API can be negotiated and addressed</li>
					</ul>
					<li>Updates in the <em>deployed clients</em> can still pose a challenge</li>
					<ul>
						<li>Easier when deployment is through <em>code on demand</em> (Web clients)</li>
						<li>Harder when deployment is through <em>installed code</em> (non-Web clients)</li>
					</ul>
					<li>Openness and extensibility are not an explicit goal</li>
					<ul>
						<li>The only exception are version issues across the installed base</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-server-many-clients">
				<title>One Server and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams helpful</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
					</ul>
					<li>Updates in the <em>existing clients</em> can take a long time</li>
					<ul>
						<li>No control over installed client base other than hard API stops</li>
					</ul>
					<li>Openness and extensibility are getting more interesting</li>
					<ul>
						<li>Openness is necessary so that the API can evolve without breaking clients</li>
						<li>Extensibility is less of a concern because there is only one server</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-servers-many-clients">
				<title>Many Servers and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams essential</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
						<li>Clients may experience a spectrum of server implementations</li>
					</ul>
					<li>Variety in the <em>service landscape</em> needs clients to be robust</li>
					<ul>
						<li>Services can implement variations of the original API</li>
						<li>Balancing consistency and flexibility is the main design challenge</li>
					</ul>
					<li>Openness and extensibility are essential components</li>
					<ul>
						<li>Openness is necessary so that services can use the API robustly</li>
						<li>Extensibility is necessary to that the landscape can evolve robustly</li>
						<li>The landscape is a graph of variations of the basic API</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="robust-extensibility">
			<title>Robust Extensibility</title>
			<slide id="core-semantics">
				<title>Meaningful Core Semantics</title>
				<ul>
					<li>The core of the API allows clients to have meaningful interactions</li>
					<ul>
						<li>The starting point of an API should be meaningful and complete</li>
					</ul>
					<li>The core of the API is robust over time</li>
					<ul>
						<li>Anything that is added to the core does not change the core semantics</li>
					</ul>
					<li>Anything that is not part of the core can be safely ignored</li>
					<ul>
						<li><code>mustIgnore</code> semantics allow safe interactions beyond closely coordinated groups</li>
					</ul>
				</ul>
			</slide>
			<slide id="extension-points">
				<title>Well-Defined Extension Points</title>
				<ul>
					<li>APIs should be clear about where extensions are allowed</li>
					<ul>
						<li>API metamodels often decide where (potential) extension points are</li>
						<li>API schemas/definitions should further narrow down where extensions are allowed</li>
					</ul>
					<li>API tests can make sure that the extension points are properly implemented</li>
					<ul>
						<li>Extensions in allowed places are ignored and tests should succeed</li>
						<li>Extensions in other places should raise errors about malformed content</li>
					</ul>
					<li>Extension points are interesting to support in generic software</li>
					<ul>
						<li>Monitoring can report which and where extensions are being used</li>
						<li>Libraries/SDKs can make it easy to create/parse extension data</li>
					</ul>
				</ul>
			</slide>
			<slide id="processing-model">
				<title>Well-Defined Processing Model</title>
				<ul>
					<li>Extensions are well-defined and their handling is well-defined as well</li>
					<ul>
						<li><link href="extension-points">Extension points</link> make it clear where to expect extensions</li>
						<li><em>Processing models</em> make it clear what to do with extensions</li>
					</ul>
					<li><code>mustIgnore</code> is a popular and good choice for extension processing</li>
					<ul>
						<li>Some formats allow extensions to declare their processing model (such as <code>mustUnderstand</code>)</li>
						<li>HTML has a rule of ignoring unknown elements but processing their content</li>
					</ul>
					<li>How to <em>learn</em> about extensions is a different matter</li>
					<ul>
						<li>If an API evolves along a single path it may be as simple as looking along that path</li>
						<li>If an API is used <a href="https://tools.ietf.org/html/draft-wilde-registries">in more complex ways</a> a registry may be a way to find extensions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="extensibility-examples">
			<title>Extensibility Examples</title>
			<slide id="extensibility-content">
				<title>Extensibility of Content</title>
				<ul>
					<li>Extending content can be done by <em>additive</em> changes to the content</li>
					<ul>
						<li><em>Adding properties</em> to the existing content model</li>
						<li><em>Limiting properties</em> to a more constraining appearance/value model</li>
					</ul>
					<li>Extension can never change the semantics of existing content</li>
					<ul>
						<li><em>Ignoring</em> extensions always must be a safe thing to do</li>
						<li><em>Dependencies across extensions</em> should be avoided if possible</li>
					</ul>
					<li>Specifying <em>extension points</em> depends on the representation format</li>
				</ul>
			</slide>
			<slide id="extensible-content-xml">
				<title>XML Content Extension</title>
				<listing src="address.xml"/>
				<listing src="address-extended.xml"/>
			</slide>
			<slide id="extensible-content-xsd">
				<title>XML Content Extension: XSD Schema</title>
				<listing src="address.xsd"/>
			</slide>
			<slide id="extensible-content-json">
				<title>JSON Content Extension</title>
				<listing src="address.json"/>
				<listing src="address-extended.json"/>
			</slide>
			<slide id="extensibility-control">
				<title>Extensibility of Controls</title>
				<ul>
					<li>Controls expose new paths of the workflow available to clients</li>
					<ul>
						<li>New paths should not have any impact on existing paths</li>
						<li>Existing clients should ignore those paths</li>
					</ul>
					<li>Hypermedia formats should be based on controls being an open set</li>
					<ul>
						<li>Specifics on how to add and handle extensions depend on the format</li>
					</ul>
				</ul>
			</slide>
			<slide id="hal-extension">
				<title>Extending Controls in HAL</title>
				<listing src="hal.json" href="http://stateless.co/hal_specification.html" line="30-37"/>
				<listing src="hal-extended.json"/>
			</slide>
		</part>
		<part id="versioning-strategies">
			<title>Versioning Strategies</title>
			<slide id="semantic-versioning">
				<title><a href="http://semver.org/">Semantic Versioning</a></title>
				<ul>
					<li><a href="http://semver.org/">Semantic Versioning</a> standardizes the meaning of version numbers</li>
					<li>Version numbers use <code>MAJOR.MINOR.PATCH</code> syntax and have well-defined semantics</li>
					<ul>
						<li>Increase <code>MAJOR</code> version for breaking API changes</li>
						<li>Increase <code>MINOR</code> version for adding functionality in a forward-compatible manner</li>
						<li>Increase <code>PATCH</code> version for making forward-compatible bug fixes</li>
					</ul>
					<li><code>MAJOR</code> is a different API, <code>PATCH</code> is an implementation detail</li>
					<ul>
						<li>Exposing detailed version/patch information is a potential security risk</li>
						<li>For well-designed APIs only <code>MINOR</code> may make sense to expose</li>
					</ul>
				</ul>
			</slide>
			<slide id="semantic-versioning-example">
				<title>Semantic Versioning Example</title>
				<img src="semantic-versioning.png" class="fullsize"/>
			</slide>
			<slide id="implementation-api-version">
				<title>Implementation vs. API Version</title>
				<ul>
					<li><em>Implementation versions</em> may be internal information only</li>
					<ul>
						<li>Implementation details do not have to show up in the API</li>
						<li>For internal/trusted/open cases implementation and API may be the same version</li>
					</ul>
					<li><em>API versions</em> are about changes that may affect consumers</li>
					<ul>
						<li><code>PATCH</code> does not change API design or behavior</li>
						<li><code>MINOR</code> changes API behavior in a safe way</li>
						<li><code>MAJOR</code> changes API behavior in ways that require client changes</li>
					</ul>
					<li><code>PATCH</code>/<code>MINOR</code> may make sense to expose inside the API</li>
					<li><code>MAJOR</code> means that there is a <em>different API</em> for the <em>same service</em></li>
				</ul>
			</slide>
			<slide id="version-identification">
				<title>Identifying API Versions</title>
				<ul>
					<li>Versioning may be necessary when the extension model is not working anymore</li>
					<li>Three main ways how to distinguish between versions at the API level</li>
					<ul>
						<li>Make version numbers part of the resource URI: <code>http://example.org/api/v2/</code></li>
						<li>Use specific HTTP headers: <code>API-Version: 2.0.0</code></li>
						<li>Use media types: <code>Accept: application/vnd.example.org.v2+json</code></li>
					</ul>
					<li>All of these have side-effects which have to be balanced</li>
					<ul>
						<li>New URIs change resource identity which may result in data integration problems</li>
						<li>Custom headers are specific for a service and hard to use in the general Web fabric</li>
						<li>Media types often are not properly supported by APIs or the clients consuming them</li>
					</ul>
					<li>Most APIs choose URI-based versioning and introduce new <q>API identity</q></li>
					<ul>
						<li>Versioning at this level is little more than <q>keeping the API brand</q></li>
						<li>Version numbers can be used <em>anywhere</em> in the URI path</li>
					</ul>
				</ul>
			</slide>
			<slide id="linking-versions">
				<title>Linking Versions</title>
				<ul>
					<li>Communicating versions via links works better than naming schemes</li>
					<ul>
						<li>APIs remain self-contained as long as consumers are working with one version</li>
						<li>APIs are brought into context when consumers want versioning information</li>
					</ul>
					<li><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a> defines link relations for <q>simple version navigation</q></li>
					<ul>
						<li><code>successor-version</code> links to the newer version of the API</li>
						<li><code>latest-version</code> links to the newest version of the API</li>
						<li><code>predecessor-version</code> links to the older version of the API</li>
						<li><code>version-history</code> links to a resource about the version history</li>
					</ul>
					<li>Plays well with <em>home documents</em> and their role for an API</li>
					<ul>
						<li>APIs share home documents or at least version histories across versions</li>
						<li>Versioning links are used to allow navigation across all API versions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="lifecycle-management">
			<title>API Lifecycle Management</title>
			<slide id="lifecycle">
				<title>Managing API Change</title>
				<ul>
					<li><a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Robust extensibility</a> helps to facilitate non-breaking API changes</li>
					<li><link href="hypermedia"/> helps as a pattern to move extensibility beyond data models</li>
					<li><a href="http://semver.org/">Semantic versioning</a> can be used to keep track of API changes</li>
					<li><a href="https://goodapi.co/insights/deprecation-and-sunsetting">HTTP <code>Deprecation</code></a> can be used to <a href="http://webconcepts.info/concepts/http-header/Deprecation">declare APIs as deprecated</a></li>
					<li><a href="https://goodapi.co/insights/deprecation-and-sunsetting">HTTP <code>Sunset</code></a> can be used to <a href="http://webconcepts.info/concepts/http-header/Sunset">signal upcoming sunsets</a></li>
				</ul>
			</slide>
			<slide id="http-deprecation">
				<title>Signaling API Deprecation</title>
				<ul>
					<li>Services must document/describe their support of API deprecation</li>
					<li>Services may signal <code>Deprecation</code> any way they like</li>
					<li>Services may implement <code>Deprecation</code> any way they like</li>
					<li>The simplest option may be <em><code>Deprecation</code> policies</em> on a gateway</li>
				</ul>
			</slide>
			<slide id="http-sunset">
				<title>Signaling API End-of-Life</title>
				<ul>
					<li>Services must document/describe their support of API sunsetting</li>
					<li>Services may signal <code>Sunset</code> any way they like</li>
					<li>Services may implement <code>Sunset</code> any way they like</li>
					<li>The simplest option may be <em><code>Sunset</code> policies</em> on a gateway</li>
				</ul>
			</slide>
		</part>
		<part id="change-management-conclusions">
			<title>Conclusions</title>
			<slide id="plan-for-evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Evolvable APIs do not just happen</li>
					<li>Think about cost and economics for versioning</li>
					<li>Separate API version and implementation version</li>
					<li>Make evolution/versioning/deprecation part of API culture</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="description">
		<title>Description</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="https://github.com/OAI/OpenAPI-Specification" title="OpenAPI Specification Repository">OpenAPI</a>&#160;Â· <a href="http://openapi-map.apihandyman.io/?version=3.0" title="Interactive OpenAPI Map by Arnaud Lauret">OpenAPI Map</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="openapi">
			<title>OpenAPI (formerly known as Swagger)</title>
			<slide id="openapi-basics">
				<title>OpenAPI Basics</title>
				<img src="openapi-logo.png" href="https://www.openapis.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Swagger started as an easy way to generate code from an API description</li>
					<ul>
						<li><em>Server code</em> is generated by generating stubs for all specified URI paths</li>
						<li><em>Client code</em> generates SDKs for clients by wrapping API interactions</li>
					</ul>
					<li><em>Swagger</em> was renamed to <em>OpenAPI</em> at the beginning of 2016</li>
					<ul>
						<li>Swagger still exists <a href="https://smartbear.com/">as a product suite</a> offered by <a href="https://swaggerhub.com/">SmartBear</a></li>
						<li><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md">OpenAPI 3.0</a> is the first standalone OpenAPI version and was <a href="https://www.openapis.org/blog/2017/07/26/the-oai-announces-the-openapi-specification-3-0-0">released in July 2017</a></li>
					</ul>
					<li>OpenAPI is focused on <link href="resource-style"/> APIs by modeling APIs as sets of URI paths</li>
					<ul>
						<li>Paths can be templated and have operations and optionally parameters</li>
						<li>JSON support is built into OpenAPI for request/response schemas</li>
						<li>XML support is present but rather weak in terms of XML sophistication</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-yaml">
				<title>JSON and YAML</title>
				<ul>
					<li>JSON is the de-facto standard for structured data on the Web</li>
					<li>JSON is human-readable but visibly comes from a code background</li>
					<li><a href="http://yaml.org/" title="YAML Ain't Markup Language">YAML</a> evolved as a human-readable format for configuration data</li>
					<ul>
						<li>JSON data can be written in YAML for a more human-friendly syntax</li>
						<li>YAML has many additional features that JSON does not support</li>
					</ul>
					<li>OpenAPI is defined in JSON and allows JSON and YAML representations</li>
				</ul>
			</slide>
			<slide id="openapi-info-json">
				<title>OpenAPI Info Object (JSON)</title>
				<listing src="openapi-info.json" href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#infoObject"/>
			</slide>
			<slide id="openapi-info-yaml">
				<title>OpenAPI Info Object (YAML)</title>
				<listing src="openapi-info.yaml" href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#infoObject"/>
			</slide>
			<slide id="minimal-openapi-example">
				<title>Minimal OpenAPI Example</title>
				<ul>
					<li>Identification of the Swagger/OpenAPI version</li>
					<li>Minimal metadata about the described API</li>
					<li>URIs that are made available by the API</li>
					<li>Operations that can be performed on these URIs</li>
					<li>Responses to expect from these operations</li>
				</ul>
			</slide>
			<slide id="swagger-weather-json">
				<title>Minimal Swagger Example (JSON)</title>
				<listing src="swagger-weather.json"/>
			</slide>
			<slide id="swagger-weather-yaml">
				<title>Minimal Swagger Example (YAML)</title>
				<listing src="swagger-weather.yaml"/>
			</slide>
			<slide id="openapi-weather-json">
				<title>Minimal OpenAPI Example (JSON)</title>
				<listing src="openapi-weather.json"/>
			</slide>
			<slide id="openapi-weather-yaml">
				<title>Minimal OpenAPI Example (YAML)</title>
				<listing src="openapi-weather.yaml"/>
			</slide>
			<slide id="openapi-query-parameter">
				<title>Paths with Query Parameters</title>
				<ul>
					<li>URIs with Query Parameters: <code>/pets?limit=42</code></li>
				</ul>
				<listing src="petstore.yaml" line="10-23"/>
			</slide>
			<slide id="openapi-path-parameter">
				<title>Paths with Path Parameters</title>
				<ul>
					<li>URIs with Path Parameters: <code>/pets/somepetname</code></li>
				</ul>
				<listing src="petstore.yaml" line="56-68"/>
			</slide>
			<slide id="openapi-editor">
				<title>OpenAPI/Swagger Editor</title>
				<img title='Web-based interactive OpenAPI/Swagger editor' href="https://editor.swagger.io/" src="swagger-editor-petstore.png" class="fullsize"/>
			</slide>
			<slide id="openapi-map">
				<title>OpenAPI: The Complete Picture</title>
				<img title='OpenAPI Map by Arnau Lauret' href="http://openapi-map.apihandyman.io/?version=3.0" src="openapi-map.png" class="fullsize"/>
			</slide>
			<slide id="openapi-summary">
				<title>Describing Resource Style APIs</title>
				<ul>
					<li>OpenAPI describes APIs by listing all resource paths</li>
					<li>OpenAPI is often used to generate server/client code</li>
					<li>OpenAPI creates a static and tightly coupled API landscape</li>
					<li>Evolving OpenAPI APIs is not a core part of OpenAPI's mission</li>
				</ul>
			</slide>
		</part>
		<part id="graphql">
			<title>GraphQL</title>
		</part>
		<part id="asyncapi">
			<title>AsyncAPI</title>
		</part>
		<part id="soap">
			<title>SOAP</title>
		</part>
	</presentation>
	<presentation id="design">
		<title>Design</title>
		<toc class="abstract">APIs play a crucial role in modern IT architecture because they delineate and define the boundaries of IT capabilities. Producers and consumers of APIs interact using the API itself as a language for communications. Designing this language makes a big difference in how easy it is for consumers to use the API, and thus can make a big difference in API discovery, understanding, adoption, and productivity. Additional challenges in the API space are caused by the fact that API producers and consumers are not necessarily synchronized in their development cycles, meaning that API designs should take into account that both producers and consumers can evolve independently, and should try to minimize potential disruption because of incompatibilities.</toc>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2016/10/api-usability-matters.html" title='Erik Wilde, "API Usability Matters: UX and CX is like DX and â¦", October 2016'>API Usability</a>&#160;Â· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a>&#160;Â· <a href="http://webconcepts.info/">Web Concepts</a>&#160;Â· <a href="https://www.mnot.net/blog/2012/06/25/http_api_complexity_model" title='Mark Nottingham, "HTTP API Complexity", June 2012'>API Complexity</a>&#160;Â· <a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="design-process">
			<title>Design as a Process</title>
			<slide id="design-eames">
				<title>Design and Constraints</title>
				<blockquote><q href="http://www.markwunsch.com/eames">Design depends largely on constraints.</q> (<a href="https://en.wikipedia.org/wiki/Charles_and_Ray_Eames">Charles Eames</a>)</blockquote>
			</slide>
			<slide id="design-questions">
				<title>Design Questions</title>
				<ul>
					<li>Design is an iterative process to solve a given problem</li>
					<ol>
						<li>Identify a <em>problem</em> (provided externally or identified internally)</li>
						<li><em>Why</em> is the problem a problem?</li>
						<li>Identify the <em>constraints</em></li>
						<li><em>What</em> can be done to address the problem?</li>
						<li>Identify the possible solutions</li>
						<li><em>How</em> is the problem solved given the constraints?</li>
						<li>Assess design quality and repeat	</li>
					</ol>
				</ul>
			</slide>
			<slide id="api-lifecycle-design">
				<title>API Lifecycle and Design</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" class="fullsize"/>
			</slide>
		</part>
		<part id="api-complexity">
			<title>API Complexity</title>
			<slide id="one-server-one-client">
				<title>One Server and One Client</title>
				<ul>
					<li>Tight coupling between server and client teams possible</li>
					<ul>
						<li>Updates in the API can be negotiated and addressed</li>
					</ul>
					<li>Updates in the <em>deployed clients</em> can still pose a challenge</li>
					<ul>
						<li>Easier when deployment is through <em>code on demand</em> (Web clients)</li>
						<li>Harder when deployment is through <em>installed code</em> (non-Web clients)</li>
					</ul>
					<li>Openness and extensibility are not an explicit goal</li>
					<ul>
						<li>The only exception are version issues across the installed base</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-server-many-clients">
				<title>One Server and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams helpful</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
					</ul>
					<li>Updates in the <em>existing clients</em> can take a long time</li>
					<ul>
						<li>No control over installed client base other than hard API stops</li>
					</ul>
					<li>Openness and extensibility are getting more interesting</li>
					<ul>
						<li>Openness is necessary so that the API can evolve without breaking clients</li>
						<li>Extensibility is less of a concern because there is only one server</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-servers-many-clients">
				<title>Many Servers and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams essential</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
						<li>Clients may experience a spectrum of server implementations</li>
					</ul>
					<li>Variety in the <em>service landscape</em> needs clients to be robust</li>
					<ul>
						<li>Services can implement variations of the original API</li>
						<li>Balancing consistency and flexibility is the main design challenge</li>
					</ul>
					<li>Openness and extensibility are essential components</li>
					<ul>
						<li>Openness is necessary so that services can use the API robustly</li>
						<li>Extensibility is necessary to that the landscape can evolve robustly</li>
						<li>The landscape is a graph of variations of the basic API</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="messages-models">
			<title>Messages vs. Models</title>
			<slide id="api-language">
				<title>APIs are Languages</title>
				<ul>
					<li>Interfaces should hide domain complexity (<em>encapsulation</em>)</li>
					<ul>
						<li>Expose <em>as little as possible</em> of the domain complexity</li>
						<li>Resist the temptation to <em>expose your domain model</em></li>
					</ul>
					<li>Interfaces are languages for communication</li>
					<ul>
						<li>They establish a language between API provider and consumer</li>
						<li>Keeping the language simple keeps the API usable</li>
					</ul>
					<li><q>Model Creep</q> is an obstacle for API adoption</li>
					<ul>
						<li>There is no <q>one true model</q> for any domain</li>
						<li>Keeping the language simple minimizes conflict potential</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-messages">
				<title>APIs and Messages</title>
				<ul>
					<li>Messages are the sentences in API communications</li>
					<ul>
						<li>They transport meaning between collaborating peers</li>
						<li>They are independent of how peers implement their activities</li>
					</ul>
					<li>Messages can follow patterns that make APIs easier to use</li>
					<ul>
						<li><link href="styles">API styles</link> are focusing on specific communication styles</li>
						<li><em>Metamodels</em> help to provide structure (plain text, binary, XML, JSON, RDF, â¦)</li>
						<li><em>API models</em> add message models (SOAP, HAL, GraphQL, â¦)</li>
						<li><em>Vocabularies</em> help to describe specific APIs</li>
					</ul>
					<li>The usual balancing act of familiarity and avoiding <a href="https://en.wikipedia.org/wiki/Law_of_the_instrument">Maslow's hammer</a></li>
				</ul>
			</slide>
			<slide id="messaging-start">
				<title>Make Messaging the Start</title>
				<ul>
					<li>Make sure to identify relevant resources so that you can refer to them</li>
					<ul>
						<li>Resource refers to <em>anything</em> that <q>is worth exchanging messages about</q></li>
						<li>Unique and stable identity helps when assigning resource identifiers</li>
					</ul>
					<li>Any service resource must have a <em>representation</em> in messages</li>
					<ul>
						<li>Your <em>data model</em> is not your <em>object model</em></li>
						<li>Your <em>object model</em> is not your <em>resource model</em></li>
						<li>Your <em>resource model</em> is not your <em>message model</em></li>
					</ul>
					<li>Design <q>interaction forms</q> to be as succinct as possible</li>
				</ul>
			</slide>
		</part>
		<part id="api-scope">
			<title>API Scope</title>
			<slide id="api-tool">
				<title>APIs as Tools</title>
				<ul>
					<li>APIs exist to solve specific problems</li>
					<ul>
						<li>Think about the problem and not the solution</li>
						<li>Design a <em>capability</em> that hides solution details</li>
					</ul>
					<li>Collaborate with consumers and gather their feedback</li>
					<ul>
						<li><q>API first</q> is all about driving solutions from the API</li>
						<li>Use approaches the make incremental design easy</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-maslow">
				<title>Tools and Problems</title>
				<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" class="fullsize"/>
			</slide>
			<slide id="api-design-simple">
				<title>KISS API Design</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<li>There is no single correct path to well-designed APIs</li>
					<ul>
						<li>What is the capability that the API is exposing?</li>
						<li>What are the assumptions about API consumers?</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api">
				<title>Microservice APIs</title>
				<ul>
					<li>A bigger landscape of APIs</li>
					<li>A more diverse landscape of APIs</li>
					<li>A landscape of faster evolving APIs</li>
				</ul>
			</slide>
		</part>
		<part id="design-dx">
			<title>Developer Experience (DX)</title>
			<slide id="design-thinking">
				<title>Design Thinking</title>
				<ul>
					<li>Design is driven by creating products/solutions</li>
					<ul>
						<li>How well does the product address a given problem?</li>
						<li>How easy is the designed product to use?</li>
					</ul>
					<li>APIs often are <em>part of a bigger picture</em></li>
					<ul>
						<li>Developers have to use APIs to <em>design their applications</em></li>
						<li>How easy is it for them to use APIs as <em>part of their solution</em>?</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-integration">
				<title>Client-Side API Integration</title>
				<img title="Client-Side API Integration" src="apis-application-layers-integration.png" class="fullsize"/>
			</slide>
			<slide id="experience-api">
				<title>Experience API</title>
				<img title="Experience API" src="apis-application-layers-experience.png" class="fullsize"/>
			</slide>
			<slide id="design-coherence">
				<title>Design Coherence</title>
				<ul>
					<li>Establish a <em>culture of API design</em></li>
					<ul>
						<li><q>This is how APIs are usually looking</q></li>
						<li>Here are some tools to help with design and documentation</li>
						<li>Here is a breakdown of what the API landscape looks like</li>
					</ul>
					<li>Observing reality helps to document <em>and</em> establish culture</li>
					<ul>
						<li>One way to think of establishing coherence is by writing <em>guidelines</em></li>
						<li>An alternative path is to document and disseminate <em>existing practices</em></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="diversity-decentralization-loose-coupling">
			<title>Diversity, Decentralization, and Loose Coupling</title>
			<slide id="diversity">
				<title>Diversity</title>
				<ul>
					<li>API designs should focus on the <em>API Quality</em></li>
					<ul>
						<li>Standardizing on technologies is no guarantee for quality</li>
					</ul>
					<li>Teams are incentivized to create good APIs</li>
					<ul>
						<li>Feedback from API consumers comes early and often</li>
						<li>Being a good citizen improves the chances to success</li>
						<li>Monitoring quickly reveals patterns of usage and popularity</li>
					</ul>
					<li>Standardize on <em>good practices</em> instead of <em>mandated patterns</em></li>
					<li>Consumers should have a <em>seamless experience</em> across APIs</li>
				</ul>
			</slide>
			<slide id="decentralization">
				<title>Decentralization</title>
				<ul>
					<li>Centralization has become an IT anti-pattern</li>
					<li>APIs should be easily composable by consumers</li>
					<ul>
						<li><em>Robust identity</em> allows resource discovery without out-of-band knowledge</li>
						<li><em>Interlinking</em> exposes control flows in a self-describing way</li>
					</ul>
					<li>Individual services own and document their service APIs</li>
					<li>Cross-service examples and use cases need to respect this autonomy</li>
				</ul>
			</slide>
			<slide id="loose-coupling">
				<title>Loose Coupling</title>
				<ul>
					<li>Apply well-known <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Patterns for Robust Extensibility</a></li>
					<li>Modern service architecture encourages service changes and replacements</li>
					<ul>
						<li>Design for <em>service changes:</em> Non-breaking changes as the goal</li>
						<li>Design for <em>landscape changes:</em> Self-describing interactions allow changing workflows</li>
					</ul>
					<li><link href="hypermedia">Hypermedia</link> is a well-known pattern for service <em>and</em> landscape changes</li>
				</ul>
			</slide>
		</part>
		<part id="design-conclusions">
			<title>Design Conclusions</title>
			<slide id="design-culture">
				<title>Design Culture</title>
				<ul>
					<li>API design matters for making APIs successful</li>
					<li>API design should be established as shared best practices</li>
					<li>Culture is formed by practice and collaboration</li>
					<li>Steer culture with tooling for design and sharing</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="digital-transformation">
		<title>Digital Transformation</title>
		<toc class="abstract"><em>Digital Transformation</em> refers to the process of starting with an organization and organizational processes, and looking at how these can best be supported and expressed through IT means. <em>A first step</em> of digital transformation is to align organizational and IT structures, so that IT changes and improvements are more closely aligned with the organizational side. <em>A second step</em> of digital transformation is to look at IT as an enabler and driver of organizational processes and models that without IT would not be possible. APIs play a central role in digital transformation since they are the way how organizational capabilities are designed, exposed, and utilized in a landscape of digital capabilities.</toc>
		<toc class="resources"><a href="https://blogs.gartner.com/marc-brown/marketings-role-digital-transformation-2019/" title='Marc Brown, "Six Digital Transformation Barriers CMOs Need to Address", Gartner for Marketers, January 2019'>Six Digital Transformation Barriers</a>&#160;Â· <a href="https://www.linkedin.com/pulse/reverse-engineering-organization-gregor-hohpe/" title='Gregor Hohpe, "Reverse Engineering the Organization", May 2018'>Reverse Engineering the Organization</a>&#160;Â· <a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="digital-transformation-introduction">
			<title>Digital Transformation: Why?</title>
			<slide id="why-now">
				<title>APIs! But Why Now?</title>
				<ol>
					<li><em>Push:</em> Not moving becomes an increasingly risky strategy</li>
					<ul>
						<li>Markets move faster than ever before</li>
						<li>Technology-driven changes require readiness on the IT level</li>
					</ul>
					<li><em>Pull:</em> Participating in the API economy is increasingly beneficial (a.k.a. the <em href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</em>)</li>
					<ul>
						<li>Re-imagining organizations becomes a way of being</li>
						<li>Not being API-ready means missing increasingly more opportunities</li>
					</ul>
					<li><em>Follow the Leaders:</em> Moving towards APIs is not difficult anymore</li>
					<ul>
						<li>Examples of organizations allow insights into potential and risk</li>
						<li>The technology landscape is rich enough to get started</li>
					</ul>
				</ol>
			</slide>
			<slide id="castle">
				<title>Traditional IT</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" class="fullsize"/>
			</slide>
			<slide id="bureaucracy">
				<title>Bureaucracy</title>
				<ul>
					<li>Bureaucracy evolved for a reason</li>
					<ul>
						<li>Clearly defined model of <em>input</em> and <em>output</em> of processing units</li>
						<li>Implementation issues of the processing units are <em>hidden</em></li>
						<li><em>Processing units can scale</em> because of encapsulation and statelessness</li>
						<li>Processing steps can be <em>easily pipelined</em> while keeping steps separate</li>
					</ul>
					<li>Well-designed service landscapes have the exact same properties</li>
					<ul>
						<li><em>Messaging models</em> instead of paper forms</li>
						<li>Message models are <em>as shallow as possible</em> (hide implementation model)</li>
						<li><em>Stateless interactions</em> allow for easy load balancing</li>
						<li>Resource identifiers and hypermedia allow <em>seamless workflows</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-economy">
				<title>API Economy</title>
				<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" class="fullsize"/>
			</slide>
			<slide id="digital-transformation-meme">
				<title>Digital Transformation</title>
				<img href="https://upload.wikimedia.org/wikipedia/commons/3/31/Great_white_shark_south_africa.jpg" src="digital-transformation-shark.jpg" class="fullsize"/>
			</slide>
			<slide id="digital-transformation-status">
				<title>Digital Transformation Status</title>
				<img href="https://www.linkedin.com/pulse/reverse-engineering-organization-gregor-hohpe/" src="cio-reporting-line.png" class="fullsize"/>
			</slide>
		</part>
		<part id="what">
			<title>Digital Transformation: What?</title>
			<slide id="digitalization-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Digitalization Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="ms-blind-spots">
				<title>MSA Blind Spot: API Design/Management</title>
				<ul>
					<li>MSA focuses on culture/development/operational aspects</li>
					<ul>
						<li>Isolating services through all phases of the lifecycle</li>
						<li>But of course services still need to interact</li>
					</ul>
					<li>API consistency will help to make the landscape more productive</li>
					<ul>
						<li>Helping <em>API designers</em> to avoid re-inventing the wheel</li>
						<li>Helping <em>API providers</em> to be more usable for consumers</li>
						<li>Helping <em>API consumers</em> to depend on some consistency</li>
						<li>Helping with <em>API discovery</em> and managing the landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="organize-services">
				<title>Organize Services: Operate Smaller Components</title>
				<ul>
					<li>Services talk to each other <em>only</em> through APIs</li>
					<ul>
						<li>Each service runs as a standalone component</li>
						<li>Service dependencies are only through API invocations</li>
					</ul>
					<li>APIs trade flexibility for operational complexity</li>
					<ul>
						<li>Monitoring and debugging are easier in a <em>compile-time linked system</em></li>
						<li>Flexibility and scalability are better in a <em>runtime linked ecosystem</em></li>
					</ul>
					<li>APIs need <em>lifecycle management</em> to reach full potential</li>
					<ul>
						<li><em>Design</em> APIs so that they fit into the ecosystem</li>
						<li><em>Publish</em> APIs so that they can be discovered</li>
						<li><em>Deploy</em> APIs so that they can be used safely/securely</li>
						<li><em>Manage</em> APIs so that the ecosystem can be monitored</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-lifecycle">
				<title>API Lifecycle</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" class="fullsize"/>
			</slide>
		</part>
		<part id="how">
			<title>Digital Transformation: How?</title>
			<slide id="digital-transformation-path">
				<title><a href="http://martinfowler.com/articles/microservices.html">The MSA Path to Digital Transformation</a></title>
				<ol>
					<li>Componentization via services</li>
					<li>Organized around business capabilities</li>
					<li>Products not projects</li>
					<li>Smart endpoints and dumb pipes</li>
					<li>Decentralized governance</li>
					<li>Decentralized data management</li>
					<li>Infrastructure automation</li>
					<li>Design for failure</li>
					<li>Evolutionary design</li>
				</ol>
			</slide>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
						<li>Cost/benefit for microservices is targeted at long term capabilities</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
					<ul>
						<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-focus">
				<title>APIs are Front and Center</title>
				<ul>
					<li>The only visibility into a service is its API</li>
					<li>APIs should avoid letting their <q>implementation shine through</q></li>
					<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
					<ul>
						<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
						<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
					</ul>
					<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
				</ul>
			</slide>
			<slide id="surface">
				<title>Be Superficial</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
				</ul>
			</slide>
		</part>
		<part id="evolution">
			<title>API Evolution</title>
			<slide id="autonomy-robustness">
				<title>Autonomy vs. Robustness</title>
				<ul>
					<li>APIs emphasize independence and autonomy of capabilities</li>
					<ul>
						<li>Allowing teams to design/implement/deploy autonomously increases speed</li>
						<li>With no oversight at all the cost may add up on the consumer side</li>
						<li>Finding a harmonious balance between autonomy and guidelines is key</li>
					</ul>
					<li>There are two critical sides to the evolution part</li>
					<ol>
						<li>When <link href="service-evolution">services change</link>, do consumers need to be aware of the changes?</li>
						<li>When <link href="landscape-evolution">the landscape changes</link>, do consumers need to discover the new services?</li>
					</ol>
				</ul>
			</slide>
			<slide id="service-evolution">
				<title>Design for Service Evolution</title>
				<ul>
					<li>Services are designed with a certain goal and certain options</li>
					<ul>
						<li>The <em>goal</em> is to satisfy the current requirements for a useful service</li>
						<li>The <em>options</em> are based on assumptions on how the service might change</li>
					</ul>
					<li>Service design is a balance between simplicity and flexibility</li>
					<li>Building <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust and extensible services</a> is based on three factors</li>
					<ul>
						<li><em>Meaningful and stable core</em>: The service core must remain stable over time</li>
						<li><em>Extension model</em>: There are well-defined ways how the service core may evolve</li>
						<li><em>Processing model</em>: It is well-defined how clients are processing extensions</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-evolution">
				<title>Design for Landscape Evolution</title>
				<ul>
					<li>Application flow should be guided by discovered controls</li>
					<ul>
						<li>A dynamic service landscape needs a dynamic way of discovering services</li>
						<li><em>Hypermedia</em> is a proven way how controls can be served dynamically</li>
					</ul>
					<li>Hypermedia is a good way for supporting <em>service choreography</em></li>
					<ul>
						<li>Microservice usage may change over time as the landscape evolves</li>
						<li>Choreography exposes ways in which various services are combined to achieve a goal</li>
					</ul>
					<li>If nobody links to some microservices, these will disappear over time</li>
					<ul>
						<li>Usage and linkage combined provide useful analysis data</li>
					</ul>
				</ul>
			</slide>
			<slide id="MSA-v">
				<title>The Three V's of Service Landscapes</title>
				<ul>
					<li>Volume of available services: <link href="landscape-scale">Scale</link></li>
					<ul>
						<li>How big is the service landscape and can I get an overview of what's around?</li>
					</ul>
					<li>Variety of service designs and interfaces: <link href="landscape-diversity">Diversity</link></li>
					<ul>
						<li>As a creator or consumer, how do I deal with different service designs?</li>
					</ul>
					<li>Velocity of service landscape evolution: <link href="landscape-decentralization">Decentralization</link></li>
					<ul>
						<li>As the landscape evolves, how stable are services and their designs?</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-scale">
				<title>Service Landscape Scale</title>
				<ul>
					<li>Different environments have different ideas of MS scale</li>
					<ul>
						<li>Small projects may have a handful of services</li>
						<li>Large MS adopters may have hundreds or thousands of services</li>
					</ul>
					<li>Public APIs and microservice APIs combined mean a bigger API inventory</li>
					<li>Using any form of discovery may not be necessary from the start</li>
					<ul>
						<li>Consider the possibility when starting the MSA effort</li>
						<li>Having a plan helps teams to be aware of the need later on</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-diversity">
				<title>Service Landscape Diversity</title>
				<ul>
					<li>Not all services use the same technical foundations</li>
					<ul>
						<li>Different communications mechanisms</li>
						<li>Different metamodels (XML/JSON/RDF) for data models</li>
						<li>Different models for representing application concepts</li>
						<li>In a Web context, these are concepts such as <a href="http://webconcepts.info/concepts/http-header/">HTTP headers</a>, <a href="http://webconcepts.info/concepts/media-type/">media types</a>, and <a href="http://webconcepts.info/concepts/link-relation/">link relations</a></li>
					</ul>
					<li>Handling diversity can be challenging because of different <q>design universes</q></li>
					<ul>
						<li>Depending on choice, similar concepts/models may be represented differently</li>
						<li>Introducing a generalized abstraction layer is unlikely to be helpful</li>
					</ul>
					<li><link href="ms-description-discovery">Discovering descriptions</link> provides a better overview of the ecosystem</li>
					<ul>
						<li>A reality-based overview of the technology landscape</li>
						<li>A possible starting point or guideline for getting MSA teams started</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-decentralization">
				<title>Service Landscape Decentralization</title>
				<ul>
					<li>Decentralization means no single point of control</li>
					<li>Decentralization means no automatic top-down visibility</li>
					<ul>
						<li><em>API gateways</em> are one way of improving visibility (and control)</li>
						<li><em>Instrumenting the connective fabric</em> is another way out of this</li>
					</ul>
					<li>Complete and uncontrolled decentralization is an ideal</li>
					<ul>
						<li><em>Observe</em> how the MSA landscape develops</li>
						<li><em>Identify pain points</em> from the design and operational point of view</li>
						<li><em>Identify popular patterns</em> so that teams have a starting point</li>
						<li><em>Convincing teams</em> instead of mandatory guidelines</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="digital-transformation-conclusions">
			<title>Conclusions</title>
			<slide id="api-conclusions">
				<title>APIs Matter</title>
				<ul>
					<li>APIs combine essential IT trends of the past decades</li>
					<li>APIs result in service landscapes that can evolve and adapt</li>
					<li>API ecosystems have many tunable knobs and not <em>one correct setting</em> for them</li>
					<li>Transitioning to APIs is a gradual process</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="documentation-dx">
		<title>Documentation and DX</title>
		<toc class="abstract">...</toc>
		<toc class="resources">...</toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="documentation-description">
			<title>Documentation and Description</title>
		</part>
		<part id="extensibility-documentation">
			<title>Extensibility</title>
		</part>
		<part id="lifecycle-documentation">
			<title>Lifecycle Management</title>
		</part>
	</presentation>
	<presentation id="api-first">
		<title>API First</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="https://www.apiscene.io/api-business-models/api-first-the-essence-of-digital-transformation/" title='Erik Wilde, "API First: The Essence of Digital Transformation", API Scene, June 2019'>API First</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="bezos-mandate">
			<title>Jeff Bezos' API Mandate</title>
		</part>
	</presentation>
	<presentation id="foundations">
		<title>Foundations</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a>&#160;Â· <a href="http://dret.typepad.com/dretblog/2016/08/api-maps-hypermedia-api-design.html" title="API Maps: Hypermedia API Design">API Maps</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="ui-api">
			<title>UIs and APIs</title>
			<slide id="distributed-systems">
				<title>Distributed Systems</title>
				<ul>
					<li>Any system that is not one integrated system has <em>components</em></li>
					<ul>
						<li>Components help to <em>separate</em> parts of the system</li>
						<li>Components must be able to <em>cooperate</em> for the system to work</li>
					</ul>
					<li>Distributed systems are always based on some model of component <em>interaction</em></li>
					<ul>
						<li><em>Tight coupling</em> means that it is harder to change or rearrange components</li>
						<li><em>Loose coupling</em> makes it easier for the system to be changed</li>
					</ul>
					<li>Interactions happen at well defined <em>interfaces</em> within the system</li>
				</ul>
			</slide>
			<slide id="interfaces">
				<title>Interfaces</title>
				<ul>
					<li>Interfaces are well-defined ways how components interact</li>
					<li>Interfaces allow <em>decoupling</em> by separating components</li>
					<li>Interfaces allow <em>cooperation</em> by defining <q>contracts</q> for interaction</li>
					<li><em>User Interfaces (UIs)</em> are a way how machines and humans communicate</li>
					<ul>
						<li><em>Command Line Interfaces (CLIs)</em> define text-based interactions through consoles</li>
						<li><em>Graphical User Interfaces (GUIs)</em> are based on visual metaphors and interactions</li>
					</ul>
					<li><em>Application Programming Interfaces (APIs)</em> are a way how machines communicate</li>
				</ul>
			</slide>
			<slide id="interfaces-and-coupling">
				<title>Interfaces and Coupling</title>
				<ul>
					<li>Interfaces allow to separate service production and consumption</li>
					<ul>
						<li><em>Web apps</em> allow users spontaneous access from any Web-enabled client</li>
						<li><em>Native apps</em> only work for supported platforms and after app download</li>
					</ul>
					<li><em>Loose coupling</em> improves scalability and agility</li>
					<ul>
						<li>Producers provide services and interfaces</li>
						<li>Consumers can use services without prior interaction or installation</li>
						<li>Both sides can make changes without the other side having to know</li>
					</ul>
				</ul>
			</slide>
			<slide id="browser-request">
				<title>Browsers speak HTTP</title>
				<ul>
					<li>Browser request Web pages (and required resources) via HTTP requests</li>
					<li>HTTP requests have a <em>request line</em> followed by a number of <em>header fields</em></li>
				</ul>
				<listing src="http-get-request-minimal.txt"/>
				<listing src="http-get-request-chrome.txt"/>
			</slide>
			<slide id="http-response">
				<title>Browsers understand HTTP</title>
				<ul>
					<li>Browser receive Web pages (and required resources) via <em>HTTP responses</em></li>
					<li>HTTP responses have a <em>status line</em> followed by a number of <em>header fields</em></li>
				</ul>
				<listing src="http-get-response.txt"/>
			</slide>
			<slide id="http-response">
				<title>Browsers understand HTML</title>
				<listing src="http-get-response.html"/>
			</slide>
			<slide id="html-layout">
				<title>HTML Structures are Layout Structures</title>
				<ul>
					<li>HTML is designed to help <em>browsers created a formatted page</em></li>
					<ul>
						<li>Formatting is based on elements for paragraphs, lists, tables, â¦</li>
						<li>HTML and browsers are not concerned with content or meaning</li>
					</ul>
					<li>HTML has a rather simple formatting model</li>
					<ul>
						<li>HTML is supposed to represent the fundamental layout structures</li>
						<li>Fine-tuning the layout can be done with <em>Cascading Style Sheets (CSS)</em></li>
					</ul>
					<li><em>HTML+CSS</em> are the foundation for statically formatted Web pages</li>
					<li>Dynamic pages also use <em>DOM+JavaScript</em> for creating a dynamic browser-based GUI</li>
				</ul>
			</slide>
			<slide id="screen-scraping">
				<title>Screen Scraping</title>
				<ul>
					<li>Screen scraping uses GUIs as APIs</li>
					<li>Layout and keywords and markup allow to <q>understand</q> the content</li>
					<li>Screen scraping is always brittle and requires sophisticated monitoring</li>
					<li>Sophisticated screen scraping is hard but can be relatively robust</li>
					<ul>
						<li>It is <em>much more robust</em> when client and server cooperate (i.e., update coordination)</li>
					</ul>
					<li><em>Always</em> prefer APIs over screen scraping when they are an option</li>
				</ul>
			</slide>
			<slide id="server-response-api-xml">
				<title>Machine-Readable Data (XML)</title>
				<listing src="http-get-response.xml"/>
			</slide>
			<slide id="server-response-api-json">
				<title>Machine-Readable Data (JSON)</title>
				<listing src="http-get-response.json"/>
			</slide>
			<slide id="gui-to-api">
				<title>From GUI to API</title>
				<ul>
					<li>Applications provide a variety of services for users</li>
					<ul>
						<li>In Web-style GUIs, these are available at various pages</li>
						<li>In SPA GUIs, these are available through various interaction paths</li>
						<li>In APIs, these are available according to the <em>API style</em></li>
					</ul>
					<li>APIs can use various style and two of them are inspired by the Web</li>
					<ul>
						<li><link href="resource-style"/> lists all <q>pages</q> based on their URIs or URI patterns</li>
						<li><link href="hypermedia-style"/> designs APIs as starting points and interaction paths</li>
					</ul>
					<li>API design follows a similar pattern to GUI design</li>
					<ul>
						<li>Start from use cases and design APIs that satisfy those use cases</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-product">
			<title>APIs are Products</title>
			<slide id="product-thinking">
				<title>Product Thinking</title>
				<ul>
					<li>Products are solutions for solving the problems of users</li>
					<ul>
						<li>Most users do not want to use a product, they want to solve a problem</li>
						<li>Understanding user problems leads to better product design and management</li>
						<li>Improving products should be focused on better solving user problems</li>
					</ul>
					<li>Products need to be managed throughout their full lifecycle</li>
					<ul>
						<li>Inception and design based on user stories</li>
						<li>Development and testing gathering feedback as early as possible</li>
						<li>Observing product usage and continuous improvement</li>
						<li>Retiring/replacing product as part of the overall lifecycle</li>
					</ul>
					<li>APIs are the visible/actionable part of problem-solving capabilities</li>
				</ul>
			</slide>
			<slide id="kaizen">
				<title>Kaizen: Continuous Improvement</title>
				<img title="Kaizen: Continuous Improvement" href="https://commons.wikimedia.org/wiki/File:Kaizen-1.svg" src="kaizen.png" class="fullsize"/>
			</slide>
			<slide id="product-evolution">
				<title>Product Consumers and Evolution</title>
				<ul>
					<li>APIs are <q>consumed</q> as a subscription-based activity</li>
					<ul>
						<li>APIs may change even if the consumers did not change anything</li>
						<li>Not breaking consumers is essential for scalable API management</li>
					</ul>
					<li>API consumers might use API products in unconventional ways</li>
					<ul>
						<li><em>Test servers</em> can help consumers to validate their implementations</li>
						<li><em>Production servers</em> should focus on maximizing operational stability</li>
						<li><em>Version freezes</em> allow consumers to never worry about possible updates</li>
					</ul>
					<li>Change management and versioning must be managed and communicated</li>
				</ul>
			</slide>
			<slide id="hyrums-law">
				<title>Hyrum's Law</title>
				<blockquote><q href="http://www.hyrumslaw.com/">With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.</q> (Hyrum Wright)</blockquote>
			</slide>
			<slide id="food-labels">
				<title>Food Labels</title>
				<img title="Food Labels" href="https://www.google.ch/search?q=food+labels&amp;tbm=isch" src="food-labels.png" class="fullsize"/>
			</slide>
			<slide id="safety-labels">
				<title>Safety Labels</title>
				<img title="Product Safety Labels" href="https://www.google.ch/search?q=product+safety+labels&amp;tbm=isch" src="safety-labels.png" class="fullsize"/>
			</slide>
			<slide id="api-product-maturity">
				<title>API Product Maturity</title>
				<ul>
					<li>Organizations must have safe and scalable API product management practices</li>
					<ul>
						<li>For internal APIs, this determines how quickly and safely the organization can change</li>
						<li>For external APIs, this determines how quickly and safely the organization can change course</li>
					</ul>
					<li><em>API Archaeology</em> can help to uncover existing APIs that nobody manages</li>
					<ul>
						<li>Integration projects between systems for specific interaction scenarios</li>
						<li><em>Accidental APIs</em> should be replaced by designed and managed ones</li>
					</ul>
					<li><em>API Management</em> has to be practiced by anybody producing/consuming APIs</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="hypermedia">
		<title>Hypermedia</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://webconcepts.info/specs/IETF/RFC/8288" title='RFC 8288, "Web Linking", October 2017'>RFC 8288</a>&#160;Â· <a href="http://www.ustream.tv/recorded/102891495" title='Mike Amundsen, "Twelve Patterns for Hypermedia Microservices", Craft Conference, April 2017'>12 Patterns</a>&#160;Â· <a href="http://dret.typepad.com/dretblog/2016/08/api-maps-hypermedia-api-design.html" title='Erik Wilde, "API Maps: Hypermedia API Design", August 2016'>API Maps</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="web-linking">
			<title>Web Linking</title>
			<slide id="typed-links">
				<title>Web Links are Typed Links</title>
				<ul>
					<li>Links are <em>possible paths</em> a client can follow to accomplish a goal</li>
					<ul>
						<li>Some links are typed through HTML markup (<code>&lt;img></code>, <code>&lt;form></code>, <code>&lt;link rel=""></code>)</li>
						<li>Many links are typed for human users (<code>&lt;a></code>)</li>
					</ul>
					<li>Links show the way but do not determine the destination</li>
					<ul>
						<li>Images can use various formats represented at runtime through the media type</li>
						<li>Clients can specify capabilities/preferences via HTTP</li>
					</ul>
					<li>Hypermedia as the engine of application state (HATEOAS)</li>
					<ul>
						<li>Clients start at a resource and with a certain goal</li>
						<li>They follow links based on resources they encounter and choices they make</li>
						<li>Application state is a result of a series of <em>link-driven interactions</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-web-linking">
				<title>Web Linking for APIs</title>
				<ul>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/8288">Web Linking</a> takes linking to the HTTP level</li>
					<ul>
						<li><a href="http://www.webconcepts.info/concepts/http-headers/Link"><code>Link</code> HTTP Header</a> for links on the HTTP level</li>
						<li>All links are typed and types are either registered or defined/used by individual users</li>
						<li>The <a href="http://www.iana.org/assignments/link-relations/link-relations.xhtml">link relations registry</a> establishes a shared set of meaningful link types</li>
					</ul>
					<li>Documenting hypermedia APIs always means to document all link relation types</li>
					<ul>
						<li><em>Registered link types</em> have to be put/described in the context of the API</li>
						<li><em>Extension link types</em> must be completely documented in the context of the API</li>
					</ul>
				</ul>
			</slide>
			<slide id="registered-link-types">
				<title>Registered Link Types</title>
				<ul>
					<li>Well-known link relation types are registered with IANA</li>
					<ul>
						<li>Registration can be done be anybody and follows a simple process</li>
						<li>Ideally the registry should reflect shared practices by the community</li>
					</ul>
					<li>Registered link relation types are simple strings</li>
					<ul>
						<li>Any simple name that is used should be described in the registry</li>
						<li>For specific/proprietary types it is possible to use <em>extension relation types</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="extension-link-types">
				<title>Extension Link Types</title>
				<ul>
					<li>Non-registered link relation type can be invented and used by everybody</li>
					<ul>
						<li>These <em>extension link relation types</em> must be named with a URI</li>
						<li>Optionally, the URI may provide documentation for the link relation type</li>
					</ul>
					<li>Many hypermedia APIs use a mix of registered and extension types</li>
					<ul>
						<li>Use registered type when the registry provides ones that are a good fit</li>
						<li>Use extension types when no good fits can be found in the registry</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-overview">
			<title>Hypermedia Overview</title>
			<slide id="hypermedia-affordances">
				<title>Hypermedia and Affordances</title>
				<blockquote><q href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">When I say hypertext, I mean the simultaneous presentation of information and controls such that the information becomes the affordance through which the user (or automaton) obtains choices and selects actions.</q> (<a href="https://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a>)</blockquote>
			</slide>
			<slide id="hypermedia-workflow">
				<title>Hypermedia and Workflows</title>
				<ul>
					<li>Hypermedia combines state representation and possible further interactions</li>
					<ul>
						<li>Resource state allows clients to understand the current content</li>
						<li>Links allow clients to learn about the possible next steps</li>
						<li>Clients select and follow a link based on their application goals</li>
					</ul>
					<li>Workflows are represented by providing navigation options (affordances)</li>
					<ul>
						<li>Making it easier for clients to be <q>driven by available options</q></li>
						<li>Seamless fabric of navigation across individual APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="hypermedia-evolution">
				<title>Hypermedia and API Evolution</title>
				<ul>
					<li>Extensibility generally is a good idea for APIs</li>
					<ul>
						<li>Eliminates or reduces the need to do potentially expensive versioning</li>
					</ul>
					<li>Hypermedia representations by definition combine data and control elements</li>
					<ul>
						<li><em>Data extensibility</em> results in the usual benefits of allowing representations to evolve</li>
						<li><em>Control extensibility</em> results in the ability to add new workflow paths</li>
					</ul>
					<li>Hypermedia-based evolution has many patterns to choose from</li>
					<ul>
						<li><em>Incremental additions</em> can show up as new links in extension slots</li>
						<li><em>Complete new APIs</em> can be advertised as new start resources in <em>home documents</em></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-design">
			<title>Hypermedia Design</title>
			<slide id="representing-links">
				<title>Representing Links</title>
				<ul>
					<li>Hypermedia always is about mixing data and controls in representations</li>
					<ul>
						<li>Some scenarios can strictly separate the links and the data</li>
						<li>Other scenarios need links to be embedded in data to make sense</li>
					</ul>
					<li>At the very minimum links need a <em>target URI</em> to identify the link target</li>
					<ul>
						<li>Typically links are typed implicitly or explicitly for differentiation</li>
						<li>Links may also be decorated with <em>hints</em> for additional information</li>
					</ul>
					<li>Links representations are the information that clients have to make decisions</li>
					<ul>
						<li>Some link hints may help to choose between navigation paths</li>
						<li>Some link hints may be optimizations that <q>duplicate/mirror</q> HTTP mechanisms</li>
					</ul>
					<li>Links may also be represented in <a href="http://webconcepts.info/concepts/http-header/Link">the HTTP <code>Link</code> header field</a></li>
				</ul>
			</slide>
			<slide id="json-feed">
				<title>Link Representation (JSON Feed Format)</title>
				<listing src="json-feed.json" href="https://jsonfeed.org/version/1"/>
			</slide>
			<slide id="json-feed-xml">
				<title>Link Representation (XML Feed Format)</title>
				<listing src="json-feed.xml"/>
			</slide>
			<slide id="typed-links">
				<title>Typed Links</title>
				<ul>
					<li>Links represents navigational options for clients</li>
					<ul>
						<li>APIs include links that are advertised based on service and state</li>
						<li>Clients choose links based on application state and goals</li>
					</ul>
					<li>Link typing on the Web often is done using <a href="http://webconcepts.info/specs/IETF/RFC/8288">RFC 8288 <q>Web Linking</q></a></li>
					<ul>
						<li><em href="http://tools.ietf.org/html/rfc8288#section-2.1.1">Registered types</em> are simple strings using <a href="https://www.iana.org/assignments/link-relations/link-relations.xhtml">well-known values</a></li>
						<li><em href="http://tools.ietf.org/html/rfc8288#section-2.1.2">Extension types</em> are URIs which might choose to self-document their meaning</li>
					</ul>
					<li><a href="http://webconcepts.info/concepts/link-relation/">Registered types</a> have documented but fuzzy meaning</li>
					<ul>
						<li>APIs need to document which types they use and what they mean</li>
						<li>Reusing existing types makes the <q>API language</q> easier to understand and use</li>
					</ul>
				</ul>
			</slide>
			<slide id="hal">
				<title>Typed Links (HAL Format)</title>
				<listing src="hal.json" href="http://stateless.co/hal_specification.html" line="17-37"/>
			</slide>
		</part>
		<part id="hypermedia-formats">
			<title>Hypermedia Formats</title>
			<slide id="generic-specific">
				<title>Specific Hypermedia Formats</title>
				<ul>
					<li>Any format that mixes control and data is a hypermedia format</li>
					<ul>
						<li>Standard issues of how to define representations</li>
						<li>Additional issues of where and how to embed links as controls</li>
					</ul>
					<li>Depending on the metamodel and schema language varying support</li>
					<ul>
						<li>Not everybody likes using schema languages</li>
						<li>Many schema languages are focusing on grammars and data types</li>
						<li>Some schema languages at least have data types for URIs</li>
						<li>Few schema languages have explicit support for hypermedia</li>
					</ul>
				</ul>
			</slide>
			<slide id="generic-hypermedia">
				<title>Generic Hypermedia Formats</title>
				<ul>
					<li>Instead of designing hypermedia it's possible to use existing formats</li>
					<ul>
						<li>Generic formats often provide little more than data/control separation</li>
						<li>Domain focus results in semi-generic formats such as collection formats</li>
					</ul>
					<li>Hypermedia is more a pattern than it is format or technology</li>
					<ul>
						<li>Specific technologies may come with more constraints than benefits</li>
						<li>Never underestimate the benefits of reusing shared languages</li>
					</ul>
					<li>So far there is no clear trend towards a common generic format</li>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-conclusions">
			<title>Conclusions</title>
			<slide id="evolution-focus">
				<title>The Web Pattern</title>
				<ul>
					<li>Hypermedia is a pattern mixing data and controls</li>
					<li>Hypermedia provides a good foundation for API evolvability</li>
					<li>Clients need a more data-driven control flow</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="governance">
		<title>Governance</title>
		<toc class="abstract">...</toc>
		<toc class="resources">...</toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
	</presentation>
	<presentation id="guidelines">
		<title>Guidelines</title>
		<toc class="abstract">One of the challenges that many organizations face is how to scale their API journey. Getting started may not be easy, but scaling can be even more challenging to manage well. We look at some of the typical challenges organizations face when entering the scale-up phase, and how they can be tackled. We take a deep dive into the topic of API guidelines, which in virtually all organizations play an essential role in establishing, managing, and communicating good practices across API teams.</toc>
		<toc class="resources"><a href="https://nordicapis.com/api-archaeology-using-accidental-apis-to-inform-the-api-journey/" title='Erik Wilde, "API Archaeology: Using Accidental APIs to Inform the API Journey", Nordic APIs, April 2020'>API Archaeology</a>&#160;Â· <a href="https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/how-to-restart-your-stalled-digital-transformation" title='"How to restart your stalled digital transformation", McKinsey Digital, March 2020'>Stalled Digital Transformation</a>&#160;Â· <a href="https://dret.github.io/guidelines/" title="API Guidelines in the Wild">Collection of Public API Guidelines</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="journey">
			<title>Journey Essentials</title>
			<slide id="api-101">
				<title>APIs: Foundation of Digital Transformation</title>
				<ul>
					<li><em>Digital Transformation</em> is (much) more than just technology</li>
					<ul>
						<li>Businesses must embrace constant change driven by external factors</li>
						<li>Organizations must be able to execute business-driven changes</li>
						<li>Technology is powering the value chains and insights into them</li>
					</ul>
					<li>APIs are the key enabler of building a digitalized organization</li>
					<ul>
						<li>All value chains are digital and interconnected through APIs</li>
						<li>Each capability has an API and only communicates via APIs</li>
						<li>Everybody in the organization embraces APIs as their language</li>
					</ul>
				</ul>
			</slide>
			<slide id="archaeology">
				<title>Getting Started: API Archaeology</title>
				<img src="api-bones.png" title="Proto-API" style="float: right ; width : 25% ; margin : 5% ; "/>
				<ul>
					<li>Identify <em>low-hanging fruit</em> for quick success and feedback</li>
					<ul>
						<li>Every organization has a number of existing digital value chains</li>
						<li><a href="https://nordicapis.com/api-archaeology-using-accidental-apis-to-inform-the-api-journey/" title='Erik Wilde, "API Archaeology: Using Accidental APIs to Inform the API Journey", Nordic APIs, April 2020'>API Archaeology</a> is a good way to find candidates</li>
						<li>Identify high-potential <q>proto-APIs</q> for starting your API journey</li>
					</ul>
					<li>Start with APIs that will create value</li>
					<ul>
						<li>API-enable capabilities to unlock value for creating new revenue streams</li>
						<li>Build up API experience and move towards an API program and platform</li>
					</ul>
				</ul>
			</slide>
			<slide id="effective-teams">
				<title>What is an Effective API Team?</title>
				<ul>
					<li>A team spending less time with general API-related tasks</li>
					<ul>
						<li>Figuring out the general guardrails for API design</li>
						<li>Exposing, securing, and monitoring APIs</li>
						<li>Deploying APIs and making them discoverable</li>
					</ul>
					<li>A team spending more time addressing domain issues</li>
					<ul>
						<li>Engaging with consumers and designing a good API</li>
						<li>Making sure that consumer feedback is collected and used</li>
						<li>Contributing to the shared API practice in the organization</li>
					</ul>
				</ul>
			</slide>
			<slide id="stalling">
				<title>Getting started is hard, scaling up is even harder</title>
				<img href="https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/how-to-restart-your-stalled-digital-transformation" title='"How to restart your stalled digital transformation", McKinsey Digital, March 2020' src="stalled-digital-transformation.png" class="fullsize"/>
			</slide>
			<slide id="scale-matters">
				<title>Scale Matters</title>
				<img title="Grand Canyon" src="grand-canyon.jpg" class="fullsize"/>
			</slide>
			<slide id="scaling">
				<title>Scaling needs Strategy</title>
				<ul>
					<li>The <em>vision:</em> Use APIs for improved digital value chain agility</li>
					<li>The <em>strategy:</em> Focus on creating <em>valuable</em> and <em>useful</em> APIs</li>
					<ul>
						<li><em>APIs serve a purpose:</em> Focus on the purpose and help with the APIs</li>
						<li><em>APIs need a platform:</em> Provide a platform that makes building APIs easy</li>
						<li><em>APIs need a program:</em> Help teams to use and contribute to the platform</li>
						<li><em>APIs change:</em> Design everything for participation and change</li>
					</ul>
				</ul>
			</slide>
			<slide id="practice">
				<title>Building up the API Practice</title>
				<ul>
					<li>APIs as a practice have a number of <em>cross-cutting concerns</em></li>
					<ul>
						<li><em>Design-time concerns</em> are about designing and implementing API products</li>
						<li><em>Run-time concerns</em> are about deploying and operating API products</li>
					</ul>
					<li>Turning business capabilities into API products</li>
					<ul>
						<li><em>Guidelines</em> help with capturing and providing guidance</li>
						<li><em>Platforms</em> help with providing and consuming capabilities</li>
					</ul>
					<li>Many organizations support the API practice</li>
					<ul>
						<li><em>API Guilds</em> establish embedded support for API practices in individual teams</li>
						<li><em>Centers of Excellence (COE)</em> provide guidance and infrastructure for API teams</li>
						<li><em>Centers for Enablement (C4E)</em> are less about leading and more about supporting</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="guidelines">
			<title>API Guidelines</title>
			<slide id="why-guidelines">
				<title>API Guidelines as Shared Practices</title>
				<ul>
					<li>More API teams mean more ways to solve the same problem</li>
					<ul>
						<li>Solving <q>API problems</q> is not what teams should focus on</li>
						<li>Solving <q>API problems</q> in a consistent way helps the API landscape</li>
					</ul>
					<li>Communications across teams is a challenge</li>
					<ul>
						<li>Complement channels with documentation of practices</li>
					</ul>
				</ul>
			</slide>
			<slide id="anatomy">
				<title>The Anatomy of a Good Guideline</title>
				<ul>
					<li><em>Why</em> does the guideline exist?</li>
					<ul>
						<li>Rationale for creating the guideline</li>
					</ul>
					<li><em>What</em> can be done to address the described issue</li>
					<ul>
						<li>At least one <em>good solution</em> for addressing the issue</li>
					</ul>
					<li><em>How</em> to implement the solution</li>
					<ul>
						<li>At least one way to use the solution in practice</li>
					</ul>
					<li><em>Testing</em> that the guideline has been followed</li>
					<ul>
						<li>Some tests can be automated but many will be by declaration or review</li>
					</ul>
				</ul>
			</slide>
			<slide id="example">
				<title>API Guideline Example</title>
				<img href="https://github.com/dret/OReilly2020NYdemo/tree/master/guidelines/why/change-management-policy" title="Change Management Policy Guideline" src="change-management-guideline.png" class="fullsize"/>
			</slide>
			<slide id="good-practice">
				<title>Good is better than Best</title>
				<ul>
					<li>Solutions (<q>What</q>) are addressing design challenges</li>
					<ul>
						<li>Have a model for accepting new solutions</li>
					</ul>
					<li>Practices (<q>How</q>) are implementing a solution</li>
					<ul>
						<li>Have a model for accepting new practices</li>
					</ul>
				</ul>
			</slide>
			<slide id="management">
				<title>Good Guideline Management</title>
				<ul>
					<li>Guidelines should be managed in a participatory way</li>
					<ul>
						<li>Guidelines are for capturing and sharing experiences across API teams</li>
						<li>Everybody can comment or contribute to the guidelines</li>
						<li>Over time it may make sense to develop a more formal approval process</li>
						<li>There may be editors but their role is to improve guideline quality</li>
					</ul>
					<li>Tooling should reflect the goal of <em>shared practices</em></li>
					<ul>
						<li>One-way tooling is a bad choice</li>
						<li>Collaborative tooling is a good choice</li>
					</ul>
				</ul>
			</slide>
			<slide id="in-the-wild">
				<title>API Guidelines in the Wild</title>
				<img href="https://dret.github.io/guidelines/" title="API Guidelines in the Wild" src="api-guidelines.png" class="fullsize"/>
			</slide>
			<slide id="getting-started">
				<title>Getting Started</title>
				<ul>
					<li>Start capturing feedback from API teams</li>
					<ul>
						<li>Challenges along the way</li>
						<li>Solutions they have found or implemented</li>
						<li>Quantifying the time they spend with cross-cutting vs. domain tasks</li>
					</ul>
					<li>Start editing and providing guidance that API teams can find and use</li>
					<ul>
						<li>Tooling can be as simple as markdown and shared repositories</li>
					</ul>
					<li>Treat your <em>API Guidelines as a product</em></li>
					<ul>
						<li>There are well-defined user stories as well as goals and non-goals</li>
						<li>There is clear ownership of the product (which is different from the content)</li>
					</ul>
					<li>Good guidelines result in better APIs and more effective API teams</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="lessons-learned">
				<title>Lessons Learned</title>
				<ol>
					<li>What are the main challenges to start your API journey?</li>
					<li>Why do organizations often struggle to scale their API journey?</li>
					<li>How can API guidelines help as a way to share API practices across API product teams?</li>
				</ol>
			</slide>
		</part>
	</presentation>
	<presentation id="microservices">
		<title>Microservices</title>
		<toc class="abstract">Microservices are a way how to improve the speed of software delivery, result in more scalable architectures, and make sure that these goals do not compromise the robustness of the overall landscape. The concept of microservices has been distilled from a set of practices that have been adopted in bigger organizations that need to make sure that service development and delivery is as fast as possible. Microservices have a close architectural parallel in the Web, which is built around the same general principles of strictly separate implementations, easily usable interfaces, and an ecosystem model where the measure of success and fitness is that of the overall resulting system, and not that of the individual components.</toc>
		<toc class="resources"><a href="https://www.oreilly.com/library/view/microservice-architecture/9781491956328/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, &quot;Microservice Architecture: Aligning Principles, Practices, and Culture&quot;, O'Reilly Media, June 2016">MSA Book</a>&#160;Â· <a href="https://martinfowler.com/microservices/" title="Martin Fowler's Microservices Resource Guide">Microservices Resource Guide</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="microservices-pattern">
			<title>Microservices as a Pattern</title>
			<slide id="microservices-scalability">
				<title>Bottom-Up Motivation: Service Scalability</title>
				<ul>
					<li>Build modularized components that can be scaled individually</li>
					<ul>
						<li><em>Monitoring</em> allows insights into system status and load</li>
						<li><em>Rapid Provisioning</em> allows to react quickly when new capacity is required</li>
						<li><em>Rapid Deployment</em> means simple ways to develop/test/start/scale services</li>
					</ul>
					<li>Microservice implementations are more flexible than integrated approaches</li>
					<ul>
						<li>Scaling can be done per service instead of scaling bigger deployment units</li>
						<li>Code can be retired more easily by removing services from deployment</li>
						<li>Fewer unintended side-effects since all interactions are through APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservices-digital-transformation">
				<title>Top-Down Motivation: Digital Transformation</title>
				<ul>
					<li>IT capabilities and management often are not aligned</li>
					<ul>
						<li><em>Capabilities</em> are growing and business demands are growing as well</li>
						<li><em>Management</em> becomes complex and impacts execution speed</li>
					</ul>
					<li>There is a difference in separating interfaces and implementations</li>
					<ul>
						<li><em>Interfaces</em> are useful for accessing capabilities</li>
						<li><em>Implementations</em> must support easy modifications and additions</li>
					</ul>
					<li>The first wave of <em>API focus (SOA)</em> focused on interfaces only</li>
					<ul>
						<li>Focusing on APIs as <em>business-aligned capabilities</em> is a necessary first step</li>
						<li>Agility suffers when implementations are not business-aligned</li>
						<li><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> means that changing implementation structure can be hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-conway">
				<title>Conway's Law</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
			</slide>
			<slide id="soapy-soa">
				<title>The SOA Crisis</title>
				<ul>
					<li>SOAP-style SOA are traditional IT monoliths exposing some capabilities</li>
					<li>MSA #1 goal is to create a loosely coupled service landscape</li>
					<ul>
						<li>Shared data storage creates coupling</li>
						<li>Shared infrastructure creates coupling</li>
						<li>Shared libraries create coupling</li>
						<li>Loose coupling allows to pick the right tool for the job</li>
						<li>Loose coupling allows to refactor/retire as required</li>
						<li>Loose coupling blurs the public/partner/private lines</li>
					</ul>
					<li><em>Using APIs</em> is one of the few overlaps between SOAP-style SOA and MSA</li>
				</ul>
			</slide>
			<slide id="microservices-are-soa">
				<title>Microservices are SOA!</title>
				<img title="Microservices are SOA!" src="microservices-are-soa.jpg" class="fullsize"/>
			</slide>
			<slide id="microservices-are-good-soa">
				<title>Microservices are SOA done Right!</title>
				<ul>
					<li><em>Decouple implementations</em> and not just interfaces</li>
					<li><em>Velocity</em> is determined by how hard it is to make changes</li>
					<li>The biggest problem is not <em>access to capabilities</em> but <em>capability agility</em></li>
					<ul>
						<li>Providing access to capabilities is better than doing nothing</li>
						<li><em>Agile management of the capability landscape</em> goes further than that</li>
					</ul>
					<li>Microservices apply <em>Web architecture</em> to <em>Enterprise IT</em></li>
					<ul>
						<li>Implementation details are completely invisible to service users</li>
						<li>Service consumption <em>only</em> uses well-defined and uniform interfaces</li>
					</ul>
				</ul>
			</slide>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come fromâ¦" href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" class="fullsize"/>
			</slide>
			<slide id="msa-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're goingâ¦" href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" class="fullsize"/>
			</slide>
			<slide id="msa-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" class="fullsize"/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-description-discovery">
				<title>Decentralize Description and Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="msa-journey">
			<title>The MSA Journey</title>
			<slide id="change">
				<title>Transformation: Changing vs. Changeable</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Do not focus on <b>changing into something</b>;<br/>
							Focus on <b>being changeable</b> as your <b>mode of existence</b>;<br/>
							Make sure you become good at <b>being changeable</b> and <b>keep doing it</b>.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="bimodal-it">
				<title>Bimodal IT</title>
				<img title="Bimodal IT office workers" href="https://en.wikipedia.org/wiki/Minions_(film)" src="minions.jpg" class="fullsize"/>
			</slide>
			<slide id="balance">
				<title>Delicate Balance</title>
				<ul>
					<li><em>Preserve:</em> Functional core and business foundations</li>
					<li><em>Nourish:</em> Ability to change and situational awareness</li>
					<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
					<ul>
						<li><em>Individuals and interactions</em> over processes and tools</li>
						<li><em>Working software</em> over comprehensive documentation</li>
						<li><em>Customer collaboration</em> over contract negotiation</li>
						<li><em>Responding to change</em> over following a plan</li>
					</ul>
				</ul>
			</slide>
			<slide id="strangler">
				<title>Strangling the Monolith</title>
				<img title="Strangler Vine" href="https://commons.wikimedia.org/wiki/File:Strangler_tree.jpg" src="strangler-vine.jpg" class="fullsize"/>
			</slide>
			<slide id="strangling-01">
				<title>Strangling 1/13: Motivate</title>
				<img src="strangler-pattern-01-motivate.png" class="fullsize"/>
			</slide>
			<slide id="strangling-02">
				<title>Strangling 2/13: Identify</title>
				<img src="strangler-pattern-02-identify.png" class="fullsize"/>
			</slide>
			<slide id="strangling-03">
				<title>Strangling 3/13: Delineate</title>
				<img src="strangler-pattern-03-delineate.png" class="fullsize"/>
			</slide>
			<slide id="strangling-04">
				<title>Strangling 4/13: Analyze</title>
				<img src="strangler-pattern-04-analyze.png" class="fullsize"/>
			</slide>
			<slide id="strangling-05">
				<title>Strangling 5/13: Expose</title>
				<img src="strangler-pattern-05-expose.png" class="fullsize"/>
			</slide>
			<slide id="strangling-06">
				<title>Strangling 6/13: Manage</title>
				<img src="strangler-pattern-06-manage.png" class="fullsize"/>
			</slide>
			<slide id="strangling-07">
				<title>Strangling 7/13: Re-Implement</title>
				<img src="strangler-pattern-07-reimplement.png" class="fullsize"/>
			</slide>
			<slide id="strangling-08">
				<title>Strangling 8/13: Imitate</title>
				<img src="strangler-pattern-08-imitate.png" class="fullsize"/>
			</slide>
			<slide id="strangling-09">
				<title>Strangling 9/13: Replicate</title>
				<img src="strangler-pattern-09-replicate.png" class="fullsize"/>
			</slide>
			<slide id="strangling-10">
				<title>Strangling 10/13: Motivate</title>
				<img src="strangler-pattern-10-migrate.png" class="fullsize"/>
			</slide>
			<slide id="strangling-11">
				<title>Strangling 11/13: Deprecate</title>
				<img src="strangler-pattern-11-deprecate.png" class="fullsize"/>
			</slide>
			<slide id="strangling-12">
				<title>Strangling 12/13: Retire</title>
				<img src="strangler-pattern-12-retire.png" class="fullsize"/>
			</slide>
			<slide id="strangling-13">
				<title>Strangling 13/13: Repeat</title>
				<img src="strangler-pattern-13-repeat.png" class="fullsize"/>
			</slide>
		</part>
		<part id="culture-and-organization">
			<title>Culture and Organization</title>
			<slide id="culture">
				<title>Cultural Changes</title>
				<ul>
					<li>Remove red tape and embrace diversity</li>
					<li>Business environments change faster than ever</li>
					<ul>
						<li><em>Common question:</em> How to change into a more successful organization</li>
						<li><em>Better question:</em> How to become an organization that is better at changing</li>
					</ul>
					<li>The Web succeeded because it out-innovated everything else</li>
					<ul>
						<li>Permissionless decentralized innovation</li>
						<li>Data-driven decisions (traffic drives visibility and success)</li>
						<li>Continuous change enabled through loose coupling</li>
					</ul>
				</ul>
			</slide>
			<slide id="organization">
				<title>Organizational Changes</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
				<ul>
					<li>Learn from all of <em>Conway's laws</em></li>
					<ol>
						<li>Focus on communications (<q>Communication dictates design</q>)</li>
						<li>Support continuous process (<q>Be able to do it over</q>)</li>
						<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
						<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
					</ol>
				</ul>
			</slide>
			<slide id="evolution">
				<title>MSA Evolution</title>
				<ul>
					<li>Embrace change and start changing today</li>
					<ul>
						<li>Start small and learn by doing</li>
						<li>MSA management is about empowering</li>
					</ul>
					<li>MSA creates an environment that is designed to be change-friendly</li>
					<ul>
						<li><em>MSA technologies</em> allow teams to deliver as fast as possible</li>
						<li><em>APIs</em> allows teams/partners to access new products as easily as possible</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="microservices-and-apis">
			<title>Microservices and APIs</title>
			<slide id="microservice-api">
				<title>There is no <q>Microservices API</q></title>
				<ul>
					<li>Microservices are all about <em>how to implement services</em></li>
					<li>APIs are all about <em>how to interact with services</em></li>
					<li>Microservices are an implementation detail from the API perspective</li>
					<li>Microservice-implemented APIs might exhibit certain properties</li>
					<ul>
						<li>Changing more often because of faster implementation cycles</li>
						<li>More diverse <em>API landscapes</em> because of more autonomy</li>
						<li>Smaller scope because of solutions targeted at specific problems</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-design">
				<title>Designing Microservice APIs</title>
				<ul>
					<li>API consumers just use an <em>API</em> and not a <em>Microservice API</em></li>
					<ul>
						<li>Microservice API design is no different from API design in general</li>
						<li>Tighter coupling may be acceptable for vertical scenarios (<a href="http://samnewman.io/patterns/architectural/bff/" title="Backend-for-Frontend">BFF pattern</a>)</li>
					</ul>
					<li>Balancing autonomy/diversity and coherence/usability is necessary</li>
					<ul>
						<li>Microservices should have <em>freedom</em> to design their APIs</li>
						<li>API design should be driven by <em>design culture and patterns</em></li>
						<li>Microservices strategy needs to distill/document/distribute design patterns</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-focus">
				<title>Focus Areas for Microservice APIs</title>
				<ul>
					<li>Be explicit about openness and extensibility</li>
					<li>Provide <em>glue</em> that makes combining services easy</li>
					<ul>
						<li>At the minimal level, always use global, unique, and persistent <em>identifiers</em></li>
						<li>Consider using <em>hypermedia</em> as a way to support service orchestration</li>
					</ul>
					<li>Be explicit about how services signal end-of-life</li>
				</ul>
			</slide>
		</part>
		<part id="microservices-conclusions">
			<title>Conclusions</title>
			<slide id="msa-matters">
				<title>Microservice Architecture Matters</title>
				<ul>
					<li>MSA promotes agility (API designs should evolve)</li>
					<li>MSA promotes diversity (in design and implementation)</li>
					<li>MSA means more services (and the need for good DX across them)</li>
					<li>With MSA comes the need for a mature API strategy</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="monetization">
		<title>Monetization</title>
		<toc class="abstract">...</toc>
		<toc class="resources">...</toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
	</presentation>
	<presentation id="monitoring">
		<title>Monitoring</title>
		<toc class="abstract">...</toc>
		<toc class="resources">...</toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
	</presentation>
	<presentation id="programs">
		<title>Programs</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="program-business">
			<title>Business Alignment</title>
		</part>
		<part id="program-design">
			<title>API Design</title>
		</part>
		<part id="program-documentation">
			<title>API Documentation</title>
		</part>
		<part id="program-management">
			<title>API Management</title>
			<slide id="runtime-management">
				<title>Runtime Management</title>
			</slide>
			<slide id="design-time-management">
				<title>Design Time Management</title>
			</slide>
		</part>
		<part id="program-organization">
			<title>Organizational Aspects</title>
		</part>
		<part id="kpi">
			<title>Key Performance Indicators (KPI)</title>
			<slide id="kpi-overview">
				<title>KPI Overview</title>
				<ul>
					<li>Providing <em>measurable</em> indicators for performance of organizations or activities</li>
					<li>KPIs in most cases are designed to follow the <a href="https://en.wikipedia.org/wiki/SMART_criteria">SMART criteria</a></li>
					<ul>
						<li><em>Specific:</em> Target a specific area for improvement</li>
						<li><em>Measurable:</em> Quantify or at least suggest an indicator of progress</li>
						<li><em>Assignable:</em> Specify who will do it</li>
						<li><em>Realistic:</em> State what results can realistically be achieved, given available resources</li>
						<li><em>Time-related:</em> Specify when the result(s) can be achieved</li>
					</ul>
					<li>Like any other measurement KPIs are subject to <link href="kpi-goodharts-law"/></li>
				</ul>
			</slide>
			<slide id="kpi-goodharts-law">
				<title>Goodhart's Law</title>
				<blockquote><q>When a measure becomes a target, it ceases to be a good measure.</q> (<a href="https://en.wikipedia.org/wiki/Charles_Goodhart">Charles Goodhart</a>)</blockquote>
			</slide>
			<slide id="kpi-team-number">
				<title>Number of API Product Teams</title>
				<ul>
					<li>Low numbers indicate lack of agility</li>
					<li>Low numbers indicate risk of building <q>distributed monolith</q></li>
					<li>High numbers indicate need of alignment and tooling</li>
				</ul>
			</slide>
			<slide id="kpi-api-number">
				<title>Number of APIs</title>
				<ul>
					<li>Interesting indicator but little indication of API value</li>
					<li>Differentiating <em>public/partner/private</em> helps to better track API focus</li>
				</ul>
			</slide>
			<slide id="kpi-api-consumers">
				<title>Number of API Consumers</title>
				<ul>
					<li>How many developers/teams use <em>private APIs</em>?</li>
					<li>How many customers use <em>partner APIs</em>?</li>
					<li>How many external users use <em>public APIs</em>?</li>
					<li>Increasing consumer numbers need more mature API management</li>
				</ul>
			</slide>
			<slide id="kpi-api-speed">
				<title>Speed to API Availability</title>
				<ul>
					<li>How long does it take to availability in production?</li>
					<li>What causes largest delay for accelerating API availability?</li>
				</ul>
			</slide>
			<slide id="kpi-api-onboarding">
				<title>API Onboarding</title>
				<ul>
					<li>How long does it take to onboard new API consumers?</li>
					<li>What causes most delay for API onboarding?</li>
				</ul>
			</slide>
			<slide id="kpi-api-traffic">
				<title>API Traffic Growth</title>
				<ul>
					<li>The amount of traffic an API is serving</li>
					<li>Should be augmented to better reflect the <em>value</em> the API is driving</li>
					<li>Reliability should improve when traffic/value are increasing</li>
					<li>Scalability is important to check for rapidly growing APIs</li>
				</ul>
			</slide>
			<slide id="kpi-api-business">
				<title>API Business Impact and Breadth</title>
				<ul>
					<li>Can help to identify possibly competing APIs/integrations</li>
					<li>APIs exposing more <em>business value</em> are more <em>valuable APIs</em></li>
					<li>Can help to identify candidates for becoming partner/public APIs</li>
				</ul>
			</slide>
			<slide id="kpi-api-revenue">
				<title>Revenue Driven by API</title>
				<ul>
					<li>Identify revenue that is directly driven by the API</li>
					<li>Separate explicit <em>API cost</em> and the <em>product revenue</em></li>
				</ul>
			</slide>
		</part>
		<part id="okr">
			<title>Objectives and Key Results (OKR)</title>
			<slide>
				<title>OKR Overview</title>
				<ul>
					<li>OKR are meant to capture specific goals</li>
					<li>They are created in response to observations that need action</li>
					<li>Objectives are coupled with measurable ways to reach them</li>
					<ul>
						<li><em>Objectives</em> are set for organization, department, team and personal levels</li>
						<li><em>Key Results</em> are 3-5 measurable result to satisfy the objective</li>
						<li><em>Actions</em> (optional) capture the plan to reach results and satisfy the objective</li>
					</ul>
					<li>OKR is <em>aspirational (goals)</em> whereas KPI is <em>monitoring (processes)</em></li>
				</ul>
			</slide>
			<slide id="okr-kpi">
				<title>OKR and KPI</title>
				<ul>
					<li>KPIs are meant to monitor/control ongoing activities</li>
					<li>OKRs are meant to capture specific actionable initiatives</li>
					<li>KPI/OKR can be combined for tracking and taking action</li>
					<ul>
						<li>Use KPI to track indicators that matter for your organization</li>
						<li>Use OKR to take action when a KPI is not within its acceptable bounds</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="programs-conclusions">
			<title>Conclusions</title>
		</part>
	</presentation>
	<presentation id="products">
		<title>Products</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a title='Sabrina Macpherson, "Product Strategy for APIs: A Roadmap Approach", Nordic APIs, August 2020' href="https://nordicapis.com/product-strategy-for-apis-a-roadmap-approach/">Product Strategy for APIs</a>&#160;Â· <a href="https://www.youtube.com/watch?v=HmIHw3U5jEQ" title='"Designing Private, Partner, and Public APIs: What&quot;s the Difference?", YouTube video, August 2020'>Private, Partner, and Public APIs</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="product-economics">
			<title>Product Economics</title>
		</part>
		<part id="innovation">
			<title>Innovative Products</title>
			<slide id="innovation-value">
				<title>Innovation: A New Way of Creating Value</title>
			</slide>
			<slide id="feedback">
				<title>Iteration means Exploration</title>
			</slide>
		</part>
		<part id="product-management">
			<title>(API) Product Management</title>
			<part id="management-4p">
				<title>Product Management: 4 Ps</title>
				<slide id="definition-4p">
					<title>Product Marketing Mix: 4 Ps</title>
					<ul>
						<li>Framework for decision-making for product marketing</li>
						<ul>
							<li><em>Product:</em> Good or service wanted by consumers</li>
							<li><em>Price:</em> What are consumers willing to pay for the product?</li>
							<li><em>Place:</em> How to make products available to consumers</li>
							<li><em>Promotion:</em> How to make consumers aware of products</li>
						</ul>
					</ul>
				</slide>
				<slide id="api-4p-product">
					<title>4 Ps for APIs: Product</title>
				</slide>
				<slide id="api-4p-price">
					<title>4 Ps for APIs: Price</title>
				</slide>
				<slide id="api-4p-place">
					<title>4 Ps for APIs: Place</title>
				</slide>
				<slide id="api-4p-promotion">
					<title>4 Ps for APIs: Promotion</title>
				</slide>
			</part>
			<part id="management-7p">
				<title>Service Management: 7 Ps</title>
				<slide id="definition-7p">
					<title>Expanded Product Marketing Mix: 7 Ps</title>
					<ul>
						<li>Extends the <link href="definition-4p">4 Ps</link> with a focus on services</li>
						<li>Framework for decision-making for services marketing</li>
						<ul>
							<li><em>People:</em> Considerations regarding service consumers (UX/CX)</li>
							<li><em>Process:</em> Planning and managing service delivery</li>
							<li><em>Physical Evidence:</em> (Physical) context of service delivery</li>
						</ul>
					</ul>
				</slide>
				<slide id="api-7p-people">
					<title>7 Ps for APIs: People</title>
				</slide>
				<slide id="api-7p-process">
					<title>7 Ps for APIs: Process</title>
				</slide>
				<slide id="api-7p-physical">
					<title>7 Ps for APIs: Physical Evidence</title>
				</slide>
			</part>
		</part>
		<part id="product-consumers">
			<title>API Product Consumers</title>
			<slide id="product-consumers-developers">
				<title>Developers: Working with the API</title>
			</slide>
			<slide id="product-consumers-users">
				<title>End Users: Working through the API</title>
			</slide>
		</part>
		<part id="consumer-scope">
			<title>API Product Consumer Scope</title>
			<slide id="private-partner-public">
				<title>Private/Partner/Public API Design Scope</title>
				<img src="private-partner-public-design.png" class="fullsize"/>
			</slide>
			<slide id="product-consumers-domain">
				<title>Domain Knowledge</title>
				<img src="private-partner-public-design-domain.png" class="fullsize"/>
			</slide>
			<slide id="product-consumers-relationship">
				<title>Producer/Consumer Relationship</title>
				<img src="private-partner-public-design-relationship.png" class="fullsize"/>
			</slide>
			<slide id="product-consumers-security">
				<title>Threat/Security Model</title>
				<img src="private-partner-public-design-security.png" class="fullsize"/>
			</slide>
			<slide id="product-consumers-landscape">
				<title>Landscape Coherence</title>
				<img src="private-partner-public-design-landscape.png" class="fullsize"/>
			</slide>
		</part>
	</presentation>
	<presentation id="protocols">
		<title>Protocols</title>
		<toc class="abstract">Protocols determine the fundamentals of how distributed IT components communicate. <em>Protocol layering</em> ensures that the Internet and Web protocol stack is well architected and allows interconnection across a wide variety of communication technologies. <em>Application protocols</em> are directly visible to application developers and determine both the fundamental communication style, and the framework within which these communications the happen. While the <em>Hypertext Transfer Protocol (HTTP)</em> is the most widely used application protocol for APIs today, there are a variety of other styles and protocols that are possible choices for the application protocol layer as well.</toc>
		<toc class="resources"><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;Â· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;Â· <a href="http://webconcepts.info/specs/IETF/RFC/7230" title='RFC 7230, "Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing", June 2014'>HTTP</a>&#160;Â· <a href="https://www.mnot.net/blog/2017/05/11/status_codes" title='Mark Nottingham, "How to Think About HTTP Status Codes", May 2017'>HTTP Status Codes</a>&#160;Â· <a href="https://graphql.org/" title='GraphQL: A query language for your API'>GraphQL</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="networks">
			<title>Computer Networks</title>
			<slide>
				<title>Network History</title>
				<ul>
					<li>First regarded as a convenient workaround for floppy disks</li>
					<ul>
						<li><q>Real computer scientists write compilers</q></li>
						<li>The value of computer networks depends on their size</li>
					</ul>
					<li>Early networking solutions were vendor-specific islands</li>
					<ul>
						<li>DECnet for <em>Digital Equipment Corporation (DEC)</em> customers</li>
						<li>XNS for <em>Xerox</em> customers</li>
						<li>SNA for <em>IBM</em> customers</li>
						<li>transmitting data between these networks was very cumbersome</li>
					</ul>
					<li>Bridging networks transparently became increasingly important</li>
					<ul>
						<li>More computers and networks increase the benefit of interconnections</li>
						<li>Layering being used for internetworks, not only for networks</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Networks vs. Internetworks</title>
				<ul>
					<li>Specific networks use specific abstractions</li>
					<ul>
						<li>How to address nodes (computers, phones, PDAs, RFID tags)</li>
						<li>How to address applications on these nodes</li>
						<li>How to transmit data to these applications</li>
					</ul>
					<li>Internetworks provide a network-independent abstraction</li>
					<ul>
						<li>Nodes are addressed uniformly (IP addresses)</li>
						<li>Applications are identified uniformly (ports)</li>
						<li>Data transmission uses one set of protocols (TCP/UDP)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Internet</title>
				<ul>
					<li>Very early start and a lot of experience</li>
					<ul>
						<li>Pragmatic and evolutionary approach</li>
						<li><q>If it's not broken, don't fix it</q></li>
					</ul>
					<li>Standardization by independent technical experts</li>
					<ul>
						<li>Avoids the <q>designed by committee</q> effect of consortia</li>
						<li>Conservative and concentrating on stability</li>
						<li>Implementations are required to prove technical feasibility</li>
						<li>Simplicity whenever possible</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Internet Principles</title>
				<blockquote>Be liberal in what you accept, and conservative in what you send.</blockquote>
				<p class="quotenote"><a href="http://www.postel.org/postel.html">Jon Postel</a>, <a href="http://tools.ietf.org/html/rfc1122">IETF RFC 1122</a></p>
				<blockquote>Whenever possible, communications protocol operations should be defined to occur at the end-points of a communications system, or as close as possible to the resource being controlled.</blockquote>
				<p class="quotenote"><a href="http://dret.net/biblio/reference/sal84">J. Saltzer, D. Reed, D. Clark, <q>End-to-end Arguments in System Design</q></a></p>
			</slide>
			<slide>
				<title>Internet Protocols</title>
				<img class="fullsize" src="internet-protocols.png" title="Internet Protocol Layers"/>
			</slide>
			<slide>
				<title>Network Convergence</title>
				<img class="fullsize" src="network-convergence.png" title="Convergence in the Protocol Stack"/>
			</slide>
		</part>
		<part id="network-layers">
			<title>Networking Layers</title>
			<slide id="SoC">
				<title>Separation of Concerns (SoC)</title>
				<ul>
					<li>Solving different issues separately is a <em href="http://en.wikipedia.org/wiki/Separation_of_concerns#Origin">Good Idea</em></li>
					<ul>
						<li><q>...a program must be correct...</q></li>
						<li><q>...it should be efficient...</q></li>
						<li><q>...whether, and if so: why, the program is desirable...</q></li>
					</ul>
					<li>Complex solutions need a structured approach for solving them</li>
					<ul>
						<li>Solutions become easier to create</li>
						<li>Parts of solutions may become reusable</li>
						<li>Parts of solutions may become replaceable</li>
					</ul>
					<li>Software engineering hit complexity issues a bit earlier than networking did</li>
					<li>SoC is a good idea but not without costs</li>
					<ul>
						<li><q>Vertical integration</q> allows optimizations not possible in structured designs</li>
						<li><q>Design depends largely on constraints.</q> (<a href="http://en.wikipedia.org/wiki/Charles_and_Ray_Eames">Charles and Ray Eames</a>)</li>
					</ul>
				</ul>
			</slide>
			<slide id="osi-layers">
				<title>OSI Layers</title>
				<img class="fullsize" src="osi-model.png" href="http://commons.wikimedia.org/wiki/File:Osi-model.png"/>
			</slide>
			<slide id="layer1">
				<title>Layer 1: Physical</title>
				<div style="height : 70%">
					<img style="height : 90% ; margin : 2% ; " src="antenna-tree.jpg" title="Cellular" href="https://www.flickr.com/photos/33954075@N07/5461958584/"/>
					<img style="height : 90% ; margin : 2% ; " src="public-wifi.jpg" title="Public Wi-Fi" href="https://www.flickr.com/photos/dret/3649149757"/>
					<img style="height : 90% ; margin : 2% ; " src="rj45.jpg" title="Cable Access" href="https://www.flickr.com/photos/30908884@N00/197503286"/>
				</div>
			</slide>
			<slide id="layer2">
				<title>Layer 2: Data Link</title>
				<ul>
					<li>Getting small units of data (frames) safely across layer 1</li>
					<li>Lost/damaged frames are repeated to ensure robustness</li>
					<li>Depending on layer 1, layer 2 frames can have very different sizes</li>
					<ul>
						<li><a href="http://en.wikipedia.org/wiki/Ethernet_frame">Ethernet frames</a> typically have 1500 bytes of payload (and some protocol fields)</li>
						<li>Other networks (such as GSM, CDMA, BLE) use different frame sizes</li>
					</ul>
				</ul>
				<img style="width : 90% ; margin : 2% ; " src="ethernet-frame.png" href="http://commons.wikimedia.org/wiki/File:Ethernet_frame.svg"/>
			</slide>
			<slide id="layer3">
				<title>Layer 3: Network</title>
				<ul>
					<li>Allows addressing at the network level</li>
					<li>For the Internet, this means IP addresses</li>
					<ul>
						<li><a href="http://en.wikipedia.org/wiki/IPv4">IPv4</a> is the version that has powered the Internet so far</li>
						<li><a href="http://en.wikipedia.org/wiki/IPv6">IPv6</a> is phased in to be able to handle <q>IoT-scale</q> growth</li>
					</ul>
				</ul>
				<img style="width : 90% ; margin : 2% ; " src="ipv4-packet.png" href="http://en.wikipedia.org/wiki/IPv4"/>
			</slide>
			<slide id="layer4">
				<title>Layer 4: Transport</title>
				<ul>
					<li>Layer 3 establishes connectivity on a <em>machine-to-machine</em> level</li>
					<ul>
						<li>Packets can be sent from one machine to another machine</li>
						<li>It is not clear yet what to do with the packet once it arrived</li>
					</ul>
					<li>TCP establishes <em>process-to-process</em> connectivity and reliable connections</li>
				</ul>
				<img class="fullsize" src="tcp-structure.png" href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol"/>
			</slide>
			<slide id="layer5">
				<title>Layer 5: Session</title>
				<ul>
					<li>Sessions are meaningful for applications</li>
					<ul>
						<li>TCP connections may or may not terminate (see <a href="http://en.wikipedia.org/wiki/HTTP_persistent_connection">HTTP/1.1 persistent connections</a>)</li>
						<li>Applications should be able to start, pause, restart, and end sessions</li>
					</ul>
					<li>Sessions can be terrible for scalability</li>
					<ul>
						<li>Creating tight coupling between two processes</li>
						<li><a href="rest/">REST</a> tries hard to build a session-free web (<q>stateless interactions</q>)</li>
					</ul>
					<li>The Internet does not really have a generic model for sessions</li>
					<ul>
						<li><em>HTTP Cookies</em> are one way to achieve the same goal (but with a lot of side-effects)</li>
					</ul>
				</ul>
			</slide>
			<slide id="layer6">
				<title>Layer 6: Presentation</title>
				<ul>
					<li>OSI has <em href="http://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One">Abstract Syntax Notation One (ASN.1)</em></li>
					<ul>
						<li>one abstract model and a variety of <q>encoding rules</q> (DER, XER, PER)</li>
						<li>mostly extinct nowadays but still used for <a href="http://en.wikipedia.org/wiki/Public_key_infrastructure">PKI information (certificates)</a></li>
					</ul>
					<li>The Internet has media types and some <q>generic</q> data representation languages</li>
					<ul>
						<li><em href="../xml">Extensible Markup Language (XML)</em> was the first successful Internet representation</li>
						<li><em href="">JavaScript Object Notation (JSON) replaced XML because most developers like it better</em></li>
						<li><em href="">Resource Description Framework (RDF)</em> is another possible generic data format</li>
					</ul>
				</ul>
			</slide>
			<slide id="layer7">
				<title>Layer 7: Application</title>
				<ul>
					<li>Anything that is built on top of a layered networking stack</li>
					<li>Applications can select (some of the) aspects of the stack</li>
					<ul>
						<li>TCP is often useful because it's reliable and flow-controlled</li>
						<li>UDP may be better for real-time and loss-tolerant data such as video/audio</li>
					</ul>
					<li>Lower layers are completely invisible to applications</li>
					<ul>
						<li>Unless some support and signaling is built into the networking stack</li>
						<li>For example, it can be very interesting to know what traffic costs</li>
					</ul>
					<li>Complete abstraction is a dream, complete control is a nightmare</li>
					<ul>
						<li>Or is it the other way around? It all depends on the scenarios...</li>
						<li>As the Internet and applications evolve, networking protocols and features evolve</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>(Some) Popular Internet Application Protocols</title>
				<ul>
					<li>Domain/Host Name Resolution: DNS</li>
					<li>The Web: <link href="http"/></li>
					<li>Email: SMTP/IMAP</li>
					<li>Chatting: <link href="xmpp"/></li>
					<li>File Transfer: FTP</li>
					<li>Multimedia Traffic: RTP</li>
					<li>Remote Login: Telnet</li>
				</ul>
			</slide>
			<slide>
				<title>Popular Networking Equipment</title>
				<ul>
					<li>Layer 1: Repeaters, Hubs (extending reach)</li>
					<li>Layer 2: Bridges, Switches (selectively <q>repeating</q> frames)</li>
					<li>Layer 3: Routers (using end-to-end addresses)</li>
					<li>Above Layer 4: Gateways</li>
				</ul>
			</slide>
		</part>
		<part id="TCP">
			<title>Transmission Control Protocol (TCP)</title>
			<slide>
				<title>TCP Features</title>
				<ul>
					<li>Flow-controlled (avoiding congestion)</li>
					<li>Reliable (no data lost or duplicated)</li>
					<li>Connection-oriented</li>
					<li>Application addressing</li>
				</ul>
			</slide>
			<slide>
				<title>Reliable Connections</title>
				<ul>
					<li>IP may drop or duplicate packets</li>
					<ul>
						<li>TCP adds serial numbers in data packets</li>
						<li>If problems are detected, TCP recovers automatically</li>
					</ul>
					<li>TCP avoids network congestion and system overload</li>
					<ul>
						<li><em>Slow start</em> avoids flooding receivers with data they cannot process</li>
						<li><em>Fast retransmit</em> for avoiding timeouts when losing data</li>
						<li>A <em>Sliding window</em> for controlling the amount of outstanding packets</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>TCP Window</title>
				<img class="fullsize" src="tcp-window.png"/>
			</slide>
		</part>
		<part id="DNS">
			<title>Domain Name System (DNS)</title>
			<slide>
				<title>Naming vs. Addressing</title>
				<ul>
					<li>IP addresses depend on network topology and organization</li>
					<ul>
						<li>Reorganizing a network may change all IP addresses</li>
						<li>Identifying important hosts should not be address-based</li>
					</ul>
					<li>Names are supposed to be more stable than addresses</li>
					<ul>
						<li>A name is an abstract identification of something</li>
						<li>Names can be used to obtain more information</li>
					</ul>
					<li>Network services should use names instead of addresses</li>
					<ul>
						<li>Before using the service, a mapping has to be performed</li>
						<li>The <em>Domain Name System (DNS)</em> is providing this service</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>DNS Properties</title>
				<ul>
					<li>DNS has a bootstrap problem</li>
					<ul>
						<li>DNS provides a service and should thus be identified by a name</li>
						<li>For resolving names into addresses, the DNS service is required</li>
					</ul>
					<li>DNS configuration is part of basic Internet configuration</li>
					<ul>
						<li><em>Dynamic Host Configuration Protocol (DHCP)</em> provides IP address, netmask, gateway, and DNS server address</li>
					</ul>
					<li>DNS names are hierarchically structured</li>
					<ul>
						<li><code>ischool.berkeley.edu</code>, <code>edu</code> is the <em>Top-Level Domain (TLD)</em></li>
						<li>TLDs are either <em>generic (gTLD)</em> or <em>country code (ccTLD)</em></li>
						<li>Subdomains are federated (e.g., <code>edu</code>, <code>us</code>, <code>uk</code>, <code>tv</code>)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Names Matter</title>
				<ul>
					<li>Names are not unique and namespaces are finite</li>
					<ul>
						<li>Name disputes arise which were irrelevant before the Web</li>
						<li><q>Cybersquatting</q> as a popular way to make money</li>
					</ul>
					<li>Names can be worth a lot of money</li>
					<ul>
						<li><code>business.com</code> was sold for $7.5M in 1999 and again for $345M in 2007</li>
					</ul>
					<li>Name inflation can be used to generate money</li>
					<ul>
						<li><code>aero</code>, <code>biz</code>, <code>coop</code>, <code>info</code>, <code>jobs</code>, <code>mobi</code>, <code>museum</code>, <code>name</code>, <code>pro</code>, <code>travel</code></li>
						<li>Starting 2014, <a href="http://dret.typepad.com/dretblog/2008/06/dret.html">user-defined top-level domains went on sale</a></li>
					</ul>
					<li>Names can have political significance</li>
					<ul>
						<li>ccTLDs are assigned based on the UNO's idea of what a country is</li>
					</ul>
					<li>Names can have symbolic significance</li>
					<ul>
						<li>Catalonia managed to get a domain of its own (<code>cat</code>)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>DNS Namespace Organization</title>
				<ul>
					<li>Domain owners can organize the assignment of subdomains</li>
					<ul>
						<li><code href="http://www.berkeley.edu/">berkeley.edu</code> is an U.S. educational institution</li>
						<li><code href="http://www.ethz.ch/">ethz.ch</code> is a Swiss university</li>
						<li><code href="http://www.imperial.ac.uk/">imperial.ac.uk</code> is a British university</li>
						<li><code href="http://www.uts.edu.au/">uts.edu.au</code> is an Australian university</li>
						<li><code href="http://www.swiss.aero/">swiss.aero</code> makes money by selling <q>new land</q></li>
					</ul>
					<li>Special rules may apply (Germany does not assign car license plate names)</li>
					<li>Organizations may be countries or companies</li>
					<ul>
						<li>Countries have national organizations for assigning names</li>
						<li>Companies may create an internal multi-level namespace (<code href="http://www.ischool.berkeley.edu/">www.ischool.berkeley.edu</code>)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Using DNS</title>
				<ul>
					<li>DNS is used by virtually all Internet applications</li>
					<ul>
						<li>Names are more stable than addresses</li>
					</ul>
					<li>E-mail has some dedicated features built into DNS</li>
					<ul>
						<li>Special entries (<code>MX</code> records) identify the e-mail server for a domain</li>
						<li>Fallback entries help dealing with failing e-mail servers</li>
					</ul>
					<li>most URIs are based on DNS names</li>
					<ul>
						<li><code>http://ischool.berkeley.edu/</code> identifies the access protocol and the host</li>
						<li>The browser first performs a DNS lookup</li>
						<li>A TCP connection is then established to the IP address returned by the DNS</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="http">
			<title>Hypertext Transfer Protocol (HTTP)</title>
			<slide>
				<title>DNS &amp; HTTP</title>
				<p>The two basic protocols which every Web browser must implement are <em>DNS</em> access and <em>HTTP</em>. However, most operating systems provide an API for DNS access, so the browser can use this service locally and only has to implement HTTP. <em>TCP</em> support (which is required as the foundation for HTTP) is usually provided by the operating system.</p>
				<img style="width : 90% ; margin : 2% ; " src="browser-dns-http.png"/>
			</slide>
			<slide id="http-messages">
				<title>HTTP Messages</title>
				<ul>
					<li>HTTP needs a reliable connection</li>
					<ul>
						<li>The foundation for HTTP is <em>TCP</em></li>
						<li>DNS resolution yields an IP address</li>
						<li>Open TCP connection to port 80 or port specified in URI (<code>http://rosetta.sims.berkeley.edu:8085/</code>)</li>
					</ul>
					<li>HTTP is a <em>text-based</em> protocol</li>
					<ul>
						<li>The connection is used to transmit <em>text messages</em></li>
						<li>All HTTP messages are human-readable (not all <em>entities</em>, though)</li>
						<li>Basic HTTP operations can be carried out by hand (e.g., per <code>telnet</code>)</li>
					</ul>
				</ul>
				<pre>start-line
message-header *

message-body ?</pre>
			</slide>
			<slide id="http-headers">
				<title>HTTP Header Fields</title>
				<ul>
					<li>Header fields contain information about the message</li>
					<ul>
						<li><em>General header:</em> <code>Date</code> as the message origination date</li>
						<li><em>Request header:</em> <code>Accept-Language</code> indicates language preferences</li>
						<li><em>Response header:</em> <code>Server</code> contains system information</li>
						<li><em>Entity header:</em> <code>Content-Type</code> specifies the media type of the entity</li>
					</ul>
					<li>HTTP (and others) define <a href="http://webconcepts.info/concepts/http-header/">a number of header fields</a></li>
					<ul>
						<li>Unknown fields must be ignored (extensibility)</li>
					</ul>
					<li>HTTP is about acting on these fields</li>
					<ul>
						<li>HTTP defines what HTTP implementations must or should do</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-request">
				<title>HTTP Requests</title>
				<ul>
					<li>After opening a connection, the client sends a request</li>
					<ul>
						<li>The method indicates the action to be performed on the resource</li>
						<li>HTTP's most interesting methods are: <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code></li>
					</ul>
					<li>The URI identifies the resource to which the request should be applied</li>
					<ul>
						<li>Absolute URIs are required when contacting <em>proxies</em></li>
						<li>Absolute paths are required when contacting a server directly</li>
						<li>The URI may contain <em>query information</em></li>
					</ul>
					<li>The <code>Host</code> header field must be included in every HTTP/1.1 request</li>
				</ul>
				<pre>Method Request-URI HTTP/Major.Minor
[Header]*

[Entity]?</pre>
			</slide>
			<slide id="http-get">
				<title>HTTP GET</title>
				<ul>
					<li>Retrieval action based on the URI</li>
					<ul>
						<li>Possibly implemented by reading a file</li>
						<li>Possibly implemented by processing a file (PHP)</li>
						<li>Possibly implemented by running code</li>
					</ul>
					<li>Semantics may change based on header fields</li>
					<ul>
						<li><code>If-*:</code> only reply with the entity if necessary</li>
						<li><code>Range:</code> only reply with the requested part of the entity</li>
					</ul>
					<li>Cacheability depends on header fields of the response</li>
				</ul>
				<pre>GET / HTTP/1.1
Host: ischool.berkeley.edu</pre>
			</slide>
			<slide id="http-response">
				<title>HTTP Responses</title>
				<ul>
					<li>The server's response to acting on a request</li>
					<ul>
						<li>the status code is given numerically and as text</li>
						<li><code>2**</code> for variations of <q>ok</q></li>
						<li><code>3**</code> for redirections</li>
						<li><code>4**</code> are different client side problems (<code>404</code>: not found)</li>
						<li><code>5**</code> are different server side problems</li>
					</ul>
					<li>Header fields specify additional information</li>
					<ul>
						<li>Information about the server</li>
						<li>Information about the entity (media type, encoding, language)</li>
					</ul>
				</ul>
				<pre>HTTP/Major.Minor Status-Code Text
[Header]*

[Entity]?</pre>
			</slide>
			<slide id="http-performance">
				<title>HTTP Performance</title>
				<ul>
					<li>HTTP/1.0 allowed one transaction per connection</li>
					<ul>
						<li>TCP connection setup and teardown are expensive</li>
						<li>TCP's <em>slow start</em> slows down the initial phase of data transfer</li>
						<li>Typical Web pages use between 10-20 resources (HTML + images + CSS + scripts)</li>
						<li>Typically, these resources are stored on the same server</li>
					</ul>
					<li>HTTP/1.1 introduces <em>persistent connections</em></li>
					<ul>
						<li>The TCP connection stays open for some time (10 sec is a popular choice)</li>
						<li>Additional requests to the same server use the same TCP connection</li>
					</ul>
					<li>HTTP/1.1 introduces <em>pipelined connections</em></li>
					<ul>
						<li>Instead of waiting for a response, requests can be queued</li>
						<li>The server responds as fast as possible</li>
						<li>The order may not be changed (there is no sequence number)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP Connection Handling</title>
				<img class="fullsize" src="http-phttp-pipelining.png"/>
			</slide>
			<slide>
				<title>HTTP Access Control</title>
				<ul>
					<li>HTTP servers can <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error">deny access</a> because of access control</li>
					<ul>
						<li><code>401 Unauthorized</code> means the resource is access controlled</li>
						<li><code>403 Forbidden</code> means the resource is inaccessible</li>
						<li><code>405 Method Not Allowed</code> signals a request using the wrong <link href="http-request">request method</link></li>
					</ul>
					<li>Two different approaches to unauthorized access are possible</li>
					<ul>
						<li>Repeat the HTTP request with the proper authentication credentials</li>
						<li>Redirect to a <q>authentication resource</q> for authentication</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP Authentication</title>
				<img class="fullsize" src="http-authentication.gif" title="HTTP Authentication" href="http://java.sun.com/j2ee/1.4/docs/tutorial/doc/Security5.html"/>
			</slide>
			<slide id="http-basic">
				<title>Basic HTTP Authentication</title>
				<ul>
					<li>Authentication is based on <em>authentication realms</em></li>
					<ul>
						<li>A set of resources for which the authentication is required</li>
						<li>An opaque name which is used to signal which login is required</li>
						<li>Username/password often is specific for a given realm</li>
					</ul>
					<li>Users supply username and password through the client</li>
					<ul>
						<li>Sent as <a href="http://en.wikipedia.org/wiki/Base64">Base64</a> encoded <q><code>username:password</code></q> string</li>
						<li>Username and password are <a href="http://www.google.com/search?hl=en&amp;q=base64+decoder"><em>not</em> transmitted securely</a></li>
						<li>Basic authentication should <em>always</em> use HTTPS</li>
					</ul>
					<li>Authorization is handled on the server side</li>
					<pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">HTTP/1.0 401 Unauthorized
WWW-Authenticate: Basic realm="SokEvo"</pre>
					<pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">GET /private/index.html HTTP/1.0
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</pre>
				</ul>
			</slide>
			<slide>
				<title>Repeated Access</title>
				<ul>
					<li>Clients typically access more than one protected resource</li>
					<ul>
						<li>A perfectly stateless client would always request authentication from the user</li>
						<li>Using the <em>realm</em> clients can identify repeated accesses to sets of resources</li>
					</ul>
					<li>Web interactions by default are perfectly stateless</li>
					<ul>
						<li>Each request is completely independent from other requests</li>
						<li>Stateless interactions make the Web loosely coupled and scalable</li>
						<li>Concepts like the <em>realm</em> or cookies introduce <q>state</q></li>
					</ul>
					<li>Clients remember the authentication and replay it automatically</li>
					<ul>
						<li>Browsers provide little control over this feature</li>
						<li><q>Logging out</q> of HTTP authenticated sessions is hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="http2">
				<title>HTTP/2</title>
				<ul>
					<li>Started with the goal of <em>improving browser efficiency</em> (i.e., no API focus)</li>
					<ul>
						<li>Spearheaded by Google with its <a href="https://en.wikipedia.org/wiki/SPDY">SPDY</a> approach for Chrome/Google connectivity</li>
					</ul>
					<li>Maintaining compatibility with HTTP/1.1 as much as possible</li>
					<ul>
						<li>Reuse the existing set of <a href="http://webconcepts.info/concepts/http-method/">request methods</a>, <a href="http://webconcepts.info/concepts/http-status-code/">status codes</a>, and most <a href="http://webconcepts.info/concepts/http-header/">header fields</a></li>
						<li>Allow peers to negotiate use of HTTP/1.1 and HTTP/2.0</li>
					</ul>
					<li>Advanced features for more efficient transmission and communications</li>
					<ul>
						<li>Headers can be compressed and repeated efficiently (binary transmission)</li>
						<li>Fully multiplexed avoiding blocking and other inefficiencies from ordered pipelining</li>
						<li><em>Server push</em> allows servers to send resources prior to getting requests</li>
					</ul>
					<li>Quick uptake through <a href="https://en.wikipedia.org/wiki/Comparison_of_web_browsers#Protocol_support">support in all major browsers</a> and <a href="https://github.com/http2/http2-spec/wiki/Implementations">many servers</a></li>
				</ul>
			</slide>
		</part>
		<part id="mqtt">
			<title>Message Queue Telemetry Transport (MQTT)</title>
			<slide id="mqtt-basics">
				<title>An <q>IoT Funnel Protocol</q></title>
				<img src="mqtt-logo.png" href="https://mqtt.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Initiated by IBM and similar in scope to <link href="amqp">AMQP</link></li>
					<ul>
						<li>Instead of AMQP's exchanges/queues, MQTT uses the concept of a <em>message broker</em></li>
						<li>Message brokers handle subscriptions and distribution to interested clients</li>
					</ul>
					<li>MQTT specifically targets constrained environments</li>
					<ul>
						<li><em>Small code foot print</em> in order to fit onto embedded devices</li>
						<li><em>Limited network bandwidth</em> to work in constrained networks</li>
					</ul>
					<li>Various <em>Quality of Service (QoS)</em> levels allow support for different networks</li>
					<ul>
						<li><em>At most once delivery</em> sends once and does not retry</li>
						<li><em>At least once delivery</em> resends until a confirmation has been received</li>
						<li><em>Exactly once delivery</em> suppresses duplicates on the receiver side</li>
					</ul>
					<li>Mostly, MQTT is used to funnel sensor readings into a collection point</li>
				</ul>
			</slide>
		</part>
		<part id="amqp">
			<title>Advanced Message Queueing Protocol (AMQP)</title>
			<slide id="amqp-basics">
				<title>Asynchronous Enterprise Messaging</title>
				<img src="amqp-logo.jpg" href="https://www.amqp.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Originating in the world of financial institutions</li>
					<ul>
						<li>Typical scenarios are stock trading and other high-volume applications</li>
						<li>Protocols need to be optimized for speed and efficiency</li>
						<li>The goal is to efficiently route message from <em>producers</em> to <em>consumers</em></li>
						<li>An attempt to get out of lock-in of proprietary IBM protocols</li>
					</ul>
					<li>The basic AMQP model has four entities</li>
					<ul>
						<li><em>Producers</em> create messages and then publish them to exchanges</li>
						<li><em>Exchanges</em> receive messages and then distribute them to queue(s) using bindings</li>
						<li><em>Queues</em> store messages so that consumers can receive them</li>
						<li><em>Consumers</em> fetch messages from queues or get them by subscription</li>
					</ul>
					<li>AMQP is intended for large-scale but coordinated environments</li>
					<ul>
						<li>A good fit for settings where application development is centrally controlled</li>
						<li>A bad fit for an open and decentralized setting with management of exchanges/queues</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="xmpp">
			<title>Extensible Messaging Protocol (XMPP)</title>
			<slide id="xmpp-history">
				<title>XMPP History</title>
				<img src="xmpp-logo.png" href="http://xmpp.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Originally named <q>Jabber</q> and intended as an <em>open chat protocol</em></li>
					<ul>
						<li>Most chat systems are using closed and proprietary protocols</li>
						<li>XMPP allows an open ecosystem of chat services and clients to evolve</li>
					</ul>
					<li>Main development within IETF from 2002-2004</li>
					<li>XML was en vogue back then so the protocol is XML-based</li>
					<ul>
						<li>The entire client/server session is one XML document (a <a href="http://tools.ietf.org/html/rfc6120#section-4">stream</a>)</li>
						<li><q>Stream children</q> are XMPP's protocol data units (a <a href="http://tools.ietf.org/html/rfc6120#section-8">stanza</a>)</li>
						<li>XMPP <a href="http://tools.ietf.org/html/rfc6120#section-11">restricts XML</a> so that parsing is a bit simpler</li>
					</ul>
					<li>XMPP is specified as a generic core and an IM protocol</li>
					<ul>
						<li><a href="http://tools.ietf.org/html/rfc6120">XMPP Core (IETF RFC 6120)</a></li>
						<li><a href="http://tools.ietf.org/html/rfc6121">XMPP Instant Messaging and Presence (IETF RFC 6121)</a></li>
						<li><a href="http://tools.ietf.org/html/rfc6122">XMPP Address Format (IETF RFC 6122)</a></li>
					</ul>
				</ul>
			</slide>
			<slide id="xmpp-messaging">
				<title>XMPP Messaging</title>
				<ul>
					<li>XMPP <q>protocol data units</q> are predefined XML elements</li>
					<ul>
						<li>Each of these elements occur as children of the XMPP stream</li>
					</ul>
					<li><code href="https://tools.ietf.org/html/rfc6120#section-8.2.1">&lt;message/></code> is a unidirectional push mechanism (like email)</li>
					<ul>
						<li>Used for sending individual IM messages</li>
					</ul>
					<li><code href="https://tools.ietf.org/html/rfc6120#section-8.2.2">&lt;presence/></code> broadcasts presence information to subscribers</li>
					<ul>
						<li>Used for broadcasting presence updates to authorized subscribers</li>
					</ul>
					<li><code href="https://tools.ietf.org/html/rfc6120#section-8.2.3" title="Info/Query">&lt;iq/></code> is used for bidirectional request/response interactions</li>
					<ul>
						<li>Used for requesting address book information (the <em>roster</em>) from a server</li>
					</ul>
				</ul>
			</slide>
			<slide id="xmpp-messaging-example">
				<title>XMPP Messaging Example</title>
				<listing src="xmpp-session.txt" href="http://tools.ietf.org/html/rfc3920#section-4.8"/>
			</slide>
			<slide id="xmpp-presence">
				<title>Presence Information</title>
				<ul>
					<li><em>Presence information</em> is a critical part of every IM experience</li>
					<ul>
						<li>It is what drives the UX to see who is online and who is offline</li>
						<li>Managing presence is tricky because of scalability issues and privacy</li>
					</ul>
					<li>XMPP handles presence via a <em>subscription model</em></li>
					<ul>
						<li>Users send requests for subscriptions which can be approved or denied</li>
						<li>If a user has been approved to see presence information they have a <em>subscription</em></li>
						<li>Subscription information is managed in a user's <em>roster</em></li>
					</ul>
					<li>XMPP manages a user's contact information in the <em>roster</em></li>
					<ul>
						<li>The roster is managed by the server that manages a user's account</li>
						<li>The roster the <q>IM address book</q> of a user and thus must be access-controlled</li>
					</ul>
				</ul>
			</slide>
			<slide id="xmpp-roster">
				<title>XMPP Roster Example</title>
				<listing src="xmpp-roster.txt" href="http://tools.ietf.org/html/rfc6121#section-2.2"/>
			</slide>
		</part>
		<part id="coap">
			<title>Constrained Application Protocol (CoAP)</title>
		</part>
		<part id="graphql">
			<title>GraphQL</title>
			<slide id="graphql-history">
				<title>GraphQL History</title>
				<img src="graphql-logo.png" href="http://graphql.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Facebook wanted a way for clients to more specifically query content</li>
					<ul>
						<li>Facebook's dataset is a very large interconnected graph</li>
						<li>Clients want specific parts of it depending on various context factors</li>
					</ul>
					<li>GraphQL is not an API but a language for building APIs</li>
					<ul>
						<li>GraphQL defines a type system and a query language that produces JSON results</li>
						<li>The query language can be integrated into an API <a href="http://graphql.org/learn/serving-over-http/">in a variety of ways</a></li>
					</ul>
					<li>GraphQL also has <a href="http://graphql.org/learn/queries/#mutations">mutations</a> as a way to update data</li>
					<ul>
						<li><a href="http://graphql.org/learn/schema/#input-types">Input types</a> look like types but only <em>accept input data</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="graphql-example">
				<title>Simple GraphQL Example</title>
				<table style="width: 90% ; ">
					<tr>
						<td style="vertical-align: top ; ">
							<listing src="graphql-simple-query.graphql" href="https://graphql.org/learn/schema/#type-system"/>
						</td>
						<td style="vertical-align: top ; ">
							<listing src="graphql-simple-response.json" href="https://graphql.org/learn/schema/#type-system"/>
						</td>
					</tr>
				</table>
			</slide>
			<slide id="graphql-types">
				<title>GraphQL Queries and Types</title>
				<table style="width: 90% ; ">
					<tr>
						<td style="vertical-align: top ; ">
							<listing src="graphql-query.graphql" href="https://graphql.org/"/>
						</td>
						<td style="vertical-align: top ; ">
							<listing src="graphql-types.graphql" href="https://graphql.org/"/>
						</td>
					</tr>
				</table>
			</slide>
		</part>
		<part id="odata">
			<title>Open Data Protocol (OData)</title>
		</part>
		<part id="webrtc">
			<title>Web Real Time Communications (WebRTC)</title>
		</part>
		<part id="websocket">
			<title>WebSocket</title>
			<slide id="websocket-history">
				<title>Non-HTTP Connectivity for Browsers</title>
				<img src="websocket-logo.png" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li><code href="https://www.w3.org/TR/XMLHttpRequest2/">XMLHttpRequest</code> kicked off <em>Web 2.0</em> but is limited</li>
					<ul>
						<li>The first time Web apps can access the network to request information</li>
						<li>Allows non-XML content but is limited to HTTP request/response pattern</li>
					</ul>
					<li>WebSocket was initially part of HTML5 but then was spun off</li>
					<li>WebSocket is both an API and a protocol</li>
					<ul>
						<li>W3C publishes the <a href="http://www.w3.org/TR/websockets/">WebSocket API</a></li>
						<li>IETF publishes the <a href="http://webconcepts.info/specs/IETF/RFC/6455">WebSocket Protocol</a></li>
					</ul>
					<li>The WebSocket API allows web apps to open and use WebSocket connections</li>
					<ul>
						<li>Intended for any communications beyond HTTP's request/response pattern</li>
						<li>The most popular pattern are long-lasting connections for live updates</li>
					</ul>
				</ul>
			</slide>
			<slide id="websocket-upgrade">
				<title>HTTP to WebSocket Upgrade</title>
				<listing src="websocket-upgrade-request.txt" href="https://www.websocket.org/aboutwebsocket.html"/>
				<listing src="websocket-upgrade-response.txt" href="https://www.websocket.org/aboutwebsocket.html"/>
			</slide>
			<slide id="websocket-protocol">
				<title>WebSocket Protocol</title>
				<ul>
					<li>WebSocket sends data in <em>frames</em></li>
					<ul>
						<li>Frames are created when WebSocket peers exchange data</li>
						<li>Frames can carry either <em>binary data</em> or <em>text</em></li>
						<li><code href="https://www.w3.org/TR/websockets/#dom-websocket-send">send(data)</code> API automatically decides which frame type to use</li>
					</ul>
					<li><em>Fragmentation</em> allows frames to be of unknown size when started</li>
					<ul>
						<li>Frames can be followed by <em>continuation frames</em> when fragmented</li>
						<li>Fragments have no semantics and are simply a frame transfer mechanism</li>
					</ul>
					<li><em>Control frames</em> are used to communicate WebSocket state</li>
					<ul>
						<li><em>Close</em> frames are used to tear down WebSocket connections</li>
						<li><em>Ping/Pong</em> frames are used as a way to exchange heartbeat information</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="websub">
			<title>WebSub</title>
			<slide id="webhooks">
				<title>WebHooks as a Pattern</title>
			</slide>
		</part>
	</presentation>
	<presentation id="representations">
		<title>Representations</title>
		<toc class="abstract">APIs allows providers and consumers of digital services to communicate. Their language depends on the specific API style and API design, but at some level always is based on representing information that is passed back and forth. These representations can be based on a variety of generic models, which often makes it easier for API creators to design and define the specific language of their API. There are many existing generic models, but for the realm of Internet/Web APIs, <em>Extensible Markup Language (XML)</em>, <em>JavaScript Object Notation (JSON)</em>, and <em>Resource Description Framework (RDF)</em> are the most popular ones.</toc>
		<toc class="resources"><a href="http://www.webconcepts.info/concepts/media-type/" title="Web Concepts: Media Types">Media Types</a>&#160;Â· <a href="http://www.w3.org/TR/xml/" title='Tim Bray, Jean Paoli, C. Michael Sperberg-McQueen, Eve Maler, and FranÃ§ois Yergeau, "Extensible Markup Language (XML) 1.0 (Fifth Edition)", W3C Recommendation REC-xml-20081126, November 2008'>XML</a>&#160;Â· <a href="http://webconcepts.info/specs/IETF/RFC/8259" title='Tim Bray, "The JavaScript Object Notation (JSON) Data Interchange Format", IETF RFC 9259, December 2017'>JSON</a>&#160;Â· <a href="http://webconcepts.info/specs/IETF/RFC/4287" title='Mark Nottingham and Robert Sayre, "The Atom Syndication Format", IETF RFC 4287, December 2005'>Atom</a>&#160;Â· <a href="https://www.w3.org/TR/activitystreams-core/" title='James Snell and Evan Prodromou, "Activity Streams 2.0", W3C Recommendation REC-activitystreams-core-20170523, May 2017'>Activity Streams</a>&#160;Â· <a href="https://jsonfeed.org/">JSON Feed</a>&#160;Â· <a title='Yakov Shafranovich, "Common Format and MIME Type for Comma-Separated Values (CSV) Files", IETF RFC 4180, October 2005' href="http://webconcepts.info/specs/IETF/RFC/4180">RFC 4180</a>&#160;Â· <a title='Erik Wilde, "The &apos;profile&apos; Link Relation Type", Internet RFC 6906, March 2013' href="http://webconcepts.info/specs/IETF/RFC/6906">RFC 6906</a>&#160;Â· <a title='Mark Nottingham and Erik Wilde, "Problem Details for HTTP APIs", Internet RFC 7807, March 2016' href="http://webconcepts.info/specs/IETF/RFC/7807">RFC 7807</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
			<slide id="digital-shadow">
				<title>Digital Shadows</title>
				<ul>
					<li><em>Digital Transformation</em> mirrors/designs/builds a world in the digital realm</li>
					<ul>
						<li>Represent your business (processes) in IT to allow automation</li>
						<li>Business transformation can be (more) easily executed on the IT side</li>
						<li>IT insights and changes directly translate to the business side</li>
					</ul>
					<li>IT always has been <em>modeling</em> and <em>implementing</em> <q>reality</q></li>
					<ul>
						<li><em>Essential complexity</em> is a result of domain complexity</li>
						<li><em>Accidental complexity</em> is a result of implementation complications</li>
					</ul>
				</ul>
			</slide>
			<slide id="resources">
				<title>Resources</title>
				<ul>
					<li>APIs are languages that allow providers and consumers to communicate</li>
					<ul>
						<li>API design is about supporting <em>conversations</em> between peers</li>
						<li><em>Conversations</em> revolve around resource <em>interactions</em></li>
						<li><em>Interactions</em> are about exchanging resource representations</li>
					</ul>
					<li>Resources are anything that the API language should talk about</li>
					<ul>
						<li>Resources can be real-world concepts such as <em>products</em></li>
						<li>Resources can be immaterial concepts such as <em>product descriptions</em></li>
						<li>Resources can be ephemeral concepts such as <em>product orders</em></li>
						<li>Resources can be temporary concepts such as <em>current orders for a product</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="digital-representations">
				<title>Digital Representations</title>
				<ul>
					<li>Resources are concepts on the service side</li>
					<ul>
						<li>They are essential to the service model</li>
						<li>Resources are not directly accessible or available</li>
						<li>Clients only use <em>representations</em> when interacting with services</li>
					</ul>
					<li>Separate shallow <em>service surfaces</em> and deep <em>service models</em></li>
					<ul>
						<li><em>Service surfaces</em> are minimal sets of representations and interactions</li>
						<li><em>Service models</em> are domain models for experts and implementers</li>
					</ul>
					<li>Separating surfaces and models reduces coupling</li>
				</ul>
			</slide>
			<slide id="vocabularies">
				<title>Vocabularies</title>
				<ul>
					<li>Vocabularies define the language for API interactions</li>
					<ul>
						<li>They help to understand the scope and breadth of resource representations</li>
					</ul>
					<li>Shallow and simple vocabularies are essential for loose coupling</li>
					<ul>
						<li>Shallowness avoids unnecessary details and deep model dependencies</li>
						<li>Simplicity allows clients to more easily understand the <em>API language</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="validation">
				<title>Validation</title>
				<ul>
					<li>Validation helps to enforce the proper use of the language</li>
					<ul>
						<li>Vocabularies define the <q>sentences of the API conversation</q></li>
						<li>Good vocabularies define where the language can be extended</li>
						<li>Good vocabularies define what to do when encountering extensions</li>
					</ul>
					<li>Validation only covers the individual representation exchanges</li>
					<ul>
						<li>Most API have constraints which go beyond representation validation</li>
						<li>Validating conversation patterns is beyond representation validation</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="what-how">
			<title>What and How to Represent</title>
			<slide id="representing-what">
				<title>What to Represent</title>
				<ul>
					<li>Representations are determined by the <link href="styles">API style</link></li>
					<ul>
						<li><link href="tunnel-style">Tunnel style</link> represents function calls (names and parameters/results)</li>
						<li><link href="resource-style">Resource style</link> represents resources for CRUD operations</li>
						<li><link href="hypermedia-style">Hypermedia style</link> represents resource for REST interactions</li>
						<li><link href="query-style">Query style</link> represents queries and query results</li>
						<li><link href="event-style">Event-based style</link> represents events that are produced/consumed</li>
					</ul>
					<li>Some styles especially benefit from <q>common representation patterns</q></li>
					<ul>
						<li><em>Tunnel style</em> may benefit from a general schema for function names and parameters</li>
						<li><em>Event-based style</em> may benefit from a general schema for event names and parameters</li>
					</ul>
				</ul>
			</slide>
			<slide id="objects-vs-documents">
				<title>Objects vs. Documents</title>
				<ul>
					<li><em>Objects</em> follow the pattern of many common programming languages</li>
					<ul>
						<li>Objects are structured and allow nesting</li>
						<li>Object members are typed according to an existing set of types</li>
					</ul>
					<li><em>Documents</em> represent semi-structured data</li>
					<ul>
						<li>Documents often have more flexible schemas with more variations</li>
						<li>Document content is a mix of structural elements with textual data</li>
					</ul>
				</ul>
			</slide>
			<slide id="object-example">
				<title>Object Example (JSON)</title>
				<listing src="json-example.json"/>
			</slide>
			<slide id="document-example">
				<title>Document Example (XML)</title>
				<listing src="section.xml"/>
			</slide>
			<slide id="representation-profiles">
				<title>Representation Profiles</title>
				<ul>
					<li>Variations of representations often can serve different purposes</li>
					<ul>
						<li><em>Order forms</em> represent that a customer is ordering goods or services</li>
						<li><em>Anonymized orders</em> may be more safe to pass around for privacy reasons</li>
						<li><em>Enhanced orders</em> may contain additional details for specific order types</li>
					</ul>
					<li>Signalling underlying commonality makes it easy to reuse processing code</li>
					<li>Signalling <em>profiles</em> makes it possible to identify variations</li>
					<ul>
						<li>Profiles can be more constrained than the underlying type (within its limitations)</li>
						<li>Profiles can extend the underlying type (within its limitations)</li>
					</ul>
					<li><a title='Erik Wilde, "The &apos;profile&apos; Link Relation Type", Internet RFC 6906, March 2013' href="http://webconcepts.info/specs/IETF/RFC/6906">RFC 6906</a> defines how to identify profiles and signal their usage</li>
					<ul>
						<li>Profiles must be identify by URI (which serves as an identifier)</li>
						<li>Profiles can be signaled through <code>profile</code> links and/or representation mechanisms</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="xml">
			<title>Extensible Markup Language (XML)</title>
			<slide id="xml-origins">
				<title>XML Origins and History</title>
				<ul>
					<li>Envisioned as a way for sites to publish their data models</li>
					<ul>
						<li>HTML is a simple and mostly presentation-oriented vocabulary</li>
						<li>Web sites should have the freedom to use their domain vocabularies</li>
						<li>CSS/XSLT stylesheets would then be used to render in the browser</li>
					</ul>
					<li>XML was the first open structured data format on the Internet/Web</li>
					<ul>
						<li><em>Web Services</em> took it at ran with it (and little else)</li>
						<li><em>JavaScript</em> replaced the declarative stylesheet dreams</li>
					</ul>
					<li>JSON replaced XML quickly when it became an alternative</li>
					<ul>
						<li>Direct mapping into the data structures of most programming languages</li>
						<li>No baggage of document-oriented design and related technologies (no <em>data binding</em>)</li>
						<li>Better fit for simple <q>on-the-wire</q> models</li>
					</ul>
				</ul>
			</slide>
			<slide id="xml-basics">
				<title>Basic Concepts: Elements and Attributes</title>
				<ul>
					<li>XML Documents have an <em>XML declaration</em> (optional)</li>
					<li>There is exactly one <em>document element</em> (a.k.a. <em>root element</em>)</li>
					<li>Elements may be nested (there is no conceptual limit)</li>
					<ul>
						<li>Elements may be repeated (they can be identified by position)</li>
					</ul>
					<li>Elements are marked up using <em>tags</em></li>
					<ul>
						<li>Most elements have content, surrounded by <em>start</em> and <em>end tags</em></li>
						<li>Empty elements are allowed and may use a special notation</li>
					</ul>
					<li>Elements may have attributes (zero to any number)</li>
					<ul>
						<li>Attributes can only occur once on an element (i.e., they cannot be repeated)</li>
					</ul>
				</ul>
				<listing src="my-first.xml"/>
			</slide>
			<slide id="xml-tree">
				<title>XML is Trees</title>
				<ul>
					<li>Markup is important, but only a notation</li>
					<li>XML documents are trees with different node types</li>
					<ul>
						<li>Node types so far: document, element, attribute, text</li>
					</ul>
					<img style="width : 90% ; margin : 4% ;" src="xml-tree.png" title="XML Document Tree"/>
				</ul>
			</slide>
			<slide id="xml-content-names">
				<title>XML Content and Names</title>
				<p>XML documents can use a wide array of characters. They are defined by <a href="http://www.unicode.org/">Unicode</a>, which in Version 5.0 defines more than 100'000 characters (#100'000 added in 2005).</p>
				<listing src="japanese1.xml"/>
				<listing src="japanese2.xml"/>
			</slide>
			<slide id="xml-elements">
				<title>Elements</title>
				<ul>
					<li>Elements can use a <a href="http://www.w3.org/TR/xml/#NT-Name">wide variety of names</a></li>
					<ul>
						<li>Allowed: <code>&lt;html></code>, <code>&lt;id9832798472></code>, <code>&lt;_></code>, <code>&lt;:></code>, <code>&lt;ããã«ã¡ã¯></code></li>
						<li>Disallowed: leading numbers, spaces, control characters</li>
					</ul>
					<li>Element names usually convey some information about the content</li>
					<ul>
						<li>This is not reliable and highly language-dependent</li>
						<li>It is <em>extremely useful</em> when working with a known vocabulary</li>
						<li>It is <em>potentially harmful</em> when working with an unknown vocabulary</li>
					</ul>
					<li>Elements are the foundation for XML's versatility</li>
					<ul>
						<li>They can be nested (<code>&lt;address>&lt;city>Berkeley&lt;/city>&lt;zip>94709&lt;/zip>â¦</code>)</li>
						<li>They can be repeated (<code>&lt;givenname>Erik&lt;/givenname>&lt;givenname>Thomas&lt;/givenname></code>)</li>
						<li>Their sequence can convey additional information (e.g., given names have a sequence)</li>
					</ul>
				</ul>
			</slide>
			<slide id="xml-attributes">
				<title>Attributes</title>
				<ul>
					<li>Additional information pertaining to elements</li>
					<li>Traditionally, anything that is not considered <q>content</q></li>
					<ul>
						<li>SGML is a document markup language</li>
						<li>XML uses SGML's document-based concepts</li>
						<li>XML has its roots in the document world</li>
					</ul>
					<li>Elements: Content (i.e., Data); Attributes: Metadata</li>
					<li>Documents often distinguish by what is textual content</li>
				</ul>
				<listing src="section.xml" line="12-20"/>
			</slide>
		</part>
		<slide id="mixed-content">
			<title>Mixed Content</title>
			<p>The term <em>Mixed content</em> in XML refers to elements <a href="http://www.w3.org/TR/xml/#sec-mixed-content">which have text content mixed with elements</a>. What these elements do depends on the elements <img style="height : 1em" src="smiley.gif"/>, but the important point is that they are on the same level as the text nodes of the mixed content.</p>
			<pre><![CDATA[<p>The term <em>Mixed content</em> in XML refers to elements <a href="http://www.w3.org/TR/xml/#sec-mixed-content">which have text content mixed with elements</a>. What these elements do depends on the elements <img style="height : 1em" src="smiley.gif"/>, but the important point is that they are on the same level as the text nodes of the mixed content.</p>]]></pre>
			<img style="width : 90% ; margin : 4% ;" src="mixed-content.png" title="XML tree for mixed content"/>
		</slide>
		<slide id="mixed-content-usage">
			<title>Mixed Content Usage</title>
			<ul>
				<li>Database people find mixed content rather irritating</li>
				<ul>
					<li>Cannot be easily mapped to relational structures</li>
					<li>More <em>document-like</em> than <em>data-like</em></li>
					<li>Much harder to optimize for query analysis and query processing</li>
				</ul>
				<li>Document people find mixed content very intriguing</li>
				<ul>
					<li>Textual content can still be used as simple text</li>
					<li>Markup provides additional information for rich text</li>
					<li>Start with a text-only document and use markup to add structure to it</li>
				</ul>
			</ul>
		</slide>
		<slide>
			<title>Semantics</title>
			<ul>
				<li>XML is a language for encoding trees</li>
				<ul>
					<li>Elements and attributes are labeled nodes in this tree</li>
					<li>The labels can be chosen freely by document authors</li>
				</ul>
				<li>The tree's meaning is nothing XML is concerned with</li>
				<ul>
					<li>Peers must have a mutual understanding of the semantics</li>
					<li>XML without mutual understanding is almost useless</li>
					<li>Reverse engineering often is possible, but it is risky and brittle</li>
				</ul>
			</ul>
		</slide>
		<part id="json">
			<title>JavaScript Object Notation (JSON)</title>
			<slide id="json-xml">
				<title>JSON and XML</title>
				<ul>
					<li>JSON replaced XML very quickly because of its simplicity</li>
					<ul>
						<li>JSON is mostly used for <q>on-the-wire</q> models</li>
						<li>XML is intended for document representation, storage, and processing</li>
					</ul>
					<li>JSON's main advantage over XML is its object-orientation</li>
					<ul>
						<li>JSON can be directly mapped into most language's native data structures</li>
						<li>XML needs tree model processing or some form of data-binding</li>
					</ul>
					<li>JSON has no notion of vocabularies or namespaces</li>
					<ul>
						<li>XML's complexity and complications are not needed in most cases</li>
						<li>Composing JSON vocabularies is much more brittle than in XML</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-basics">
				<title>JSON Basics</title>
				<ul>
					<li>JSON is the <q>data structure part</q> of JavaScript</li>
					<ul>
						<li>Perfect match for JavaScript code consuming JSON data</li>
						<li>Very good match for many other languages with structured data types</li>
					</ul>
					<li>JSON is good for <em>data-on-the-wire</em> and not so much for complex models</li>
					<li>JSON has found its way into many typical IT components</li>
					<ul>
						<li>Some databases use JSON as their native data model (<a href="https://www.mongodb.com/">MongoDB</a>)</li>
						<li>Many databases have added JSON to their data type support</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-structure">
				<title>JSON Structure</title>
				<ul>
					<li>JSON has a small set of data types</li>
					<ul>
						<li><code>object</code>s are a set of name/value pairs called <em>members</em></li>
						<li><code>array</code>s are a sequence of potentially heterogeneous values</li>
						<li><code>number</code>s use regular decimal notation with an optional exponent</li>
						<li><code>string</code>s are quoted with escape for special characters and Unicode</li>
						<li><code>boolean</code>s use the two values <code>true</code> and <code>false</code></li>
					</ul>
					<li>Objects and arrays can be nested as deeply as required</li>
				</ul>
			</slide>
			<slide id="json-example">
				<title>JSON Example</title>
				<listing src="json-example.json"/>
			</slide>
			<slide id="json-example-xml-1">
				<title>JSON Example in XML: Variation 1</title>
				<listing src="json-example-1.xml"/>
			</slide>
			<slide id="json-example-xml-2">
				<title>JSON Example in XML: Variation 2</title>
				<listing src="json-example-2.xml"/>
			</slide>
			<slide id="ijson">
				<title>JSON and I-JSON</title>
				<ul>
					<li>Plain JSON is defined by <a href="http://webconcepts.info/specs/IETF/RFC/8259" title='Tim Bray, "The JavaScript Object Notation (JSON) Data Interchange Format", IETF RFC 8259, December 2017'>RFC 8259</a></li>
					<li>I-JSON constrains JSON and is defined by <a href="http://tools.ietf.org/html/rfc7493">RFC 7493</a></li>
					<li>I-JSON defines some common-sense conventions around JSON</li>
					<ul>
						<li>The only allowed character encoding is UTF-8</li>
						<li>No numbers exceeding the limits of IEEE 754 double precision</li>
						<li>No members with duplicate names in objects</li>
						<li>Try to avoid top-level constructs other than array/object</li>
						<li>For time/date values use ISO 8601 with timezone and trailing seconds</li>
						<li>Binary data should be encoded using <code href="http://tools.ietf.org/html/rfc4648#section-5">base64url</code></li>
					</ul>
					<li>Most developers instinctively avoid features disallowed by I-JSON</li>
				</ul>
			</slide>
		</part>
		<part id="more-representation">
			<title>More Representation Formats</title>
			<slide id="collection-formats">
				<title>Collections as a Pattern</title>
				<ul>
					<li>Collections and their management is a common design pattern</li>
					<ul>
						<li>Often some form of similarity/commonality across collection members</li>
					</ul>
					<li>Re-inventing collection formats might be a good design choice</li>
					<ul>
						<li><a href="http://webconcepts.info/specs/IETF/RFC/4287" title='Mark Nottingham and Robert Sayre, "The Atom Syndication Format", IETF RFC 4287, December 2005'>Atom</a> is XML-based and has <a href="http://dret.typepad.com/dretblog/atom-landscape.html">many additional features</a></li>
						<li><a href="https://jsonfeed.org/">JSON Feed</a> is a JSON-based variant of Atom</li>
						<li><a href="https://www.w3.org/TR/activitystreams-core/">Activity Streams</a> focuses on activity publishing/syndication</li>
					</ul>
				</ul>
			</slide>
			<slide id="csv">
				<title>Comma-Separated Values (CSV)</title>
				<ul>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/4180">RFC 4180</a> defines a textual format for <q>spreadsheet data</q></li>
					<li>CSV has been used for a long time, but some of the details were solved differently</li>
					<li>Defining a media type makes it easier for implementations to know what to expect</li>
					<ul>
						<li>The CSV registration not only registers the type, but also defines it</li>
					</ul>
					<li>CSV is not overly complex, but some issues have to be solved</li>
					<ul>
						<li>How to separate lines (CRLF)</li>
						<li>How to end the file (CRLF is allowed but optional)</li>
						<li>Are headers allowed (yes, but they are not marked as such)</li>
						<li>May different lines use different numbers of fields (no)</li>
						<li>Are spaces significant (yes)</li>
						<li>Are quotes significant (no, they are delimiters, so quotes as values must be escaped)</li>
						<li>How to treat fields with CRLF, commas, or quotes (enclose the value in quotes)</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-problem">
				<title>HTTP Problem Details</title>
				<ul>
					<li><a href="http://webconcepts.info/concepts/http-status-code/">HTTP status codes</a> are useful but minimalistic</li>
					<ul>
						<li>Their well-defined semantics allow intermediaries to act on them</li>
						<li>Servers may want to convey additional information with them</li>
					</ul>
					<li>APIs may include <em>problem details</em> as part of their representation designs</li>
					<ul>
						<li>Using a standard reduces the design work on the server side</li>
						<li>Using a standard allows developers to more easily understand the design</li>
						<li>Using a standard allows problem details analysis across APIs</li>
					</ul>
					<li><a title='Mark Nottingham and Erik Wilde, "Problem Details for HTTP APIs", Internet RFC 7807, March 2016' href="http://webconcepts.info/specs/IETF/RFC/7807">RFC 7807</a> defines a JSON-centric model for problem details</li>
					<ul>
						<li><code>application/problem+json</code> is a JSON-based representation of the problem detail model</li>
						<li><code>application/problem+xml</code> is an XML-based representation of the problem detail model</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-problem-json">
				<title>HTTP Problem: JSON</title>
				<listing href="https://tools.ietf.org/html/rfc7807#section-3" src="http-problem.json"/>
			</slide>
			<slide id="http-problem-xml">
				<title>HTTP Problem: XML</title>
				<listing href="https://tools.ietf.org/html/rfc7807#appendix-A" src="http-problem.xml"/>
			</slide>
		</part>
		<part id="representation-conclusions">
			<title>Conclusions</title>
			<slide id="language-matters">
				<title>Language Matters</title>
				<ul>
					<li>APIs are languages</li>
					<li>Representations are language sentences</li>
					<li>Design and document the language of each API</li>
					<li>Choosing a metamodel is a question of API, context, and taste</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="rest">
		<title short="REST">Representational State Transfer (REST)</title>
		<toc class="abstract"><em>Representational State Transfer (REST)</em> is defined as an <em>architectural style</em>, which means that it is not a concrete systems architecture, but instead a set of constraints that are applied when designing a systems architecture. We briefly discuss these constraints, but then focus on explaining how the Web is one such systems architecture that implements REST. In particular, the mechanisms of the <em>Uniform Resource Identifiers (URIs)</em>, the <em>Hypertext Transfer Protocol (HTTP)</em>, media types, and markup languages such as the <em>Hypertext Markup Language (HTML)</em> and the <em>Extensible Markup Language (XML)</em>. We also introduce <em>Atom</em> and the <em>Atom Publishing Protocol (AtomPub)</em> as two established ways on how RESTful services are already provided and used on today's Web.</toc>
		<toc class="resources"><a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" title="Roy Thomas Fielding, 'Architectural Styles and the Design of Network-based Software Architectures', Ph.D. Thesis, University of California, Irvine, Irvine, California, 2000">Fielding&#160;Dissertation</a>&#160;Â· <a href="http://portal.acm.org/citation.cfm?doid=337180.337228" title="Roy Thomas Fielding and Richard N. Taylor, 'Principled Design of the Modern Web Architecture', ACM Transactions on Internet Technology, 2(2):115-150, May 2002">ACM&#160;Transactions</a></toc>
		<slide>
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="layers">
			<title>Abstraction Layers</title>
			<slide>
				<title>What is REST?</title>
				<ul>
					<li>Defining <em>Representational State Transfer</em>: 3 popular definitions</li>
				</ul>
				<ol>
					<li>An <em>architectural style</em> for building loosely coupled systems</li>
					<ul>
						<li>Defined by a set of general <em>constraints</em> (<em>principles</em>)</li>
						<li>The Web (URI/HTTP/HTML/XML) is an <em>instance</em> of this style</li>
					</ul>
					<li><em>The Web used correctly</em> (i.e., not using the Web as transport)</li>
					<ul>
						<li>HTTP is built according to RESTful principles</li>
						<li>Services are built on top of Web standards without misusing them</li>
						<li>Most importantly, HTTP is an <em>application protocol</em> (not a <em>transport protocol</em>)</li>
					</ul>
					<li>Anything that <em>uses HTTP and XML</em> (XML without SOAP)</li>
					<ul>
						<li>XML-RPC was the first approach for this</li>
						<li>Violates REST because there is no uniform interface</li>
					</ul>
				</ol>
			</slide>
			<slide>
				<title>What is Architecture?</title>
				<ul>
					<li>What is the <q>A</q> in SOA?</li>
					<li>Architecture is <em>constraint-based design</em></li>
					<ul>
						<li><em>Constraints</em> are derived from <em>requirements</em> (<q>contextualized requirements</q>)</li>
						<li>Design without constraints probably is <em>art</em></li>
					</ul>
					<li>Constraints can be derived from a wide variety of sources</li>
					<ul>
						<li>Technical infrastructure (current landscape and expected developments)</li>
						<li>Business considerations (current landscape and expected developments)</li>
						<li>Time horizon (short-term vs. long-term requirements)</li>
						<li>Existing architecture</li>
						<li>Scalability</li>
						<li>Performance (based on performance requirements and definitions)</li>
						<li>Cost (development, deployment, maintenance)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Architecture Examples</title>
				<table width="95%">
					<tr>
						<td><img style="width : 90% ; margin : 2% ; " src="map-newyork.png" title="New York City" href="http://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;geocode=&amp;q=new+york,+ny&amp;sll=37.875819,-122.265515&amp;sspn=0.015108,0.02341&amp;ie=UTF8&amp;ll=40.75909,-73.986912&amp;spn=0.110003,0.187283&amp;z=13&amp;iwloc=A"/></td>
						<td><img style="width : 90% ; margin : 2% ; " src="map-luebeck.png" title="LÃ¼beck" href="http://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;geocode=&amp;q=luebeck,+germanyamp;&amp;sll=40.75909,-73.986912&amp;sspn=0.110003,0.187283&amp;ie=UTF8&amp;ll=53.870091,10.687551&amp;spn=0.042814,0.093641&amp;z=14&amp;iwloc=A"/></td>
					</tr>
				</table>
			</slide>
			<slide>
				<title>Architecture vs. Design</title>
				<img class="fullsize" src="rooftop-pool.jpg" title="Nice Design, Expensive Architecture" href="http://www.starwoodhotels.com/luxury/property/overview/index.html?propertyID=3321"/>
			</slide>
			<slide id="architectural-style">
				<title>Architectural Styles</title>
				<ul>
					<li>Architectural Style vs. Architecture</li>
					<ul>
						<li>Architectural Style: General principles informing the creation of an architecture</li>
						<li>Architecture: Designing a solution to a problem according to given constraints</li>
						<li>Architectural styles <em>inform</em> and <em>guide</em> the creation of architectures</li>
					</ul>
				</ul>
				<table width="95%">
					<tr>
						<td>
							<img style="width : 90% ; margin : 2% ; " src="louvre.jpg" title="Louvre Interior"/>
							<ul>
								<li>Architecture: <a href="http://en.wikipedia.org/wiki/Louvre">Louvre</a></li>
								<li>Architectural Style: <a href="http://en.wikipedia.org/wiki/Baroque_architecture">Baroque</a></li>
							</ul>
						</td>
						<td>
							<img style="width : 90% ; margin : 2% ; " src="savoye.jpg" title="Villa Savoye Interior"/>
							<ul>
								<li>Architecture: <a href="http://en.wikipedia.org/wiki/Villa_Savoye">Villa Savoye</a></li>
								<li>Architectural Style: <a href="http://en.wikipedia.org/wiki/International_Style_(architecture)">International Style</a></li>
							</ul>
						</td>
					</tr>
				</table>
			</slide>
			<slide id="rest-is-a-style">
				<title>REST is not an Architecture</title>
				<ul>
					<li>REST is an architectural style</li>
					<ul>
						<li>Distilled from the Web <em>a posteriori</em></li>
						<li>Some of the Web's standards and practices are not perfectly RESTful</li>
					</ul>
					<li>The Web is an information system following REST</li>
					<li>It is possible to design other RESTful information systems</li>
					<ul>
						<li>Different uniform interfaces (not using HTTP's methods)</li>
						<li>Different representations (not using HTML or XML)</li>
						<li>Different identification (not using URIs)</li>
					</ul>
				</ul>
			</slide>
			<slide id="soa-is-a-style">
				<title>SOA is not an Architecture</title>
				<ul>
					<li>SOA is more a style than an architecture</li>
					<li>SOA's biggest problem: What is a <em>service</em>?</li>
					<ul>
						<li>Is a service something that is described by RPC-like custom functions?</li>
						<li>Is a service exposed through a uniform interface?</li>
					</ul>
					<li><a href="http://www.oasis-open.org/">OASIS</a> has a <a href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=soa-rm">SOA Reference Model TC</a></li>
					<ul>
						<li>The <a href="http://docs.oasis-open.org/soa-rm/v1.0/soa-rm.pdf">Reference Model</a> defines a <q>service</q> as <q>a mechanism to enable access to one or more capabilities, where the access is provided using a prescribed interface and is exercised consistent with constraints and policies as specified by the service description.</q></li>
						<li>The <a href="http://docs.oasis-open.org/soa-rm/soa-ra/v1.0/soa-ra-pr-01.pdf">Reference Architecture</a> describes a WS-* oriented world view</li>
					</ul>
					<li>SOA can be done RESTfully or not</li>
					<ul>
						<li>Whether a RESTful approach makes sense depends on the constraints</li>
						<li>If the constraints allow REST, there should be a good reason for ignoring REST</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="rest-definition">
			<title>REST: The Definition</title>
			<slide>
				<title>The REST Architectural Style</title>
				<ul>
					<li>A set of constraints that inform an architecture</li>
				</ul>
				<ol>
					<li><link href="identification-constraint"/></li>
					<li><link href="interface-constraint"/></li>
					<li><link href="self-describing-constraint"/></li>
					<li><link href="hypermedia-constraint"/></li>
					<li><link href="stateless-constraint"/></li>
				</ol>
				<ul>
					<li>Claims: scalability, mashup-ability, usability, accessibility</li>
				</ul>
			</slide>
			<slide id="identification-constraint">
				<title>Resource Identification</title>
				<ul>
					<li>Name everything that you want to talk about</li>
					<li><q>Thing</q> in this case should refer to <em>anything</em></li>
					<ul>
						<li><em>Products</em> in an online shop</li>
						<li><em>Categories</em> that are used for grouping products</li>
						<li><em>Customers</em> that are expected to buy products</li>
						<li><em>Shopping carts</em> where customers collect products</li>
					</ul>
					<li><em>Application state</em> also is represented as a resource</li>
					<ul>
						<li><em>Next</em> links on multi-page submission processes</li>
						<li><em>Paged results</em> with URIs identifying following pages</li>
					</ul>
				</ul>
			</slide>
			<slide id="interface-constraint">
				<title>Uniform Interface</title>
				<ul>
					<li>The same small set of operations applies to <link href="identification-constraint">everything</link></li>
					<li>A small set of <em>verbs</em> applied to a large set of <em>nouns</em></li>
					<ul>
						<li>Verbs are universal and not invented on a per-application base</li>
						<li>If many applications need new verbs, the uniform interface can be extended</li>
						<li>Natural language works in the same way (new verbs rarely enter language)</li>
					</ul>
					<li>Identify operations that are candidates for optimization</li>
					<ul>
						<li><code>GET</code> and <code>HEAD</code> are <em>safe operations</em></li>
						<li><code>PUT</code> and <code>DELETE</code> are <em>idempotent operations</em></li>
						<li><code>POST</code> is the catch-all and can have side-effects</li>
					</ul>
					<li>Build functionality based on useful properties of these operations</li>
				</ul>
			</slide>
			<slide id="self-describing-constraint">
				<title>Self-Describing Messages</title>
				<ul>
					<li>Resources are abstract entities (they cannot be used <em>per se</em>)</li>
					<ul>
						<li><link href="identification-constraint"/> guarantees that they are clearly identified</li>
						<li>They are accessed through a <link href="interface-constraint"/></li>
					</ul>
					<li>Resources are accessed using <em>resource representations</em></li>
					<ul>
						<li>Resource representations are sufficient to represent a resource</li>
						<li>It is communicated which kind of representation is used</li>
						<li>Representation formats can be negotiated between peers</li>
					</ul>
					<li>Resource representations can be based on different constraints</li>
					<ul>
						<li>XML and JSON can represent the same model for different users</li>
						<li>Whatever the representation is, it must <link href="hypermedia-constraint">support links</link></li>
					</ul>
				</ul>
			</slide>
			<slide id="hypermedia-constraint">
				<title>Hypermedia Driving Application State</title>
				<ul>
					<li><link href="self-describing-constraint">Resource representations</link> contain links to <link href="identification-constraint">identified resources</link></li>
					<li>Resources and state can be used by navigating links</li>
					<ul>
						<li>Links make interconnected resources navigable</li>
						<li>Without navigation, identifying new resources is service-specific</li>
					</ul>
					<li>RESTful applications <em>navigate</em> instead of <em>calling</em></li>
					<ul>
						<li><link href="self-describing-constraint">representations</link> contain information about possible traversals</li>
						<li>The application navigates to the next resource depending on link semantics</li>
						<li>Navigation can be delegated since all links use <link href="identification-constraint">identifiers</link></li>
					</ul>
				</ul>
			</slide>
			<slide id="stateless-constraint">
				<title>Stateless Interactions</title>
				<ul>
					<li>This constraint does not say <q>Stateless Applications</q>!</li>
					<ul>
						<li>For many RESTful applications, state is an essential part</li>
						<li>The idea of REST is to avoid long-lasting transactions <em>in applications</em></li>
					</ul>
					<li>Statelessness means to move state to clients or resources</li>
					<ul>
						<li>The most important consequence: avoid state in server-side applications</li>
					</ul>
					<li><em>Resource state</em> is managed on the server</li>
					<ul>
						<li>It is the same for every client working with the service</li>
						<li>When a client changes resource state other clients see this change as well</li>
					</ul>
					<li><em>Client state</em> is managed on the client</li>
					<ul>
						<li>It is specific for a client and thus has to be maintained by each client</li>
						<li>It may affect <em>access</em> to server resources, but not the resources themselves</li>
					</ul>
					<li><em>Security issues</em> usually are important with client state</li>
					<ul>
						<li>Clients can (try to) cheat by lying about their state</li>
						<li>Keeping client state on the server is expensive (but may be worth the price)</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="web-arch">
			<title>Web Architecture</title>
			<slide>
				<title>What is the Web?</title>
				<ul>
					<li>Web = URI + HTTP + ( HTML | XML )</li>
					<li>RESTful Web uses HTTP methods as the uniform interface</li>
					<ul>
						<li>Non-RESTful Web uses <code>GET</code>/<code>POST</code> and tunneled RPC calls</li>
						<li>A <q>different RESTful Web</q> uses <em>Web Distributed Authoring and Versioning (WebDAV)</em></li>
					</ul>
					<li>Imagine your application being used in <q>10 browsers</q></li>
					<ul>
						<li>Resources to interact with should be <link href="identification-constraint">identified</link> and <link href="hypermedia-constraint">linked</link></li>
						<li>A user's preferred font size could be modeled as client state</li>
						<li>What about an access count associated with an API key?</li>
					</ul>
					<li>Imagine your application being used in <q>10 browser tabs</q></li>
					<ul>
						<li>No difference as long as client state is representation-based</li>
						<li>Cookies are shared across browser windows (different <q>client scope</q>)</li>
					</ul>
				</ul>
			</slide>
			<part id="uri">
				<title short="URI">Uniform Resource Identifier (URI)</title>
				<slide>
					<title>Identifying Resources on the Web</title>
					<ul>
						<li>Essential for implementing a <link href="identification-constraint"/></li>
						<li>URIs are human-readable universal identifiers for <q>stuff</q></li>
						<ul>
							<li>Many identification schemes are not human-readable (binary or hex strings)</li>
							<li>Many RPC-based systems do not have universally identified objects</li>
						</ul>
						<li>Making every thing a universally unique identified thing is important</li>
						<ul>
							<li>It removes the necessity to <em>scope</em> non-universal identifiers</li>
							<li>It allows to talk about all things in exactly the same way</li>
						</ul>
					</ul>
				</slide>
				<slide>
					<title>URI Schemes</title>
					<pre>URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]</pre>
					<ul>
						<li>URIs in their general case are very simple</li>
						<ul>
							<li>The scheme identifies how resources are identified</li>
							<li>The identification may be hierarchical or non-hierarchical</li>
						</ul>
						<li>Many URI schemes are hierarchical</li>
						<ul>
							<li>It is then possible to use relative URIs such as in <elem>a href="../"</elem></li>
							<li>The slash character is not just a character, in URIs it has semantics</li>
						</ul>
					</ul>
					<blockquote>[â¦] the URI syntax is a federated and extensible naming system wherein each scheme's specification may further restrict the syntax and semantics of identifiers using that scheme.</blockquote>
					<p class="quotenote"><a href="http://dret.net/rfc-index/reference/RFC3986"><q>Uniform Resource Identifier (URI): Generic Syntax</q>, RFC 3986, January 2005</a></p>
				</slide>
				<slide id="uri-query">
					<title>Query Information</title>
					<ul>
						<li>Query components specify additional information</li>
						<ul>
							<li>It is non-hierarchical information further identifying the resource</li>
							<li>In most cases, it can be regarded as <q>input</q> to the resource</li>
						</ul>
						<li>Query components often influence caching</li>
						<ul>
							<li>Successful <code>GET</code>/<code>HEAD</code> requests may be cached</li>
							<li>Only cache query string URIs when explicitly requested (<code>Expires</code>/<code>Cache-Control</code>)</li>
						</ul>
					</ul>
					<blockquote>The query component contains non-hierarchical data that, along with data in the path component [â¦], serves to identify a resource within the scope of the URI's scheme and naming authority [â¦].</blockquote>
					<p class="quotenote"><a href="http://dret.net/rfc-index/reference/RFC3986"><q>Uniform Resource Identifier (URI): Generic Syntax</q>, RFC 3986, January 2005</a></p>
				</slide>
				<slide>
					<title>Processing URIs</title>
					<ul>
						<li>Processing URIs is not as trivial as it may seem</li>
						<ul>
							<li>Escaping and normalization rules are non-trivial</li>
							<li>Many implementations are broken</li>
							<li>Complain about broken implementations</li>
							<li>Even more complicated when processing an <em>Internationalized Resource Identifier (IRI)</em></li>
						</ul>
						<li>URIs are not just strings</li>
						<ul>
							<li>URIs are strings with a considerable set of rules attached to them</li>
							<li>Implementing all these rules is non-trivial</li>
							<li>Implementing all these rules is crucial</li>
							<li>Application development environments provide functions for URI handling</li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="http-rest">
				<title short="http">Hypertext Transfer Protocol (HTTP)</title>
				<slide>
					<title>How RESTful Applications Talk</title>
					<ul>
						<li>Essential for implementing a <link href="interface-constraint"/></li>
						<ul>
							<li>HTTP defines a small set of methods for acting on URI-identified resources</li>
						</ul>
						<li>Misusing HTTP turns application into non-RESTful applications</li>
						<ul>
							<li>They lose the capability to be used just by adhering to REST principles</li>
							<li>It's a bad sign when you think you need an interface description language</li>
						</ul>
						<li>Extending HTTP turns applications into more specialized RESTful applications</li>
						<ul>
							<li>May be appropriate when more operations are required</li>
							<li>Seriously reduces the number of potential clients</li>
						</ul>
					</ul>
				</slide>
				<slide id="http-methods">
					<title>HTTP Methods</title>
					<ul>
						<li><em>Safe methods</em> can be ignored or repeated without side-effects</li>
						<ul>
							<li>Arithmetically safe: <code>41 Ã 1 Ã 1 Ã 1 Ã 1 â¦</code></li>
							<li>In practice, <q>without side-effects</q> means <q>without relevant side-effects</q></li>
						</ul>
						<li><em>Idempotent methods</em> can be repeated without side-effects</li>
						<ul>
							<li>Arithmetically idempotent: <code>41 Ã 0 Ã 0 Ã 0 Ã 0 â¦</code></li>
							<li>In practice, <q>without side-effects</q> means <q>without relevant side-effects</q></li>
						</ul>
						<li>Unsafe and non-idempotent methods should be treated with care</li>
						<li>HTTP has two main <em>safe methods</em>: <code>GET HEAD</code></li>
						<li>HTTP has two main <em>idempotent methods</em>: <code>PUT DELETE</code></li>
						<li>HTTP has one main <em>overload method</em>: <code>POST</code></li>
					</ul>
				</slide>
				<slide id="cookies">
					<title>Cookies</title>
					<ul>
						<li>Cookies are <em>client site state bound to a domain</em></li>
						<ul>
							<li>They are convenient because they work <em>without having to use a representation</em></li>
							<li>They are inconvenient because they are <em>not embedded in representations</em></li>
						</ul>
						<li>Cookies are managed by the client</li>
						<ul>
							<li>They are shared across browser tabs</li>
							<li>They are not shared across browsers used by the same user</li>
							<li>Essentially, the <em>client</em> model of cookies is a bit outdated</li>
						</ul>
						<li>Two major things to look out for when using cookies:</li>
						<ol>
							<li><em>Session IDs</em> are <em>application state</em> (i.e., non-resource state)</li>
							<li>Cookies break the back button (requests contain a <q>URI/cookie</q> combo)</li>
						</ol>
						<li>The ideal RESTful cookie is never sent to the server</li>
						<ul>
							<li>Cookies as <em>persistent data storage on the client</em></li>
							<li>Interactions with the server are only using URIs and representations</li>
						</ul>
					</ul>
				</slide>
			</part>
		</part>
		<part id="representations">
			<title>Representations</title>
			<part id="documents">
				<title>Structured Documents</title>
				<slide>
					<title>What is identified by a URI?</title>
					<ul>
						<li>Essential for implementing <link href="self-describing-constraint"/></li>
						<ul>
							<li>Also should provide support for <link href="hypermedia-constraint"/></li>
						</ul>
						<li><link href="identification-constraint"/> only talks about an <em>abstract resource</em></li>
						<ul>
							<li>Resources are never exchanged or otherwise processed directly</li>
							<li>All interactions use <em>resource representations</em></li>
						</ul>
						<li>Representations depend on various factors</li>
						<ul>
							<li>The nature of the resource</li>
							<li>The capabilities of the server</li>
							<li>The capabilities or the communications medium</li>
							<li>The capabilities of the client</li>
							<li>Requirements and constraints from the application scenario</li>
							<li>Negotiations to figure out the <q>best</q> representation</li>
						</ul>
						<li>Representations are identified by <a href="http://dret.net/lectures/web-fall08/mediatypes"><em>media type</em> (sometimes called <em>MIME type</em>)</a></li>
					</ul>
				</slide>
				<slide id="rest-xml">
					<title short="XML">Extensible Markup Language (XML)</title>
					<ul>
						<li>The language that started it all</li>
						<ul>
							<li>Created as a streamlined version of SGML</li>
							<li>Took over as the first universal language for structured data</li>
						</ul>
						<li>XML is a metalanguage (a language for representing languages)</li>
						<ul>
							<li>Many domain-specific languages are defined as XML vocabularies</li>
							<li>Some metalanguages use XML syntax (<link href="rdf">RDF</link> is a popular example)</li>
						</ul>
						<li>XML is only syntax and has almost zero semantics</li>
						<ul>
							<li>Very minimal built-in semantics (language identification, IDs, relative URIs)</li>
							<li>Semantics are entirely left to the XML vocabularies</li>
						</ul>
						<li>XML is built around a tree model</li>
						<ul>
							<li>Each XML document is a tree and thus limited in structure</li>
							<li>RESTful XML introduces hypermedia to turn XML data into a graph</li>
						</ul>
					</ul>
				</slide>
				<slide id="rest-json">
					<title short="JSON">JavaScript Object Notation (JSON)</title>
					<ul>
						<li>The <code>XMLHttpRequest</code> API has been built for requesting XML via HTTP</li>
						<ul>
							<li>This is useful because XML is the most popular data format</li>
							<li>All requested data has to be processed by using XML access methods in JavaScript</li>
						</ul>
						<li>JavaScript does not have XML as its internal data model</li>
						<ul>
							<li>The XML received via <code>XMLHttpRequest</code> has to be parsed into a DOM tree</li>
							<li>DOM access in JavaScript is inconvenient for complex operations</li>
							<li>Alternatively, the XML can be mapped to JavaScript objects (also requires parsing)</li>
						</ul>
						<li><em>JavaScript Object Notation (JSON)</em> encodes data as JavaScript objects</li>
						<ul>
							<li>More efficient for the consumer if the consumer is written in JavaScript</li>
							<li>This turns the generally usable XML service into a JavaScript-oriented service</li>
							<li>For large-scale applications, it might make sense to provide XML and JSON</li>
							<li>This can be negotiated with <em>HTTP content negotiation</em></li>
						</ul>
					</ul>
				</slide>
				<slide id="rest-rdf">
					<title short="RDF">Resource Description Framework (RDF)</title>
					<ul>
						<li>Developed around the same time as XML was developed</li>
						<ul>
							<li>Based on the idea of machine-readable/understandable semantics</li>
							<li>Builds the <em>Semantic Web</em> as a parallel universe on top of the Web</li>
						</ul>
						<li>RDF uses URIs for <em>naming things</em></li>
						<ul>
							<li>RDF's data model is based on (URI, property, value) triples</li>
							<li>Triples are combined and inference is used to produce a graph</li>
						</ul>
						<li>RDF is a metalanguage built on the triple-based data model</li>
						<ul>
							<li>RDF has a number of syntaxes (one of them is <link href="xml">XML</link>-based)</li>
							<li>RDF introduces a number of schema languages (also referred to as <em>ontology languages</em>)</li>
						</ul>
					</ul>
				</slide>
				<slide>
					<title>Atom</title>
					<ul>
						<li>A language for representing <em>syndication feeds</em></li>
						<li>More modest in its goal than <link href="xml">XML</link> or <link href="rdf">RDF</link></li>
						<ul>
							<li>Models feeds as a sets of entries with associated metadata</li>
							<li>Uses an XML vocabulary for representing the data model</li>
							<li>Uses <em>links</em> for expressing relationships in the data model</li>
						</ul>
						<li>Interesting mix of <em>base semantics</em> and <em>extensibility</em></li>
					</ul>
				</slide>
			</part>
			<part id="links">
				<title>Linked Documents</title>
				<slide>
					<title>Making Resources Navigable</title>
					<ul>
						<li>Essential for using <link href="hypermedia-constraint"/></li>
						<li>RPC-oriented systems need to expose the available functions</li>
						<ul>
							<li>Functions are essential for interacting with a service</li>
							<li>Introspection or interface descriptions make functions discoverable</li>
						</ul>
						<li>RESTful systems use a <link href="interface-constraint"/></li>
						<ul>
							<li>No need to learn about functions</li>
							<li>But how to find resources?</li>
						</ul>
						<ol>
							<li>Find them by following links from other resources</li>
							<li>Learn about them by using <link href="uri-templates"/></li>
							<li>Understand them by recognizing representations</li>
						</ol>
					</ul>
				</slide>
				<slide id="uri-templates">
					<title>URI Templates</title>
					<ul>
						<li>REST does not care about URI details</li>
						<li>Apart from the <uri>scheme</uri>, URIs should be semantically opaque</li>
						<ul>
							<li>Media types should not guessed by URI (breaks content negotiation)</li>
							<li>Semantics should not be inferred from inspecting URIs</li>
							<li>URIs should not be guessed based on previously encountered URIs</li>
						</ul>
						<li><q>URI hacking</q> on the Web works and can be useful</li>
						<ul>
							<li>Firefox <a href="http://dret.typepad.com/dretblog/2008/07/go-up.html">Go Up</a> allows easy navigation up one level</li>
							<li>Good URIs and bad UIs sometimes turn the address bar into a useful UI</li>
						</ul>
						<li>Technically speaking, URI templates are not required by REST</li>
						<ul>
							<li>Practically speaking, URI templates are a useful best practice</li>
							<li>All URI navigable resources should also be navigable using representations</li>
						</ul>
					</ul>
				</slide>
			</part>
		</part>
		<part id="state">
			<title>State</title>
			<slide>
				<title>State Management on the Web</title>
				<ul>
					<li>Essential for supporting <link href="stateless-constraint"/></li>
					<li><link href="cookies"/> are a frequently used mechanism for managing state</li>
					<ul>
						<li>In many cases used for maintaining session state (login/logout)</li>
						<li>More convenient than having to embed the state in every representation</li>
						<li>Some Web frameworks switch automatically between cookies and URI rewriting</li>
					</ul>
					<li>Cookies have two interesting client-side side-effects</li>
					<ul>
						<li>They are stored persistently independent from any representation</li>
						<li>They are <q>shared state</q> within the context of one browser</li>
					</ul>
					<li>Session ID cookies require expensive server-side tracking</li>
					<ul>
						<li>Not associated with any resource and thus potentially global</li>
						<li>Load-balancing must be cookie-sensitive or cookies must be global</li>
					</ul>
					<li><em>Resource-based state</em> allows RESTful service extensions</li>
				</ul>
			</slide>
			<slide id="client-state">
				<title>Client State</title>
				<img class="fullsize" src="web-app-client-state.png" title="State in HTML or HTTP"/>
			</slide>
			<slide id="app-server-state">
				<title>State in the Server Application</title>
				<img class="fullsize" src="web-app-server-state.png" title="State in the Server Application"/>
			</slide>
			<slide id="resource-state">
				<title>Resource State</title>
				<img class="fullsize" src="web-app-resource-state.png" title="State as a Resource"/>
			</slide>
			<slide>
				<title>Stateless Shopping</title>
				<ul>
					<li>Typical <q>session scenarios</q> can be <a href="http://www.peej.co.uk/articles/no-sessions.html">mapped to resources</a></li>
					<ul>
						<li>Client: Show me your products</li>
						<li>Server: Here's a list of all the products</li>
						<li>Client: I'd like to buy 1 of http://ex.org/product/X, I am "John"/"Password"</li>
						<li>Server: I've added 1 of http://ex.org/product/X to http://ex.org/users/john/basket</li>
						<li>Client: I'd like to buy 1 of http://ex.org/product/Y, I am "John"/"Password"</li>
						<li>Server: I've added 1 of http://ex.org/product/Y to http://ex.org/users/john/basket</li>
						<li>Client: I don't want http://ex.org/product/X, remove it, I am "John"/"Password"</li>
						<li>Server: I've removed http://ex.org/product/X to http://ex.org/users/john/basket</li>
						<li>Client: Okay I'm done, username/password is "John"/"Password"</li>
						<li>Server: Here is the total cost of the items in http://ex.org/users/john/basket</li>
					</ul>
					<li>This is more than just renaming <q>session</q> to <q>resource</q></li>
					<ul>
						<li>All relevant data is stored persistently on the server</li>
						<li>The shopping cart's URI can be used by other services for working with its contents</li>
						<li>Instead of <em>hiding the cart in the session</em>, it is <em>exposed as a resource</em></li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Reusing Resources</title>
				<img class="fullsize" src="web-app-reusing-resource.png" title="Reusing Resources"/>
			</slide>
		</part>
		<part id="rest-conclusions">
			<title>Conclusions</title>
			<slide id="rpc-to-rest">
				<title>From RPC to REST</title>
				<ul>
					<li>REST is simple to learn and use</li>
					<li>Unlearning RPC in most cases is the hardest part</li>
					<ul>
						<li>OO is all about identifying classes and methods</li>
						<li>Distributed systems very often are built around RPC models</li>
						<li>Many classical IT architectures are RPC-centric by design</li>
					</ul>
					<li>REST and RPC do not mix (very well)</li>
					<ul>
						<li>Resource orientation â function orientation</li>
						<li>Cooperation â integration</li>
						<li>Openly distributed â hiding distribution</li>
						<li>Coarse-grained â fine-grained</li>
						<li>Complexity in resources formats â complexity in function set</li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="security">
		<title>Security</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc6749" title='RFC 6749: "The OAuth 2.0 Authorization Framework", October 2012'>OAuth 2.0 (RFC 6749)</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="security-intro">
			<title>APIs and Security</title>
		</part>
	</presentation>
	<presentation id="semtech">
		<title>Semantic Technologies</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://www.w3.org/TR/rdf11-concepts/" title='Richard Cyganiak, David Wood, and Markus Lanthaler, "RDF 1.1 Concepts and Abstract Syntax", W3C Recommendation REC-rdf11-concepts-20140225, February 2014'>RDF</a>&#160;Â· <a href="http://dret.typepad.com/dretblog/2011/05/from-ai-to-bi.html" title='Erik Wilde, "From AI to BI", May 2011'>From AI to BI</a>&#160;Â· <a href="http://5stardata.info/">5â Open Data</a>&#160;Â· <a href="http://webdata.systems/" title="How to publish data on the Web. Web Data principles help you to be open and webby.">Web Data</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="semantics">
			<title>Semantics and the Semantic Web</title>
			<slide id="semantics-what">
				<title>What are Semantics?</title>
				<ul>
					<li><em>Semantics</em> are anything that is concerned with <em>representing meaning</em></li>
					<ul>
						<li>Most applications are associating models with meaningful concepts for users</li>
					</ul>
					<li><em>Semantics</em> in a narrower sense often refer to <em>logic-based representations</em></li>
					<ul>
						<li>Statements rooted in formal logic can be used for <em>inferring new statements</em></li>
						<li><q>Berlin is in Germany, and Germany is in Europe, therefore Berlin is in Europe</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="semantic-web">
				<title>Semantic Web</title>
				<ul>
					<li>Make statements about <q>facts</q> in a shared metamodel</li>
					<li>Provide a framework for combining <q>facts</q> and deriving new ones</li>
					<li>Statements are made in a webby way (URIs as the identity model)</li>
				</ul>
			</slide>
			<slide id="identity-web">
				<title>Identity on the (Semantic) Web</title>
				<ul>
					<li>Communications need shared concepts</li>
					<ul>
						<li>This is true regardless of whether formal semantics come into play</li>
					</ul>
					<li>The Web's identity model (<link href="uri">URI</link>) is global, federated, and extensible</li>
					<ul>
						<li>If you want to talk about <q>anything</q> use a URI to identify it</li>
						<li>Works well but the resulting noise makes it impractical</li>
						<li>Reserve URI identification for context-free concept identification</li>
					</ul>
				</ul>
				<listing src="number-concept.txt"/>
			</slide>
			<slide id="identity-value">
				<title>The Value of Identity</title>
				<ul>
					<li>Sharing meaning becomes harder and more powerful with group size</li>
					<ul>
						<li>More users need to agree on shared meaning</li>
						<li>More users/applications can build on shared concepts (network effect)</li>
					</ul>
					<li>Sharing meaning can happen at various levels</li>
					<ol>
						<li><em>License copy/paste:</em> Reuse the license text when the license is reused</li>
						<li><em>License with human-understandable name:</em> Use a license name that is well-established</li>
						<li><em>License with machine-readable name:</em> Use a license URI that machines can recognize and compare</li>
						<li><em>Machine-understandable license:</em> Use a formal model of what the license does</li>
					</ol>
				</ul>
			</slide>
		</part>
		<part id="rdf">
			<title>Resource Description Framework (RDF)</title>
			<slide id="rdf-roots">
				<title>Describing Resources</title>
				<ul>
					<li>RDF started as a generalization of <span title="Platform for Internet Content Selection">PICS</span></li>
					<ul>
						<li>A way to simple make <em>statements</em> about URI-identified resources</li>
						<li>Statements are using <em>(Subject, Predicate, Object)</em> triples</li>
					</ul>
					<li>Statements can be aggregated and result in a graph-oriented data model</li>
					<ul>
						<li><em>Subject</em> (URI): The resource the statement is about</li>
						<li><em>Predicate</em> (URI): The kind of statement being made</li>
						<li><em>Object</em> (URI or literal): The statement that is being made</li>
					</ul>
					<li>The aggregate graph can be interpreted as a set of interconnected statements</li>
				</ul>
			</slide>
			<slide id="triple-example">
				<title>Triple Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-triple" src="rdf11-primer-example-triples.txt"/>
			</slide>
			<slide id="two-rdf-views">
				<title>Two Views of RDF</title>
				<ul>
					<li>The <em>logic view</em> sees the graph as a set of interconnected statements</li>
					<ul>
						<li>Statements are at the center of this perspective</li>
						<li>Merging graphs is mainly an act of merging statements</li>
					</ul>
					<li>The <em>graph view</em> sees the graph as a triple-based data structure</li>
					<ul>
						<li>Merging graphs based on node identity is the main concern</li>
						<li>Having elaborate schemas of statement types is not a necessity</li>
					</ul>
					<li>Both views are complementary but influence the models and tooling</li>
				</ul>
			</slide>
			<slide id="triple-graph">
				<title>Triples as a Graph</title>
				<img class="fullsize" src="rdf11-primer-example-graph.jpg" title="Informal graph of the sample triples" href="https://www.w3.org/TR/rdf11-primer/#section-triple"/>
			</slide>
			<slide id="triple-graph">
				<title>Triples as a Graph</title>
				<img class="fullsize" src="rdf11-primer-example-multiple-graphs.jpg" title="Informal graph of the sample dataset" href="https://www.w3.org/TR/rdf11-primer/#section-multiple-graphs"/>
			</slide>
			<slide id="n-triples-example">
				<title>N-Triples Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-n-triples" src="rdf11-primer-example-n-triples.txt"/>
			</slide>
			<slide id="turtle-example">
				<title>Turtle Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-turtle" src="rdf11-primer-example-turtle.txt"/>
			</slide>
			<slide id="trig-example">
				<title>TriG Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-trig" src="rdf11-primer-example-trig.txt"/>
			</slide>
			<slide id="json-ld-example">
				<title>JSON-LD Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-json-ld" src="rdf11-primer-example-json-ld.json"/>
			</slide>
			<slide id="json-ld-example-context">
				<title>JSON-LD Example (Context)</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-json-ld" src="rdf11-primer-example-json-ld-context.json"/>
			</slide>
			<slide id="rdf-vocabularies">
				<title>RDF Vocabularies: Schemas and Ontologies</title>
			</slide>
			<slide id="sparql">
				<title>Querying RDF with SPARQL</title>
			</slide>
		</part>
		<part id="linked-data">
			<title>Linked Data</title>
			<slide id="linked-data-definition">
				<title>Linked Data â Data that is Linked</title>
				<ul>
					<li><q>Linking Data</q> is something that is based on viewing <em>data as a graph</em></li>
					<ul>
						<li>Any way to represent graph-based data can be considered <q>linked data</q></li>
					</ul>
					<li><em>Linked Data</em> has become a trademark to refer to specific technologies</li>
					<ul>
						<li>Driven by an unfortunate emphasis of <q>how</q> over <q>what</q></li>
					</ul>
					<li><em href="http://webdata.systems/">Web Data</em> is an alternative vision that focuses less on the <q>how</q></li>
					<ul>
						<li>If your data is linked then it can be considered <em>linked data</em> (lowercase)</li>
						<li>Turning it into <em>Linked Data</em> (uppercase) is an optional technology choice</li>
					</ul>
				</ul>
			</slide>
			<slide id="linked-open-data">
				<title>Linked Open Data</title>
				<ol>
					<li><em>Open License</em> â Allow others to use the data</li>
					<li><em>Structured Data</em> â Publish machine-readable structured data</li>
					<li><em>Open Format</em> â Use open formats over proprietary ones</li>
					<li><em>URI Identifiers</em> â Identify concepts globally and by URI</li>
					<li><em>Interlinking</em> â Interconnect datasets by cross-linking URIs</li>
				</ol>
			</slide>
			<slide id="five-star-steps">
				<title>5â Open Data Steps</title>
				<img src="5-star-steps.png" title="5â Open Data" href="http://5stardata.info/" class="fullsize"/>
			</slide>
			<slide id="lod-cloud">
				<title>Linked Open Data Cloud</title>
				<img src="lod-cloud-2018-04-30.png" title="Linked Open Data Cloud" href="https://lod-cloud.net/" class="fullsize"/>
			</slide>
		</part>
	</presentation>
	<presentation id="standards">
		<title>Standards</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;Â· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;Â· <a href="http://www.iso.org/" title="International Organization for Standardization">ISO</a>&#160;Â· <a href="http://www.iana.org/protocols" title="Internet Assigned Numbers Authority Protocol Registries">IANA Registries</a>&#160;Â· <a href="http://webconcepts.info/">Web Concepts</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="languages-standards">
			<title>APIs and Standards</title>
			<slide id="apis-are-languages">
				<title>API are Languages</title>
				<ul>
					<li>APIs allow service providers and consumers to communicate</li>
					<ul>
						<li>Service providers <em>define</em> the language to be used for service interactions</li>
						<li>Service consumers <em>use</em> the language to interact with the service</li>
					</ul>
					<li>Interfaces both separate and connect users of the interface</li>
					<ul>
						<li><em>Separation</em> means that the interface is self-contained</li>
						<li><em>Connection</em> means that the interface is easy to use</li>
					</ul>
					<li>Language design becomes different in complex landscapes</li>
					<ul>
						<li><em>Singular APIs</em> derive value from being individually polished products</li>
						<li><em>Landscape APIs</em> derive value from maximizing productivity across products</li>
					</ul>
				</ul>
			</slide>
			<slide id="languages-need-standards">
				<title>Languages need Standards</title>
				<ul>
					<li>Standards become building blocks of easily usable APIs</li>
					<ul>
						<li>Each building block reduces design effort and improves understandability</li>
					</ul>
					<li>Building blocks can be used from various areas</li>
					<ol>
						<li>General <em>API concepts</em> that can be used uniformly across various APIs</li>
						<li><em>Domain concepts</em> that can be used across APIs for a certain domain</li>
						<li><em>Organizational concepts</em> that make sense for APIs within an organization</li>
					</ol>
				</ul>
			</slide>
		</part>
		<part id="protocol-standards">
			<title>Protocols are Standards</title>
			<slide id="standard-types">
				<title><a href="https://www.safaribooksonline.com/library/view/restful-web-apis/9781449359713/pr05.html" title='"RESTful Web APIs" by Sam Ruby, Mike Amundsen, Leonard Richardson: Introduction'>Standard Types</a></title>
				<ul>
					<li><em>Fiat standards:</em> <q>Why not do it this way?</q></li>
					<li><em>Personal standards:</em> <q>I like the way this has been done.</q></li>
					<li><em>Corporate standards:</em> <q>Let's try to figure out a way to do this.</q></li>
					<li><em>Open standards:</em> <q>Hello everybody! Let's share a way to do this!</q></li>
				</ul>
			</slide>
			<slide id="xkcd-standards">
				<title>How Standards Proliferate</title>
				<img src="xkcd927.png" title="The nice thing about standards is that there are so many to choose from." href="https://xkcd.com/927/" class="fullsize"/>
			</slide>
		</part>
		<part id="sdos">
			<title>Standards-Defining Organizations (SDOs)</title>
			<slide id="ietf">
				<title><a href="http://ietf.org/">Internet Engineering Task Force (IETF)</a></title>
				<img title="Internet Engineering Task Force (IETF)" href="http://ietf.org/" src="ietf.png" class="fullsize"/>
			</slide>
			<slide id="ietf-http">
				<title>IETF Specification: Hypertext Transfer Protocol (HTTP)</title>
			</slide>
			<slide id="w3c">
				<title><a href="http://www.w3.org/">World Wide Web Consortium (W3C)</a></title>
				<img title="World Wide Web Consortium (W3C)" href="http://www.w3c.org/" src="w3c.png" class="fullsize"/>
			</slide>
			<slide id="w3c-xml">
				<title>W3C Specification: Extensible Markup Language (XML)</title>
			</slide>
			<slide id="iso">
				<title><a href="http://www.iso.org/">International Organization for Standardization (ISO)</a></title>
				<img title="International Organization for Standardization (ISO)" href="http://www.iso.org/" src="iso.png" class="fullsize"/>
			</slide>
			<slide id="iso-lang">
				<title>ISO Specification: Language Codes</title>
			</slide>
		</part>
		<part id="registries">
			<title>Managing Value Spaces: Registries</title>
			<slide id="why-registries">
				<title>Separating Definition and Evolution</title>
				<ul>
					<li>Concepts may be well-defined but with open and evolving value sets</li>
					<ul>
						<li><em>Employees</em> may be as <q>simple</q> as listing people who have been on payroll</li>
						<li><em>Languages</em> are not easy to find and identify but some consensus is possible</li>
						<li><em>Countries</em> are even trickier because of politics and history</li>
					</ul>
					<li>Technical concepts often are easier to identify and manage</li>
					<ul>
						<li><em>Registry policies</em> must be well-defined so that management is predictable</li>
						<li>Registries contain values and usually <em>link</em> to semantic descriptions</li>
						<li>Sharing values should be the equivalent of sharing concepts</li>
					</ul>
				</ul>
			</slide>
			<slide id="iana-registries">
				<title><a href="http://www.iana.org/" title="Internet Assigned Numbers Authority">IANA</a> <a href="http://www.iana.org/protocols">Protocol Registries</a></title>
				<img title="Internet Assigned Numbers Authority (IANA) Protocol Registries" href="http://www.iana.org/protocols" src="iana-registries.png" class="fullsize"/>
			</slide>
			<slide id="registry-policy">
				<title>Preventing Value Drift</title>
				<ul>
					<li>Registered values should be <em>stable over time</em></li>
					<ul>
						<li>The only allowed semantic update are clarifications or updated specifications</li>
						<li>Backwards-compatible specifications are essential (the old meaning still holds)</li>
					</ul>
					<li>Registered values should <em>never be reassigned</em></li>
					<ul>
						<li>Reassigning values is equivalent to a breaking change in value semantics</li>
						<li>Once registered, values are defined and their meaning will never change</li>
					</ul>
					<li>Registered values may be marked as being <em>deprecated</em></li>
					<ul>
						<li>There may be a registry flag indicating that values should be treated as <q>deprecated</q></li>
						<li>Deprecated values may be treated as errors at some point in time</li>
						<li>Deprecated values can never be reassigned (see above)</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="web-concepts">
			<title>Web Concepts</title>
			<slide id="food-labels">
				<title>Food Labels</title>
				<img title="Food Labels" href="https://www.google.ch/search?q=food+labels&amp;tbm=isch" src="food-labels.png" class="fullsize"/>
			</slide>
			<slide id="safety-labels">
				<title>Safety Labels</title>
				<img title="Product Safety Labels" href="https://www.google.ch/search?q=product+safety+labels&amp;tbm=isch" src="safety-labels.png" class="fullsize"/>
			</slide>
			<slide id="specs">
				<title>Web Concepts: <a href="http://webconcepts.info/specs/">Specifications</a></title>
				<ul>
					<li>Specifications define values for <link href="concepts">existing concepts</link></li>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/7234" title='RFC 7234: "Hypertext Transfer Protocol (HTTP/1.1): Caching", June 2014'>RFC 7234 (HTTP/1.1 Caching)</a> defines new values for three existing Web Concepts:</li>
					<ul>
						<li><a href="http://webconcepts.info/concepts/http-cache-directive/" title="List of all HTTP Cache Directives">HTTP Cache Directives</a>: <code><a href="http://webconcepts.info/concepts/http-cache-directive/max-age" title="The 'max-age' request directive indicates that the client is unwilling to accept a response whose age is greater than the specified number of seconds. Unless the max-stale request directive is also present, the client is not willing to accept a stale response. The 'max-age' response directive indicates that the response is to be considered stale after its age is greater than the specified number of seconds.">max-age</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/max-stale" title="The 'max-stale' request directive indicates that the client is willing to accept a response that has exceeded its freshness lifetime. If max-stale is assigned a value, then the client is willing to accept a response that has exceeded its freshness lifetime by no more than the specified number of seconds. If no value is assigned to max-stale, then the client is willing to accept a stale response of any age.">max-stale</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/min-fresh" title="The 'min-fresh' request directive indicates that the client is willing to accept a response whose freshness lifetime is no less than its current age plus the specified time in seconds. That is, the client wants a response that will still be fresh for at least the specified number of seconds.">min-fresh</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/must-revalidate" title="The 'must-revalidate' response directive indicates that once it has become stale, a cache MUST NOT use the response to satisfy subsequent requests without successful validation on the origin server.">must-revalidate</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-cache" title="The 'no-cache' request directive indicates that a cache MUST NOT use a stored response to satisfy the request without successful validation on the origin server. The 'no-cache' response directive indicates that the response MUST NOT be used to satisfy a subsequent request without successful validation on the origin server. This allows an origin server to prevent a cache from using it to satisfy a request without contacting it, even by caches that have been configured to send stale responses.">no-cache</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-store" title="The 'no-store' directive indicates that a cache MUST NOT store any part of either this request or any response to it. This directive applies to both private and shared caches. 'MUST NOT store' in this context means that the cache MUST NOT intentionally store the information in non-volatile storage, and MUST make a best-effort attempt to remove the information from volatile storage as promptly as possible after forwarding it.">no-store</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-transform" title="The 'no-transform' directive indicates that an intermediary (whether or not it implements a cache) MUST NOT transform the payload.">no-transform</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/only-if-cached" title="The 'only-if-cached' request directive indicates that the client only wishes to obtain a stored response. If it receives this directive, a cache SHOULD either respond using a stored response that is consistent with the other constraints of the request, or respond with a 504 (Gateway Timeout) status code. If a group of caches is being operated as a unified system with good internal connectivity, a member cache MAY forward such a request within that group of caches.">only-if-cached</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/private" title="The 'private' response directive indicates that the response message is intended for a single user and MUST NOT be stored by a shared cache. A private cache MAY store the response and reuse it for later requests, even if the response would normally be non-cacheable.">private</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/proxy-revalidate" title="The 'proxy-revalidate' response directive has the same meaning as the must-revalidate response directive, except that it does not apply to private caches.">proxy-revalidate</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/public" title="The 'public' response directive indicates that any cache MAY store the response, even if the response would normally be non-cacheable or cacheable only within a private cache.">public</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/s-maxage" title="The 's-maxage' response directive indicates that, in shared caches, the maximum age specified by this directive overrides the maximum age specified by either the max-age directive or the Expires header field. The s-maxage directive also implies the semantics of the proxy-revalidate response directive.">s-maxage</a></code></li>
						<li><a href="http://webconcepts.info/concepts/http-header/" title="List of all HTTP Header Fields">HTTP Header Fields</a>: <code><a href="http://webconcepts.info/concepts/http-header/Age" title="The 'Age' header field conveys the sender's estimate of the amount of time since the response was generated or successfully validated at the origin server.">Age</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Cache-Control" title="The 'Cache-Control' header field is used to specify directives for caches along the request/response chain. Such cache directives are unidirectional in that the presence of a directive in a request does not imply that the same directive is to be given in the response.">Cache-Control</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Expires" title="The 'Expires' header field gives the date/time after which the response is considered stale. The presence of an Expires field does not imply that the original resource will change or cease to exist at, before, or after that time.">Expires</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Pragma" title="The 'Pragma' header field allows backwards compatibility with HTTP/1.0 caches, so that clients can specify a 'no-cache' request that they will understand (as Cache-Control was not defined until HTTP/1.1). When the Cache-Control header field is also present and understood in a request, Pragma is ignored.">Pragma</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Warning" title="The 'Warning' header field is used to carry additional information about the status or transformation of a message that might not be reflected in the status code. This information is typically used to warn about possible incorrectness introduced by caching operations or transformations applied to the payload of the message.">Warning</a></code></li>
						<li><a href="http://webconcepts.info/concepts/http-warn-code/" title="List of all HTTP Warn Codes">HTTP Warn Codes</a>: <code><a href="http://webconcepts.info/concepts/http-warn-code/110" title="A cache SHOULD generate this whenever the sent response is stale.">110</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/111" title="A cache SHOULD generate this when sending a stale response because an attempt to validate the response failed, due to an inability to reach the server.">111</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/112" title="A cache SHOULD generate this if it is intentionally disconnected from the rest of the network for a period of time.">112</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/113" title="A cache SHOULD generate this if it heuristically chose a freshness lifetime greater than 24 hours and the response's age is greater than 24 hours.">113</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/199" title="The warning text can include arbitrary information to be presented to a human user or logged. A system receiving this warning MUST NOT take any automated action, besides presenting the warning to the user.">199</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/214" title="This Warning code MUST be added by a proxy if it applies any transformation to the representation, such as changing the content-coding, media-type, or modifying the representation data, unless this Warning code already appears in the response.">214</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/299" title="The warning text can include arbitrary information to be presented to a human user or logged. A system receiving this warning MUST NOT take any automated action.">299</a></code></li>
					</ul>
					<li>Specifications add <em>one or more values</em> for <em>one or more concepts</em></li>
					<li><a href="http://webconcepts.info/specs/IETF/">Specification series</a> define naming patterns for automated processing</li>
				</ul>
			</slide>
			<slide id="concepts">
				<title>Web Concepts: <a href="http://webconcepts.info/concepts/">Concepts and Values</a></title>
				<ul>
					<li>Concepts establish a namespace for sharing values with shared meanings</li>
					<li><a href="http://webconcepts.info/concepts/http-header/" title="List of all HTTP Header Fields">HTTP Header Fields</a> are one concept with currently 192 distinct values</li>
					<ul>
						<li>The currently listed values all are defined in W3C/IETF specifications</li>
						<li>If required the list could be extended with de-facto standards as well</li>
					</ul>
					<li><a href="http://webconcepts.info/concepts/link-relation/" title="List of all Link Relations">Link Relations</a> are an extensible and fuzzy concept</li>
					<ul>
						<li>103 link relations have been established as registered values</li>
						<li>Hypermedia applications often will use <q>private</q> URI-identified relations</li>
						<li>It is possible that only registered link relations are good candidates for sharing</li>
					</ul>
				</ul>
			</slide>
			<slide id="overview">
				<title>Web Concepts Overview</title>
				<img src="web-concepts.png" class="fullsize"/>
			</slide>
			<slide id="spec-series">
				<title>Specification Series</title>
				<listing src="specs.xml" line="4-22"/>
			</slide>
			<slide id="concept-config">
				<title>Concept Configuration</title>
				<listing src="concepts.xml" line="20-24"/>
				<listing src="concepts.xml" line="30-39"/>
			</slide>
			<slide id="constraining-concepts">
				<title>Constraining Concepts</title>
				<ul>
					<li>Ignore/remove <em>specifications</em> that you are not interested in</li>
					<li>Ignore/remove <em>specification series</em> that you are not interested in</li>
					<li>Ignore/remove <em>organizations</em> that you are not interested in</li>
					<li>The resulting specifications are <em>your</em> Web Concepts</li>
					<li>They can be one starting point for <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API guidelines</a></li>
				</ul>
			</slide>
			<slide id="custom-concepts">
				<title>Custom Concepts</title>
				<ul>
					<li>Add <em>specifications</em> that you are interested in</li>
					<li>Add <em>specification series</em> that you are interested in</li>
					<li>Add <em>organizations</em> that you are interested in</li>
					<li>Anything that has potential for reuse can and should be added</li>
					<li>The resulting specifications are <em>your</em> Web Concepts</li>
					<li>They can be one starting point for <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API guidelines</a></li>
				</ul>
			</slide>
			<slide id="concept-coverage">
				<title>Concept Coverage</title>
				<ul>
					<li>Track <em>concept value usage</em> across APIs</li>
					<li>Create a dashboard of concept/value popularity (possibly over time)</li>
					<li>Can be done through code analysis (up to a certain point)</li>
					<li>Probably works better/easier through <q>service fabric instrumentation</q></li>
					<li>Ideally separate tooling and backed by an API/format for representing usage data</li>
					<li>Could even detect difference between declared/used Web Concepts</li>
				</ul>
			</slide>
		</part>
		<part id="profiles">
			<title>Profiles</title>
			<slide id="profile-definition">
				<title>Defining Profiles</title>
				<ul>
					<li><a title='Erik Wilde, "The &apos;profile&apos; Link Relation Type", Internet RFC 6906, March 2013' href="http://webconcepts.info/specs/IETF/RFC/6906">RFC 6906</a> defines how to identify profiles and signal their usage</li>
				</ul>
			</slide>
			<slide id="profile-description">
				<title>Describing Profiles</title>
				<ul>
					<li><a title='Rob Atkinson and Nicholas J. Car, "The Profiles Vocabulary", W3C Note, December 2019' href="https://www.w3.org/TR/dx-prof/">W3C's <q>The Profiles Vocabulary</q></a> defines how to describe profiles</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="strategy">
		<title>Strategy</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="https://www.mckinsey.com/business-functions/digital-mckinsey/our-insights/the-seven-make-or-break-api-challenges-cios-need-to-address" title='Keerthi Iyengar, Ling Lau, Srinivas Ramadath, and Vik Sohoni, "The seven make-or-break API challenges CIOs need to address", Digital McKinsey, December 2018'>Seven API Challenges</a>&#160;Â· <a title='"Unlocking Success in Digital Transformations", McKinsey, October 2018' href="https://www.mckinsey.com/business-functions/organization/our-insights/unlocking-success-in-digital-transformations">Unlocking Digital Transformation Success</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="journey">
			<title>From Strategy to Results</title>
		</part>
		<part id="success-factors">
			<title>Success Factors</title>
			<slide id="key-factors">
				<title>Key Factors for Success</title>
				<img title='"Unlocking Success in Digital Transformations", McKinsey, October 2018' href="https://www.mckinsey.com/business-functions/organization/our-insights/unlocking-success-in-digital-transformations" src="success-rate-key-factors.png" class="fullsize"/>
			</slide>
		</part>
	</presentation>
	<presentation id="styles">
		<title>Styles</title>
		<toc class="abstract">APIs can follow a variety of styles, each with their own specifics and advantages and drawbacks. No style by definition is better than other styles, it all depends on the capabilities that should be exposed by an API, as well as on the context. API styles have an impact on the coherence of an API landscape, and on the tooling that is required or available for building, consuming, and managing APIs. Choosing an API style is an important part of API design, and any specifics of API design only start to matter after a style has been chosen.</toc>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a>&#160;Â· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="api-language">
			<title>APIs are Languages</title>
			<slide id="problem-solving">
				<title>Distributed Problem Solving</title>
				<ul>
					<li>APIs are part of distributed problem solving</li>
					<li>Ideal APIs can be used for a range of problems</li>
					<li>Problem-solving often requires combining APIs</li>
					<li><q>Language families</q> make it easier to learn and use new APIs</li>
				</ul>
			</slide>
			<slide id="api-conversation">
				<title>APIs Interactions are Conversations</title>
				<ul>
					<li>APIs support conversations between interacting peers</li>
					<ul>
						<li>Some conversations are point-to-point (how to find the peer?)</li>
						<li>Some conversations are point-to-multipoint (how are groups managed?)</li>
						<li>Some conversations are point-to-ether (what does the ether do?)</li>
					</ul>
					<li>API technology does not determine the API conversation style</li>
					<ul>
						<li>HTTP can be used for asynchronous conversations (<q href="http://www.webhooks.org/">WebHooks</q> pattern)</li>
						<li>Synchronous conversations can be layered on top of asynchronous foundations</li>
					</ul>
					<li>Conversation goals should determine the conversation style</li>
				</ul>
			</slide>
			<slide id="style-metaphors">
				<title>API Style Metaphors</title>
				<ul>
					<li><link href="tunnel-style"/>: Function calls in procedural programming</li>
					<li><link href="resource-style"/>: Data access objects</li>
					<li><link href="hypermedia-style"/>: Browsing the Web</li>
					<li><link href="query-style"/>: Databases and database queries</li>
					<li><link href="event-style"/>: Event-based programming</li>
				</ul>
			</slide>
		</part>
		<part id="tunnel-style">
			<title>Tunnel Style</title>
			<slide id="tunnel-style-image">
				<title>One Tunnel to Call them All</title>
				<img title="Tunnel Style" src="api-styles-tunnel.png" class="fullsize"/>
			</slide>
			<slide id="rpc-over-http">
				<title>Distributed Programming</title>
				<ul>
					<li>Rooted in <em>Remote Procedure Call (RPC)</em> patterns</li>
					<li>Functions are the main abstraction and invoked at known <em>endpoints</em></li>
					<li>Convenient for developers looking to <q>code like a local program</q></li>
				</ul>
			</slide>
		</part>
		<part id="resource-style">
			<title>Resource Style</title>
			<slide id="resource-style-image">
				<title>Listing All Resources</title>
				<img title="Resource Style" src="api-styles-resource.png" class="fullsize"/>
			</slide>
			<slide id="webby-identifiers">
				<title>Identifiers for Resources</title>
				<ul>
					<li>Makes a major step towards a more webby service design</li>
					<ul>
						<li>Resources are identified by URIs and thus globally unique</li>
						<li>Data context may be established by using URI identifiers for resources</li>
						<li>Navigational context is missing because of a lack of links</li>
					</ul>
					<li>One necessary step in the evolution of designing decentralized systems</li>
					<ul>
						<li><em>Web of Data</em> is a good starting point</li>
						<li><em>Web of Services</em> is what makes the Web what it is</li>
					</ul>
					<li>Developers are tempted/required to hardcode control flows</li>
					<ul>
						<li>No navigational guidance provided by the API</li>
						<li>Guidance must be hand-crafted or clients are forced to do trial-and-error</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-style">
			<title>Hypermedia Style</title>
			<slide id="hypermedia-style-image">
				<title>Linking All Resources</title>
				<img title="Hypermedia Style" src="api-styles-hypermedia.png" class="fullsize"/>
			</slide>
			<slide id="hypermedia-apis">
				<title>Hypermedia APIs</title>
				<ul>
					<li>Based on mixing data and controls in representations</li>
					<ul>
						<li><em>Data</em> represents the current resource state</li>
						<li><em>Controls</em> represent the advertised next options for clients</li>
					</ul>
					<li>Controls allow clients to work across individual APIs</li>
					<ul>
						<li>APIs expose sets of resources and provide links</li>
						<li>Clients follow links without being aware of API boundaries</li>
					</ul>
					<li>Developers must code differently from usual programming flows</li>
					<ul>
						<li>Applications are driven by the responses that client code receives</li>
						<li>Imperative programming is not the best fit for this kind of flow</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="query-style">
			<title>Query Style</title>
			<slide id="query-style-image">
				<title>Querying into Server-Side Models</title>
				<img title="Query Style" src="api-styles-query.png" class="fullsize"/>
			</slide>
			<slide id="database-style">
				<title>Querying Structured Data</title>
				<ul>
					<li>The API provides access to a rich interconnected data structure</li>
					<ul>
						<li>Clients know the data model and understand how to query it</li>
						<li>Clients want a small subset of the available data</li>
					</ul>
					<li>Querying into structure data needs an agreement on data and querying</li>
					<ul>
						<li>Query-style APIs define a <em>metamodel</em> that all data models must use</li>
						<li>Query-style APIs define a <em>query language</em> for querying data</li>
					</ul>
					<li><em>Loose coupling</em> depends on if and how clients adjust to schema changes</li>
					<ul>
						<li>Is it possible for clients to find out about schema changes?</li>
						<li>Do clients have to worry about schema changes?</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="event-style">
			<title>Event-Based Style</title>
			<slide id="event-style-image">
				<title>Event Publish/Subscribe</title>
				<img title="Event-based Style" src="api-styles-event.png" class="fullsize"/>
			</slide>
			<slide id="fire-and-forget">
				<title>Fire and Forget</title>
				<ul>
					<li>Synchronous communications result in tighter coupling between peers</li>
					<li>Asynchronous communications can make data provision easier</li>
					<ul>
						<li>Data is tagged and submitted into some <em>messaging fabric</em></li>
						<li>The fabric takes care of notifying and delivering data to consumers</li>
					</ul>
					<li>The fabric is beyond the <em>smart endpoints and dumb pipes</em> idea</li>
					<ul>
						<li><em>Smart pipes</em> are not bad by itself but often have problems scaling</li>
					</ul>
					<li>Managing the fabric becomes an essential part of making code work</li>
					<ul>
						<li>Who is producing data?</li>
						<li>Who is consuming data?</li>
						<li>What are the ways in which data can or must be tagged?</li>
						<li>How is the namespace of data tagging managed?</li>
					</ul>
				</ul>
			</slide>
			<slide id="event-sourcing">
				<title>Event Sourcing: Durable Event Logs</title>
				<ul>
					<li>Application state is determined by events that have happened</li>
					<ul>
						<li>Application state can be re-created by replaying the sequence of events</li>
						<li>Persisting events becomes essential for representing application state</li>
					</ul>
					<li>Useful pattern for designs where auditing/accounting is a key component</li>
					<ul>
						<li>Application state is determined <em>as a function of the audit trail</em></li>
						<li>Auditing/Accounting by definition is in sync with application state</li>
						<li>Temporal reasoning becomes easier</li>
					</ul>
					<li><q>Isolation</q> from external events (input/output) becomes essential</li>
					<ul>
						<li><em>Event replay</em> may be needed to recreate application state</li>
						<li><em>Event replay</em> must be prevented from replaying external effects</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="cqrs">
			<title>Command Query Responsibility Segregation (CQRS)</title>
			<slide id="read-write-model">
				<title>Separating Read and Write Models</title>
				<ul>
					<li>Read and write can follow very different approaches</li>
					<ul>
						<li><em>Reading</em> may result in data enriched with related data or links</li>
						<li><em>Writing</em> may be less strict and may use fewer data items</li>
					</ul>
					<li>CQRS is a result of looking at read/write as two different services</li>
					<ul>
						<li>Can be useful when read and write are typically different applications</li>
						<li>Can be confusing when it becomes to simply read/modify/update data</li>
					</ul>
					<li>CQRS usually means having different models (not just variations)</li>
					<ul>
						<li>Different models means that mapping can be non-trivial</li>
						<li><q>Lightweight CQRS</q> can be achieved with <link href="profiles">profiles</link> (model variations)</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="choosing-style">
			<title>Choosing an API Style</title>
			<slide id="best-api-style">
				<title>There is no <q>Best API Style</q></title>
				<img title="Volkswagen KÃ¤fer" src="volkswagen-kaefer.jpg" style=" width : 35% ; object-fit : contain ; margin : 1% 6% 1% 6% ; "/>
				<img title="Audi RSQ8" src="audi-rsq8.jpg" style=" width : 35% ; object-fit : contain ; margin : 1% 6% 1% 6% ; "/>
				<img title="Mercedes G Class" src="mercedes-g350.jpg" style=" width : 35% ; object-fit : contain ; margin : 1% 6% 1% 6% ; "/>
				<img title="Porsche 911 Turbo S" src="porsche-911-turbo-s.jpg" style=" width : 35% ; object-fit : contain ; margin : 1% 6% 1% 6% ; "/>
			</slide>
			<slide id="api-style-properties">
				<title>API Style Properties</title>
				<ul>
					<li>API styles influence important API properties</li>
					<ul>
						<li><em>Scalability:</em> Number of APIs, API teams, API consumers, and API interactions</li>
						<li><em>Usability:</em> Problem domain, established styles, available tooling</li>
						<li><em>Changeability:</em> BFF, known/unknown group of consumers</li>
						<li><em>Performance:</em> What are critical issues in known scenarios</li>
						<li><em>Reliability:</em> Operational concerns and centralization/decentralization</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-style-context">
				<title>Context Considerations</title>
				<ul>
					<li><em>Backend-for-Frontend (BFF)</em> implies tight coupling producer/consumer</li>
					<ul>
						<li>API style and API design can be coordinated with the consumer</li>
					</ul>
					<li><em>Private APIs</em> implies a smaller group of potential consumers</li>
					<ul>
						<li>Style and design can be guided by internal guidelines/practices</li>
					</ul>
					<li><em>Partner APIs</em> implies a well-known group of consumers</li>
					<ul>
						<li>Broader appeal to consumers necessary</li>
					</ul>
					<li><em>Public APIs</em> is the most loosely coupled group of consumers</li>
					<ul>
						<li>No control over consumers and their preferences/tools and development cycles</li>
					</ul>
				</ul>
			</slide>
			<slide id="backend-for-frontend">
				<title>Backend-for-Frontend Scenario</title>
				<img src="api-styles-bff.png" class="fullsize"/>
			</slide>
			<slide id="style-implementations">
				<title>API Styles in the Wild</title>
				<ul>
					<li><link href="tunnel-style"/>: XML-RPC, SOAP, gRPC, Avro</li>
					<li><link href="resource-style"/>: OpenAPI/Swagger, RAML, API Blueprint</li>
					<li><link href="hypermedia-style"/>: HAL, Siren, Atom, HATEOAS</li>
					<li><link href="query-style"/>: GraphQL, OData, SPARQL</li>
					<li><link href="event-style"/>: MQ, WebSub, MQTT, XMPP, AMQP, Kafka, AsyncAPI</li>
				</ul>
			</slide>
		</part>
		<part id="style-conclusions">
			<title>Conclusions</title>
			<slide id="no-style-hammer">
				<title>There is no Style Hammer</title>
				<ul>
					<li>API styles can be combined</li>
					<li>Style coherence makes an API landscape more usable</li>
					<li>Style fundamentalism may pick the wrong tool for a problem</li>
					<li>Be aware of styles and pick the one that works best</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="skeleton">
		<title>General Skeleton</title>
		<toc class="abstract">General-purpose skeleton with introduction and conclusions.</toc>
		<toc class="resources"><a href="https://www.axway.com/catalysts">Catalysts</a>&#160;Â· <a href="https://www.oreilly.com/library/view/continuous-api-management/9781492043546/" title="Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, and Mike Amundsen, 'Continuous API Management: Making the Right Decisions in an Evolving Landscape', O'Reilly Media, December 2018">CAM Book</a>&#160;Â· <a href="https://www.oreilly.com/library/view/microservice-architecture/9781491956328/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="catalyst-introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" class="fullsize"/>
			</slide>
			<slide id="catalysts">
				<title><a href="https://www.axway.com/">Axway</a> <a href="https://www.axway.com/catalysts">Catalysts</a></title>
				<ul>
					<li>Small team with three core missions</li>
					<ul>
						<li>Improve customer success by shifting focus to outcomes</li>
						<li>Provide thought-leadership in the API and digital transformation space</li>
						<li>Improve Axway by following the principles that we preach</li>
					</ul>
					<li>Team members are distributed globally</li>
					<ul style=" columns : 2 ; ">
						<li>Eric Horesnyi: <a href="http://twitter.com/EricHoresnyi" class="twitter-follow-button" title="Eric Horesnyi on Twitter: @EricHoresnyi"><code>@EricHoresnyi</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Emmanuel Methivier: <a href="http://twitter.com/e_methivier" class="twitter-follow-button" title="Emmanuel Methivier on Twitter: @e_methivier"><code>@e_methivier</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Brian Otten: <a href="http://twitter.com/bottencatalyst" class="twitter-follow-button" title="Brian Otten on Twitter: @bottencatalyst"><code>@bottencatalyst</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Brian Pagano: <a href="http://twitter.com/brianpagano" class="twitter-follow-button" title="Brian Pagano on Twitter: @brianpagano"><code>@brianpagano</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Eyal Sivan: <a href="http://twitter.com/mropenbanking" class="twitter-follow-button" title="Eyal Sivan on Twitter: @mropenbanking"><code>@mropenbanking</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture (2016)</title>
				<img src="MSA-cover.jpg" href="https://www.oreilly.com/library/view/microservice-architecture/9781491956328/" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<ul>
						<li><a href="https://www.oreilly.com/library/view/microservice-architecture/9781491956328/">O'Reilly book page</a></li>
						<li><a href="https://www.amazon.com/Microservice-Architecture-Aligning-Principles-Practices/dp/1491956259">Amazon book page</a></li>
					</ul>
					<li>Authored by 2016 <a href="http://www.apiacademy.co/">API Academy</a> members</li>
					<ul>
						<li>Irakli Nadareishvili: <a href="http://twitter.com/inadarei" class="twitter-follow-button" title="Irakli Nadareishvili on Twitter: @inadarei"><code>@inadarei</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Ronnie Mitra: <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Matt McLarty: <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Mike Amundsen: <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
				</ul>
			</slide>
			<slide id="cam-book">
				<title>Continuous API Management (2018)</title>
				<img src="CAM-cover.jpg" href="https://www.oreilly.com/library/view/continuous-api-management/9781492043546/" title="Continuous API Management: Making the Right Decisions in an Evolving Landscape" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Continuous API Management: Making the Right Decisions in an Evolving Landscape</q></li>
					<ul>
						<li><a href="https://www.oreilly.com/library/view/continuous-api-management/9781492043546/">O'Reilly book page</a></li>
						<li><a href="https://www.amazon.com/Continuous-Api-Management-Decisions-Landscape/dp/1492043559">Amazon book page</a></li>
					</ul>
					<li>Authored by 2018 <a href="http://www.apiacademy.co/">API Academy</a> members</li>
					<ul>
						<li>Mehdi Medjaoui: <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Ronnie Mitra: <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Mike Amundsen: <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
				</ul>
			</slide>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH ZÃ¼rich</a> (1997)</li>
					<li>Research work at <a href="http://www.ethz.ch/">ETH ZÃ¼rich</a> (1997-2006) and <a href="http://www.berkeley.edu/">UC Berkeley</a> (2006-2011)</li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Part of <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> 2016-2019 focusing on API Design and Management</li>
					<li>Joined <a href="https://www.goodapi.co/">Good API</a> in 2019 focusing on Digital Transformation and API Strategy</li>
					<li>Joined <a href="https://www.axway.com/">Axway</a>'s <a href="https://www.axway.com/services/catalysts">Catalysts</a> in 2019 for driving the <a href="https://accelerate.axway.com/">Accelerate program</a></li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, and <a href="http://www.linkedin.com/in/netdret">LinkedIn</a></li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thank You!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 0% 5% 5% 5% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/..."><code>dret.net/lectures/...</code></a></li>
					<li>More information:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>