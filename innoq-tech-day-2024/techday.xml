<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="innoq" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="techday.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="https://creativecommons.org/licenses/by/4.0/" short="CC BY 4.0">
		<div class="license">
			<p><a rel="license" title="View full text of license" href="https://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/youtube/logo/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="View full text of license" href="https://creativecommons.org/licenses/by/4.0/">This work is licensed under a CC<br/>Attribution 4.0 International License</a></p>
		</div>
	</license>
	<title><a href="https://technologyday.innoq.com/">INNOQ Technology Day 2024</a></title>
	<author>Erik Wilde</author>
	<affiliation>Principal Consultant, <a href="https://www.innoq.com/">INNOQ</a></affiliation>
	<date short="2024-12-05">December 5, 2024</date>
	<copyright>2024 Erik Wilde</copyright>
	<presentation id="index">
		<title short="What Why When Versioning Matters">What Why When Versioning Matters: Tips for API Design, Description, and Documentation</title>
		<toc class="abstract">One of the superpowers of APIs is to design them as products with a focus on making them reusable. That helps with innovation and reuse, as teams can now consume the capabilities of other teams without having to coordinate with them, leading to faster flow. For this to work well, API versioning must be handled in a way that allows the API to evolve while at the same time not breaking existing consumers. What do you have to version? Why does it matter? When should you version? We present tips that help to improve your API design, description and documentation practices.</toc>
<!--
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract">
				<toc class="abstract"/>
			</p>
		</slide>
-->
		<part id="why">
			<title>Why: We're not in Kansas anymore</title>
			<slide id="composition">
				<title>Systems vs. Ecosystems</title>
				<ul>
					<li>Software today oftentimes uses <em>external</em> components</li>
					<li><em>Systems</em> imply control over all components</li>
					<ul>
						<li><em>Change radius</em> is the entire system and changes can be coordinated</li>
					</ul>
					<li><em>Ecosystems</em> imply decentralized and uncoordinated control</li>
					<ul>
						<li><em>Change radius</em> are components and changes must be absorbed by the design</li>
					</ul>
				</ul>
			</slide>
			<slide id="programming-in-the-huge">
				<title>Programming-in-the-Huge</title>
				<img source='Frank DeRemer and Hans Kron, "Programming-in-the-Large versus Programming-in-the-Small", ACM SIGPLAN Notices, Volume 10, Issue 6, Pages 114-121, April 1975' src="programming-in-the-large.png" href="https://dl.acm.org/doi/10.1145/390016.808431" class="fullsize-shadow" />
			</slide>
			<slide id="api-interfaces">
				<title>APIs as Component Interfaces</title>
				<ul>
					<li><em>Private APIs</em> are used within organizations</li>
					<ul>
						<li>Some APIs may be internal to <em>building systems</em></li>
						<li>Organizations are <em>ecosystems</em> of various individual systems</li>
					</ul>
					<li><em>Partner APIs</em></li>
					<ul>
						<li>Established and managed relationships but local autonomy</li>
					</ul>
					<li><em>Public APIs</em></li>
					<ul>
						<li>Large-scale relationships with little mutual coordination</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="what">
			<title>What: Robustness in Ecosystems</title>
			<slide id="loose-coupling">
				<title>Loose Coupling</title>
				<img src="cervelo-p5x.jpg" style="float: right ; width : 20% ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li><em>Coupling</em> always is a trade-off</li>
					<li><em>Tight coupling</em> allows for runtime optimizations</li>
					<li><em>Loose coupling</em> makes it easier to change things independently</li>
					<li><em>Decentralized scenarios</em> are a good candidate for loose coupling</li>
					<li>Changing things without breaking things is what we're all after</li>
				</ul>
			</slide>
			<slide id="loose-coupling-value">
				<title>The Value of Loose Coupling</title>
				<img src="team-topologies-cover.png" title='Matthew Skelton and Manuel Pais, "Team Topologies: Organizing Business and Technology Teams for Fast Flow", IT Revolution, September 2019' href="https://teamtopologies.com/book" style=" float: right ; width : 20% ; margin : 2% ;  "/>
				<ul>
					<li>Loosely coupled <em>Private APIs</em> mean faster flow of delivery</li>
					<ul>
						<li><q>You're powering your business with APIs</q></li>
					</ul>
					<li>Loosely coupled <em>Partner APIs</em> mean better partner focus</li>
					<ul>
						<li><q>You're augmenting your business with APIs</q></li>
					</ul>
					<li>Loosely coupled <em>Public APIs</em> mean better product management</li>
					<ul>
						<li><q>The API is (part of) your business</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="loose-coupling-risk">
				<title>The Risk of Loose Coupling</title>
				<img src="innovators-dilemma-cover.jpg" title='Clayton M. Christensen: "The Innovator&apos;s Dilemma: When New Technologies Cause Great Firms to Fail", 1997' href="https://teamtopologies.com/book" style=" float: right ; width : 20% ; margin : 2% ;  "/>
				<ul>
					<li>Hard to retrofit (requires culture and training)</li>
					<li>Constrained evolution (evolves in predicted direction)</li>
					<li>Innovator's Dilemma (missing disruptive opportunities)</li>
				</ul>
			</slide>
		</part>
		<part id="compatibility">
			<title>Managing Compatibility</title>
			<slide id="compatibility-basics">
				<title>Sweat and Tears</title>
				<img src="compatibility-basics.png" class="fullsize" />
			</slide>
			<slide id="compatibility-directions">
				<title>Backward and Forward Compatibility</title>
				<img src="compatibility.png" class="fullsize" />
			</slide>
			<slide id="semantic-versioning">
				<title>Semantic Versioning</title>
				<ul>
					<li><a href="http://semver.org/">Semantic Versioning</a> standardizes the meaning of version numbers</li>
					<li>Version numbers use <code>MAJOR.MINOR.PATCH</code> syntax and have well-defined semantics</li>
					<ul>
						<li>Increase <code>MAJOR</code> version for breaking API changes</li>
						<li>Increase <code>MINOR</code> version for adding functionality in a forward-compatible manner</li>
						<li>Increase <code>PATCH</code> version for making forward-compatible bug fixes</li>
					</ul>
					<li><code>MAJOR</code> is a different API, <code>PATCH</code> is an implementation detail</li>
					<ul>
						<li>Exposing detailed version/patch information is a potential security risk</li>
						<li>For well-designed APIs only <code>MINOR</code> may make sense to expose</li>
					</ul>
				</ul>
			</slide>
			<slide id="semantic-versioning-example">
				<title>Semantic Versioning Example</title>
				<img src="semantic-versioning.png" class="fullsize"/>
			</slide>
			<slide id="non-breaking-changes">
				<title>Non-Breaking Changes</title>
				<ol>
					<li>Add new optional query parameters</li>
					<li>Introduce new endpoints without altering existing ones</li>
					<li>Add new fields to responses while keeping existing fields unchanged</li>
					<li>Include new HTTP headers that clients can choose to use</li>
					<li>Provide additional media types via content negotiation</li>
					<li>Add new status codes for specific cases without replacing current ones</li>
					<li>Allow new values for existing enum fields</li>
					<li>Expand existing arrays or collections with additional optional items</li>
					<li>Introduce new relationships or links in hypermedia APIs</li>
					<li>Offer alternative authentication or authorization methods</li>
				</ol>
			</slide>
			<slide>
				<title>Compatibility, Take 1</title>
				<img src="hyrum-wright-cover.jpg" title="Hyrum's Law: Hyrum Wright on Programming over Time" href="https://www.youtube.com/watch?v=5Wdgjw6IGDM" class="fullsize-shadow"/>
			</slide>
			<slide>
				<title>Compatibility, Take 2</title>
				<ul>
					<li><em>Additions:</em> Only where allowed and must be safe to ignore</li>
					<li><em>Semantic Stability:</em> Meaning stays stable and no <q>semantic cross-talk</q></li>
					<li><em>Narrowing Constraints:</em> Types can be changed to subtypes</li>
				</ul>
			</slide>
			<slide id="dont-dont-version">
				<title>Don't Don't Version</title>
				<ul>
					<li><q>Never changing anything</q> is not a great product management attitude</li>
					<li>Changes ideally are non-breaking but still are relevant to consumers</li>
					<li>Give consumers as much freedom as possible to ignore changes</li>
					<li>Give consumers clear avenues to see and explore changes</li>
				</ul>
			</slide>
		</part>
		<part id="api-evolution">
			<title>API Evolution in Action</title>
			<slide id="mario-start">
				<title>Mario 1.0</title>
				<img src="api-evolution-1-0.png" class="fullsize" />
			</slide>
			<slide id="menu-mario">
				<title>Mario's Menu</title>
				<listing src="mario-1-0.json"/>
			</slide>
			<slide id="menu-schema-1-0-yaml">
				<title>Checking Mario's Menu: YAML</title>
				<listing src="menu-1-0-schema.yaml"/>
			</slide>
			<slide id="menu-schema-1-0-json">
				<title>Checking Mario's Menu: JSON</title>
				<listing src="menu-1-0-schema.json"/>
			</slide>
			<slide id="mario-evolves">
				<title>Mario is Evolving</title>
				<img src="api-evolution-1-1.png" class="fullsize" />
			</slide>
			<slide id="menu-schema-1-1-json">
				<title>A Bigger Menu</title>
				<listing src="menu-1-1-schema.json"/>
			</slide>
			<slide id="menu-mario-1-1">
				<title>Mario's New Menu</title>
				<listing src="mario-1-1.json"/>
			</slide>
			<slide id="customer-follows">
				<title>Customers Follow</title>
				<img src="api-evolution-1-1-balanced.png" class="fullsize" />
			</slide>
			<slide id="menu-luigi">
				<title>Luigi's Menu</title>
				<listing src="luigi-1-0.json"/>
			</slide>
			<slide id="luigi-1-0">
				<title>Free Backwards Compatibility</title>
				<img src="api-evolution-1-1-backwards.png" class="fullsize" />
			</slide>
			<slide id="api-mix">
				<title>Diversity in API Ecosystems</title>
				<img src="api-evolution-mix.png" class="fullsize" />
			</slide>
			<slide id="camara">
				<title>Camara</title>
				<img src="camara.png" href="https://camaraproject.org/" class="fullsize-shadow"/>
			</slide>
			<slide id="iata">
				<title>IATA Open API Hub</title>
				<img src="iata-open-api-hub.png" href="https://api.developer.iata.org/hub" class="fullsize-shadow"/>
			</slide>
		</part>
		<part id="documentation">
			<title>How: Documenting Versioning</title>
			<slide id="version-identification">
				<title>Version Identification</title>
				<img src="kiss.png" title="This is the End" style="float: right ; height : 45% ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li>Indicate the version in interactions</li>
					<li>Don't break identity between compatible versions</li>
					<ul>
						<li><em>Don't</em> make non-major version information part of resource identity</li>
						<li><em>Do</em> make major version information part of resource identity</li>
					</ul>
					<li>Various choices when it comes to representing version information</li>
					<ul>
						<li><em>DNS Domain Name:</em> <code>https://v1.api.example.com/</code></li>
						<li><em>URI root:</em> <code>https://api.example.com/v1/</code></li>
						<li><em>Query parameter:</em> <code>https://api.example.com/?version=1.0</code></li>
						<li><em>HTTP header field:</em> <code>API-Version: 1.0</code></li>
						<li><em>Media Type:</em> <code>Content-Type: application/vnd.example.v1+json</code></li>
						<li><em>Media Type:</em> <code>Content-Type: application/vnd.example+json; version=1.0</code></li>
					</ul>
				</ul>
			</slide>
			<slide id="openapi">
				<title>API Versions in OpenAPI</title>
				<img src="info-version-linkedin-poll.png" title="LinkedIn Poll about the OpenAPI info.version property" href="https://www.linkedin.com/feed/update/urn:li:activity:7202896718634315776/" style="float: right ; width : 25% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li>OpenAPI does not support representing API version information</li>
					<li><code href="https://spec.openapis.org/oas/v3.1.1.html#fixed-fields-0">info.version</code> represents the version of the API description</li>
					<li>Consider using <code>x-api-version</code> in your OpenAPI description</li>
				</ul>
			</slide>
			<slide id="oasdiff">
				<title>Versioning &amp; Platform Engineering</title>
				<img src="oasdiff-logo.png" title="oasdiff" href="https://www.oasdiff.com/" style="float: right ; width : 25% ; margin : 0% 4% 4% 4% ; "/>
				<ul>
					<li>Clearly an issue for all teams that could/should be pushed into the platform</li>
					<li>Existing and good API descriptions make documentation much easier</li>
					<li><code href="https://github.com/Tufin/oasdiff">oasdiff</code> is a diff tool for OpenAPI descriptions</li>
					<ul>
						<li>Detects breaking changes based on a configurable model of compatibility</li>
						<li>Generates changelogs that document and classify changes across versions</li>
					</ul>
				</ul>
			</slide>
			<slide id="oasdiff-checks">
				<title>Formalizing Breaking Changes</title>
				<img src="oasdiff-checks.png" href="https://www.oasdiff.com/blog/formalizing-breaking-changes" class="fullsize-shadow"/>
			</slide>
			<slide id="oasdiff-changelog-markdown">
				<title>Changelog in Markdown (also: Text, JSON, YAML, …)</title>
				<listing src="oasdiff-changelog.md" />
			</slide>
			<slide id="mongodb-atlas-changelog">
				<title>Changelog in HTML</title>
				<img src="oasdiff-changelog.png" href="src/oasdiff-changelog" class="fullsize"/>
			</slide>
			<slide id="mongodb-atlas-changelog-json">
				<title>MongoDB Atlas Changelog: JSON</title>
				<listing src="atlas-changelog.json" line="39-57" />
			</slide>
			<slide id="examples">
				<title>Add Examples</title>
				<ul>
					<li>Add examples <em>that contain (fictitious) extensions</em></li>
					<li>Use a consistent naming scheme for names and values</li>
					<li>OpenAPI supports adding examples as part of the description</li>
					<li>Use extensions in your test and validation suites</li>
				</ul>
				<listing src="menu-1-0-example.json" line="13-16" />
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="what-why-when">
				<title>What Why When Versioning Matters</title>
				<ul>
					<li><em>What:</em> Versioning that's sensitive to breaking changes</li>
					<li><em>Why:</em> Loosely coupling components for safer local changes</li>
					<li><em>When:</em> Any scenario where there is no central control</li>
				</ul>
			</slide>
			<slide id="thanks">
				<title>Thank You!</title>
				<img src="end.jpg" title="This is the End" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li><a href="https://www.youtube.com/ErikWilde"><img src="youtube-logo.png" style=" height : 1em ; "/> <code>youtube.com/ErikWilde</code></a></li>
					<li><a href="https://www.linkedin.com/in/erikwilde"><img src="linkedin-logo.png" style=" height : 1em ; "/> <code>linkedin.com/in/erikwilde</code></a></li>
					<!-- <li>Slides online: <a href="http://dret.net/lectures/innoq-technology-day/"><code>dret.net/lectures/innoq-technology-day-2024/</code></a></li> -->
					<p>
						<img src="qr-code-dret.png" href="https://www.linkedin.com/in/erikwilde/" style=" width : 25% ; margin : 1% 1% 0% 1% ; "/>
					</p>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>