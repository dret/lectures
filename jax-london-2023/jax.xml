<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="oai-track" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="jax.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="https://creativecommons.org/licenses/by/4.0/" short="CC BY 4.0">
		<div class="license">
			<p><a rel="license" title="View full text of license" href="https://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/youtube/logo/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="View full text of license" href="https://creativecommons.org/licenses/by/4.0/">This work is licensed under a CC<br/>Attribution 4.0 International License</a></p>
		</div>
	</license>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Date</th>
					<th valign="bottom">Title</th>
					<th valign="bottom">Slides</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><span class="title"><hotspot:date/></span></b></td>
						<td valign="top"><b><span class="title"><hotspot:title/></span></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<title><a href="https://jaxlondon.com/">JAX London</a> 2023</title>
	<author>Erik Wilde</author>
	<affiliation><a href="https://www.youtube.com/ErikWilde">Getting APIs to Work <img src="youtube-logo.png" style=" height : 1em ; "/></a></affiliation>
	<copyright>2023 Erik Wilde</copyright>
	<presentation id="error-messages">
		<title short="Error Messages for HTTP APIs">Error Messages for HTTP APIs: Standards, Patterns, and Practices</title>
		<date short="2023-10-04">October 4, 2023</date>
		<toc class="abstract">Reporting errors is a fundamental aspect of API design. The way it's done can differ between APIs, API technologies, and API styles, but since it is a very common pattern it makes sense to not reinvent the wheel for every single API. We look at how to report errors in HTTP APIs but the lessons learned in this session can be applied to other technologies and styles as well. Beyond the format there also is the question which patterns to apply so that API designers get as much support as possible from their platform when it comes to managing the error messages of their APIs. The format that we discuss is a successor of the popular RFC 7807 error format. We'll discuss why there is a new version, what the changes are, and how to best use it in your APIs and your API landscape.</toc>
		<slide id="summary-error-messages">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<slide id="getting-apis-to-work-error-messages">
			<title>Getting APIs to Work</title>
			<div style=" float : left ; width : 44% ; margin : 0% 4% 0% 2% ; ">
				<div style=" width: 100% ; position: relative ; padding-bottom: 56.25% ; ">
					<iframe style=" border: 0 ; top: 0 ; left: 0 ; width: 100% ; height: 100% ; position: absolute; " src="https://www.youtube-nocookie.com/embed/ErJ3cDkYuqQ" allowfullscreen="no" scrolling="no" allow="encrypted-media; accelerometer; gyroscope; picture-in-picture"/>
				</div>
			</div>
			<div style=" float : right ; width : 44% ; margin : 0% 4% 0% 2% ; ">
				<div style=" width: 100% ; position: relative ; padding-bottom: 56.25% ; ">
					<iframe style=" border: 0 ; top: 0 ; left: 0 ; width: 100% ; height: 100% ; position: absolute; " src="https://www.youtube-nocookie.com/embed/4FzpJ6CDro4" allowfullscreen="no" scrolling="no" allow="encrypted-media; accelerometer; gyroscope; picture-in-picture"/>
				</div>
			</div>
		</slide>
		<part id="context">
			<title>APIs, Guidelines, and Governance</title>
			<slide id="api">
				<title>API as Interfaces</title>
				<ul>
					<li>APIs are technical interfaces</li>
					<li>APIs should use <em href="https://en.wikipedia.org/wiki/Information_hiding">information hiding</em></li>
					<li>APIs are built on a foundation of <em>styles</em> and <em>technologies</em></li>
				</ul>
			</slide>
			<slide id="api-product">
				<title>API as Products</title>
				<ul>
					<li>Good API design goes <em>outside-in</em> starting from consumer needs</li>
					<li>Good products minimizing the cognitive load of consumers</li>
					<li>API designers should focus on business logic concerns</li>
					<li>API platforms are supporting API producers</li>
				</ul>
			</slide>
			<slide id="effective-teams">
				<title>What is an Effective Team?</title>
				<ul>
					<li>A team spending less time with generic API-related tasks</li>
					<ul>
						<li>Figuring out the general guardrails for API design</li>
						<li>Designing, implementing, exposing, securing, and monitoring APIs</li>
						<li>Deploying APIs and making them discoverable for consumers</li>
					</ul>
					<li>A team spending more time addressing domain issues</li>
					<ul>
						<li>Engaging with consumers and designing a good API</li>
						<li>Making sure that consumer feedback is collected and used</li>
						<li>Contributing to the shared API practices of the organization</li>
					</ul>
				</ul>
			</slide>
			<slide id="guidelines">
				<title>API Guidelines</title>
				<ul>
					<li>More API teams mean more ways to solve the same problem</li>
					<ul>
						<li>Solving <q>API problems</q> is not what teams should focus on</li>
						<li>Solving <q>API problems</q> in a consistent way helps the API landscape</li>
					</ul>
					<ul>Anatomy of a Good Guideline</ul>
					<ul>
						<li><em>Why</em> does the guideline exist?</li>
						<li><em>What</em> can be done to address the described issue</li>
						<li><em>How</em> to implement the solution</li>
						<li><em>Testing</em> that the guideline has been followed</li>
					</ul>
				</ul>
			</slide>
			<slide id="zalando">
				<title>API Guideline in the Wild</title>
				<img href="https://opensource.zalando.com/restful-api-guidelines/#http-status-codes-and-errors" title="Zalando RESTful API and Event Guidelines" src="zalando-guideline-http-problem.png" class="fullsize"/>
			</slide>
			<slide id="governance">
				<title>API Governance</title>
				<ul>
					<li>Balancing coherence and autonomy in large organizations</li>
					<li>Making it easy to do the right thing</li>
					<li>Making it hard to do things wrong</li>
					<li>Using tools, processes, and platforms to <q>engineer the engineers</q></li>
				</ul>
			</slide>
		</part>
		<part id="problem-details">
			<title>HTTP Problem Details</title>
			<slide id="http-problem">
				<title>HTTP Problem Details</title>
				<ul>
					<li><a href="http://webconcepts.info/concepts/http-status-code/">HTTP status codes</a> are useful but minimalistic</li>
					<ul>
						<li>Their well-defined semantics allow intermediaries to act on them</li>
						<li>Servers may want to convey additional information with them</li>
					</ul>
					<li>APIs may include <em>problem details</em> as part of their representation designs</li>
					<ul>
						<li>Using a standard reduces the design work on the server side</li>
						<li>Using a standard allows developers to more easily understand the design</li>
						<li>Using a standard allows problem details analysis across APIs</li>
					</ul>
					<li>RFC <a title='Mark Nottingham and Erik Wilde, "Problem Details for HTTP APIs", Internet RFC 7807, March 2016' href="https://www.rfc-editor.org/rfc/rfc9457.html">7807</a>/<a title='Mark Nottingham, Erik Wilde, and Sanjay Dalal, "Problem Details for HTTP APIs", Internet RFC 9457, July 2023' href="https://www.rfc-editor.org/rfc/rfc9457.html">9457</a> defines a JSON-centric model for problem details</li>
					<ul>
						<li><code>application/problem+json</code> is a JSON-based representation of the problem detail model</li>
						<li><code>application/problem+xml</code> is an XML-based representation of the problem detail model</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-problem-json">
				<title>HTTP Problem Details: JSON</title>
				<listing href="https://tools.ietf.org/html/rfc9457#section-3" src="http-problem-details.json"/>
			</slide>
			<slide id="http-problem-xml">
				<title>HTTP Problem Details: XML</title>
				<listing href="https://tools.ietf.org/html/rfc9457#appendix-B" src="http-problem-details.xml"/>
			</slide>
		</part>
		<part id="rfc7807-rfc9457">
			<title>RFC 9457: The New RFC 7804</title>
			<slide id="rfc7807">
				<title><a href="https://www.rfc-editor.org/rfc/rfc7807.html">RFC 7807</a> (March 2016)</title>
				<img href="https://datatracker.ietf.org/doc/rfc7807/" title="IETF Datatracker: RFC 7807" src="datatracker-rfc-7807.png" class="fullsize-shadow"/>
			</slide>
			<slide id="rfc9457">
				<title><a href="https://www.rfc-editor.org/rfc/rfc9457.html">RFC 9457</a> (July 2023)</title>
				<img href="https://datatracker.ietf.org/doc/rfc9457/" title="IETF Datatracker: RFC 9457" src="datatracker-rfc-9457.png" class="fullsize-shadow"/>
			</slide>
			<slide id="differences">
				<title>Differences between RFC 7807 and RFC 9457</title>
				<ul>
					<li>There are no breaking changes</li>
					<li>Three issues seen from usage in the wild</li>
					<ul>
						<li>Registry of common problem type URIs</li>
						<li>Clarification of how to treat multiple problems</li>
						<li>Guidance for using type URIs that cannot be dereferenced</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="problem-types">
			<title>Managing Problem Types</title>
			<slide id="smartbear-registry">
				<title>SmartBear Problem Details Registry</title>
				<img src="smartbear-problem-details-registry.png" href="https://problems-registry.smartbear.com/" class="fullsize"/>
			</slide>
			<slide id="smartbear-repository">
				<title>SmartBear Problem Details Repository</title>
				<img src="smartbear-problem-details-repository.png" href="https://github.com/SmartBear-DevRel/problems-registry" class="fullsize"/>
			</slide>
			<slide id="iana-registry">
				<title>IANA Problem Types Registry</title>
				<img src="iana-problem-types-registry.png" href="https://www.iana.org/assignments/http-problem-types/http-problem-types.xhtml" class="fullsize"/>
			</slide>
		</part>
		<part id="conclusions-error-messages">
			<title>Conclusions</title>
			<slide id="shift-down">
				<title>Shift left? Shift down!</title>
				<ul>
					<li>Product people: Raise an issue when inventing patterns</li>
					<li>Platform people: Identify the <q>biggest bang for the reuse buck</q></li>
					<li>Tooling people: Bake open and extensible patterns into tools</li>
				</ul>
			</slide>
			<slide id="thanks-error-messages">
				<title>Thank You!</title>
				<img src="end.jpg" title="This is the End" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li><a href="https://www.youtube.com/ErikWilde"><img src="youtube-logo.png" style=" height : 1em ; "/> <code>youtube.com/ErikWilde</code></a></li>
					<li><a href="https://www.linkedin.com/in/erikwilde"><img src="linkedin-logo.png" style=" height : 1em ; "/> <code>linkedin.com/in/erikwilde</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/jax-london-2023/"><code>dret.net/lectures/jax-london-2023/</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="cloudevents">
		<title short="CloudEvents">CloudEvents: One Event to Rule Them All</title>
		<date short="2023-10-04">October 4, 2023</date>
		<toc class="abstract">API management and governance in API landscapes are distinctively different from just looking at individual APIs. All the aspects of individual API apply as well, but there is the added aspect of achieving some coherence across the landscape. With this coherence, API designers and producers can more easily reuse design pattern and tooling, whereas API consumers can more easily understand APIs because they share design principles and building blocks. In the case of Event-Driven Architecture (EDA), the boundaries between APIs tend to be more blurry anyways because quite often event brokers are part of the landscape. CloudEvents establish a vocabulary and representations for describing event data across events and event producers. We'll take a look at the standard itself and at the most important vocabulary terms.</toc>
		<slide id="summary-cloudevents">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<slide id="getting-apis-to-work-cloudevents">
			<title>Getting APIs to Work</title>
			<div style=" float : left ; width : 44% ; margin : 0% 4% 0% 2% ; ">
				<div style=" width: 100% ; position: relative ; padding-bottom: 56.25% ; ">
					<iframe style=" border: 0 ; top: 0 ; left: 0 ; width: 100% ; height: 100% ; position: absolute; " src="https://www.youtube-nocookie.com/embed/ErJ3cDkYuqQ" allowfullscreen="no" scrolling="no" allow="encrypted-media; accelerometer; gyroscope; picture-in-picture"/>
				</div>
			</div>
			<div style=" float : right ; width : 44% ; margin : 0% 4% 0% 2% ; ">
				<div style=" width: 100% ; position: relative ; padding-bottom: 56.25% ; ">
					<iframe style=" border: 0 ; top: 0 ; left: 0 ; width: 100% ; height: 100% ; position: absolute; " src="https://www.youtube-nocookie.com/embed/4FzpJ6CDro4" allowfullscreen="no" scrolling="no" allow="encrypted-media; accelerometer; gyroscope; picture-in-picture"/>
				</div>
			</div>
		</slide>
		<part id="why">
			<title>Why consider using CloudEvents?</title>
			<slide id="eda">
				<title>EDA is on the Rise</title>
				<img src="gartner-hype-cycle-apis-2022.png" title="Gartner 2022 Hype Cycle for APIs" class="fullsize"/>
			</slide>
			<slide id="landscape-management">
				<title>API Landscape Management Matters</title>
				<img src="CAM2-cover.png" href="https://www.oreilly.com/library/view/continuous-api-management/9781098103514/" title="Continuous API Management, 2nd Edition, October 2021" style=" float: right ; width : 25% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li>Evolution of API styles</li>
					<li>Decentralization of API management</li>
					<li>API governance</li>
					<li>Managing API and developer platforms</li>
				</ul>
			</slide>
			<slide id="messaging">
				<title>Messaging System Landscapes</title>
				<img src="messaging.png" title="Image by Clemens Vasters" href="https://github.com/clemensv/messaging/blob/main/presentations/2022-04-05%20Azure%20Messaging%20%E2%80%93%20Standards%20Matter.pptx" class="fullsize"/>
			</slide>
			<slide id="only-one">
				<title>There Cannot Be Only One</title>
				<img src="highlander.png" href="https://en.wikipedia.org/wiki/Highlander_(film)" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li>Growing and evolving API landscapes are the new normal</li>
					<li>Deciding on <q>the one</q> API style/technology/platform is a losing battle</li>
					<li>Plan and architect for diversity</li>
					<li>There is a broad spectrum between <q>The One</q> and <q>Anything Goes</q></li>
				</ul>
			</slide>
			<slide id="event-landscapes">
				<title>CloudEvents: Managing Events in Event Landscapes</title>
				<img src="cloudevents-logo.png" style="float: right ; width : 20% ; margin : 0% 6% 6% 6% ; "/>
				<ol>
					<li>Create a <em>model for context attributes</em> that describe events</li>
					<li>Define an <em>extension model for extension attributes</em></li>
					<li>Map context and extension attributes into <em>event format encodings</em></li>
					<li>Create <em>protocol bindings</em> for protocols supporting message metadata</li>
					<li>Provide support for consistent <em>versioning</em> of events</li>
				</ol>
			</slide>
			<slide id="example">
				<title>CloudEvents Example</title>
				<listing src="cloudevents-example-structured.json" href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md#32-examples"/>
			</slide>
			<slide id="value-prop">
				<title>CloudEvents Value Proposition</title>
				<ul>
					<li><em>Unified model</em> of events across formats and messaging fabrics</li>
					<li><em>Easier integration</em> of events across various technologies</li>
					<li><em>Better Function-as-a-Service (FaaS) portability</em> across FaaS platforms</li>
					<li>Better opportunities for <em>Tooling</em> to benefit from the unified model</li>
					<li>Foundation for specific event-oriented models such as <em>Webhooks</em></li>
					<li>Easier <em>policy enforcement</em> across the landscape and between systems</li>
				</ul>
			</slide>
		</part>
		<part id="what">
			<title>What do CloudEvents look like?</title>
			<slide id="attributes-required">
				<title><a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#required-attributes">Required Attributes</a></title>
				<ul>
					<li><code>id (String)</code>: Uniquely identifies the <em>event</em> (for a given source)</li>
					<li><code>source (URI-reference)</code>: Identifies the <em>context</em> in which an event happened</li>
					<li><code>specversion (String)</code>: The CloudEvents specification version (currently <q>1.0</q>)</li>
					<li><code>type (String)</code>: Identifies the <em>type</em> of event that happened</li>
				</ul>
			</slide>
			<slide id="attributes-optional">
				<title><a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#optional-attributes">Optional Attributes</a></title>
				<ul>
					<li><code>datacontenttype (String)</code>: Identifies the content type of the data value</li>
					<li><code>dataschema (URI)</code>: Identifies the <em>schema</em> of the data value</li>
					<li><code>subject (String)</code>: Identifies the event subject below source level</li>
					<li><code>time (Timestamp)</code>: Timestamp of when the occurrence happened</li>
				</ul>
			</slide>
<!--
			<slide id="extensions">
				<title>Extensions and Type System</title>
				<ul>
					<li>Events can use <em>extension attributes</em> beyond the core set</li>
					<li>CloudEvents maintains a list of <em href="https://github.com/cloudevents/spec/blob/main/cloudevents/documented-extensions.md">documented extensions</em></li>
					<li>Any extension must be defined using the CloudEvents type system</li>
					<ul>
						<li><code>Boolean</code>: A boolean value of <q>true</q> or <q>false</q></li>
						<li><code>Integer</code>: A whole number in the range -2,147,483,648 to +2,147,483,647 inclusive</li>
						<li><code>String</code>: Sequence of allowable Unicode characters</li>
						<li><code>Binary</code>: Sequence of bytes</li>
						<li><code>URI</code>: Absolute uniform resource identifier</li>
						<li><code>URI-reference</code>: Uniform resource identifier reference</li>
						<li><code>Timestamp</code>: Date and time expression using the Gregorian Calendar</li>
					</ul>
				</ul>
			</slide>
-->
			<slide id="format-binding-content">
				<title>Formats, Bindings, and Content Modes</title>
				<ul>
					<li>CloudEvents have to be mapped into a specific <em href="https://github.com/cloudevents/spec/tree/v1.0.2/cloudevents/formats">event format</em></li>
					<ul>
						<li>All implementations must support the <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md">JSON format</a></li>
						<li><a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/avro-format.md">Avro</a> and <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/protobuf-format.md">Protobuf</a> formats are available as well</li>
					</ul>
					<li><em href="https://github.com/cloudevents/spec/tree/v1.0.2/cloudevents/bindings">Protocol bindings</em> describe how events are sent and received over a given protocol</li>
					<ul>
						<li>Currently existing bindings are for <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/bindings/amqp-protocol-binding.md">AMQP</a>, <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/bindings/http-protocol-binding.md">HTTP</a>, <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/bindings/kafka-protocol-binding.md">Kafka</a>, <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/bindings/mqtt-protocol-binding.md">MQTT</a>, <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/bindings/nats-protocol-binding.md">NATS</a>, and <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/bindings/websockets-protocol-binding.md">WebSockets</a></li>
					</ul>
					<li><em>Content modes</em> can describe different ways of how to deliver events</li>
					<ul>
						<li><em>Structured content mode</em> represents events in the way defined by a format</li>
						<li><em>Binary content mode</em> places attributes in protocol metadata (e.g., HTTP header fields)</li>
						<li><em>Batched content mode</em> has to be supported by batch-friendly formats</li>
					</ul>
				</ul>
			</slide>
			<slide id="example">
				<title>CloudEvents Example: Structured</title>
				<listing src="cloudevents-example-structured.json" href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md#32-examples"/>
			</slide>
			<slide id="example">
				<title>CloudEvents Example: HTTP Binary</title>
				<listing src="cloudevents-example-binary.json" href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md#32-examples"/>
			</slide>
		</part>
		<part id="how">
			<title>Getting CloudEvents To Work</title>
			<slide id="asyncapi">
				<title>CloudEvents and AsyncAPI</title>
				<ul>
					<li><em>AsyncAPI</em> focuses on describing event-based APIs</li>
					<li><em>CloudEvents</em> focuses on unifying events across event-based APIs</li>
					<li>Combining the two is a good idea for complex API/EDA landscapes</li>
				</ul>
			</slide>
			<slide id="api-designer">
				<title>CloudEvents for API Designers</title>
				<ul>
					<li><em>Structured content mode</em> requires payload to carry CloudEvents data</li>
					<ul>
						<li>AsyncAPI structure will look as usual</li>
						<li>AsyncAPI messages have to conform with CloudEvents</li>
					</ul>
					<li><em>Binary content mode</em> requires protocols to carry CloudEvents data</li>
					<ul>
						<li>HTTP has to accommodate CloudEvents data</li>
						<li><em>AsyncAPI traits</em> are a useful mechanism for reusable message data</li>
						<li>AsyncAPI messages specify the event data</li>
					</ul>
				</ul>
			</slide>
			<slide id="asyncapi-trait">
				<title>CloudEvents AsyncAPI Trait</title>
				<listing src="cloudevents-asyncapi-trait.yml" href="https://github.com/microcks/microcks-quickstarters/blob/main/cloud/cloudevents/cloudevents-v1.0.1-asyncapi-trait.yml"/>
			</slide>
			<slide id="json-schema">
				<title>CloudEvents JSON Schema</title>
				<listing src="cloudevents-schema.json" href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/cloudevents.json"/>
			</slide>
			<slide id="platform">
				<title>CloudEvents as a Platform</title>
				<ul>
					<li>Make CloudEvents part of your API guidelines</li>
					<li>Provide tooling for API designers, developers, and consumers</li>
					<li>Make sources and types easily findable for everybody</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions-cloudevents">
			<title>Conclusions</title>
			<slide id="one-model">
				<title>One Event (Model) to Rule Them All</title>
				<img src="highlander.png" href="https://en.wikipedia.org/wiki/Highlander_(film)" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li>EDA is on the rise</li>
					<li>Avoid the <q>EDA ESB</q> and plan for diversity</li>
					<li>CloudEvents provide a unified event model</li>
					<li>CloudEvents and AsyncAPI work together as a team</li>
				</ul>
			</slide>
			<slide id="thanks-cloudevents">
				<title>Thank You!</title>
				<img src="end.jpg" title="This is the End" style="float: right ; height : 65% ; margin : 0% 4% 4% 4% ; filter: drop-shadow(0px 0px 10px rgba(0,0,0,0.6)) ; "/>
				<ul>
					<li><a href="https://www.youtube.com/ErikWilde"><img src="youtube-logo.png" style=" height : 1em ; "/> <code>youtube.com/ErikWilde</code></a></li>
					<li><a href="https://www.linkedin.com/in/erikwilde"><img src="linkedin-logo.png" style=" height : 1em ; "/> <code>linkedin.com/in/erikwilde</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/jax-london-2023/"><code>dret.net/lectures/jax-london-2023/</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>